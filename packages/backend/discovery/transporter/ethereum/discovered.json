{
  "name": "transporter",
  "chain": "ethereum",
  "blockNumber": 20024520,
  "configHash": "0x9628f20e08ca73dd1746005460e770440459af01735b5c08b5b747a3c7c394e7",
  "version": 4,
  "contracts": [
    {
      "name": "PriceRegistry",
      "address": "0x020082A7a9c2510e1921116001152DEE4da81985",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688661671,
      "values": {
        "getFeeTokens": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
        ],
        "getPriceUpdaters": [
          "0x8bEFCa744c6f2b567b1863dcF055C593afdC11A0",
          "0x40c558575093eC1099CC21B020d9b8D13c74417F",
          "0x20718EfbC25Dba60FD51c2c81362b83f7C411A6D",
          "0x7986C9892389854cAAbAC785ff18123B0070a5Fd",
          "0x3d3467e1036Ee25F6F4aa15e3Abf77443A23144C",
          "0x2D1708ff2a15adbE313eA8C6035aA24d0FBA1c77"
        ],
        "getStalenessThreshold": 90000,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "KeeperRegistry",
      "address": "0x02777053d6764996e594c3E88AF1D58D5363a2e6",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1655336732,
      "values": {
        "FAST_GAS_FEED": "0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C",
        "getMaxPaymentForGas": [
          "449970112760236559",
          "449975737386646062",
          "449981362013055565",
          "449986986639465067",
          "449992611265874570"
        ],
        "getMinBalanceForUpkeep": [
          "449970112760236559",
          "449970112760236559",
          "449970112760236559",
          "449970112760236559",
          "449970112760236559"
        ],
        "getState": [
          [311, "5600000000000000000", "28603244318572846245164", 115],
          [
            200000000,
            0,
            10,
            6500000,
            90000,
            2,
            "100000000000000000",
            5000000,
            200000000000,
            "20000000000000000",
            "0x93FcFBAD0e12C985BbFc8B7Aec4160003Fc7aA18",
            "0xDb8e8e2ccb5C033938736aa89Fe4fa1eDfD15a1d"
          ],
          [
            "0xd6060b36F7142AeA27231c28932c67D76bebA173",
            "0x33512418380F170e5752Fc233F1326f3e805eA62",
            "0x836cDB9041b442c11c85442A4E5a87aB3dcc0a5F",
            "0x98924befaA16b607b3E168b6C57C9528AF5CC076",
            "0x72855d64b7EB20379cbd9AB826c0a35DCE33f375",
            "0x083b4cC0DB892160DC5928066D294ba8D4220830",
            "0x3824b7a9C6d4Ea93456DF9B07df4fFDB37FFBcbf",
            "0xc4E524aeea57B0ee33ea726c4672A70101Af32bf",
            "0xF12571de5A310008F1B7490F1aAf52de11325cC8",
            "0xE48f40fBc76cbA315F99Fd5Ba08AfA2f00B8E074",
            "0x86C5d9efB1377DbA0535Cf944Bd6F5736c4290cB",
            "0x18cBe724E7C248cdA2803F48D1EA6d019623b5cC",
            "0xa7b2Cf222d287D568E24085E514d4b197759394f",
            "0x5C581b8c0961F93543112bf1Ffa27C1cA166e0e5",
            "0x0Fd40853B3B8c7805158b862B76B35A2a27B596A"
          ]
        ],
        "getUpkeep": [
          [
            "0x0000000000000000000000000000000000000000",
            0,
            "0x",
            0,
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            "0x0000000000000000000000000000000000000000",
            0,
            "0x",
            0,
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            "0x0000000000000000000000000000000000000000",
            0,
            "0x",
            0,
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            "0x0000000000000000000000000000000000000000",
            0,
            "0x",
            0,
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            "0x0000000000000000000000000000000000000000",
            0,
            "0x",
            0,
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ]
        ],
        "LINK": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
        "LINK_ETH_FEED": "0xDC530D9457755926550b59e8ECcdaE7624181557",
        "owner": "0x21f73D42Eb58Ba49dDB685dc29D3bF5c0f0373CA",
        "paused": false,
        "typeAndVersion": "KeeperRegistry 1.2.0",
        "upkeepTranscoderVersion": 0
      },
      "errors": {
        "getMaxPaymentForGas": "Too many values. Update configuration to explore fully",
        "getMinBalanceForUpkeep": "Too many values. Update configuration to explore fully",
        "getUpkeep": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "RewardsLocker",
      "address": "0x02FFdaCeb369b54255b6f20d640C5829F029061F",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1686330755,
      "values": {
        "owner": "0x47C7c921ADf8b09e24EfAc584E2064e34CBb1b6F",
        "rewards": "0x300648a601c584E6379fa0D6a31CbBFCcA6177e4"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x047204D42d93a6471F7c9Ec94292B4B00E8e0786",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1711406459,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000001",
        "getRebalancer": "0x0000000000000000000000000000000000000001",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4949039107694359620"],
        "getToken": "0x32bd822d615A3658A68b6fDD30c2fcb2C996D678",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x057152DB365B47851B0A0bd431644b8eE21fE1b4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688661647,
      "values": {
        "getAllowList": [
          "0x7A0a06735E41dc59F90228686f44bf2E13CC1724",
          "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847"
        ],
        "getAllowListEnabled": true,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x41627a90f2c6238f2BADAB72D5aB050B857fdAb5",
          "0x1C207dabc46902dF9028b27D6d301c3849b2D12c",
          "0xBDd822f3bC2EAB6818CfA3053107831D4E93fE72",
          "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7"
        ],
        "getOnRamps": [
          "0xCC19bC4D43d17eB6859F0d22BA300967C97780b0",
          "0xd0B5Fc9790a6085b048b8Aa1ED26ca2b3b282CF2",
          "0x0f27c8532457b66D6037141DEB0ed479Dad04B3c",
          "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1"
        ],
        "getToken": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x06f9817a91595E1B595F789Fb91529e8651da9B8",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715364563,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["11344663589394136015", "4949039107694359620"],
        "getToken": "0x60b9C41d99FE3Eb64Ecc1344baD31D87f1bceD6D",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "CCIPBridgeProxy",
      "address": "0x0779960d4DC3e594B40b531dB9496E4620ed6757",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695318695,
      "values": {
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "getToken": "0xCA160D11087E03fd398d40f561cd4768825f4958"
      }
    },
    {
      "name": "MessageTransmitter",
      "address": "0x0a992d191DEeC32aFe36203Ad87D7d289a738F81",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677628247,
      "values": {
        "attesterManager": "0x358a85e032aA9507a1303683b2B6A1d1cac3c252",
        "getEnabledAttester": [
          "0xb0Ea8E1bE37F346C7EA7ec708834D0db18A17361",
          "0xE2fEfe09E74b921CbbFF229E7cD40009231501CA"
        ],
        "getNumEnabledAttesters": 2,
        "localDomain": 0,
        "maxMessageBodySize": 8192,
        "nextAvailableNonce": 67230,
        "owner": "0x4aA5bF962852DcC59695F600d346D3F751B0D920",
        "paused": false,
        "pauser": "0xc809b0216B149cc301Cb203EDD84FCdB8F15C4ed",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "rescuer": "0x6Fa60A88b42AFb0aEe6488826A58864B192442ad",
        "signatureThreshold": 2,
        "version": 0
      }
    },
    {
      "name": "OffRamp7",
      "address": "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701286919,
      "values": {
        "commitStore": ["0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76"],
        "currentRateLimiterState": [
          "1000000000000000000000000",
          1717577159,
          true,
          "1000000000000000000000000",
          "277000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76",
          "5009297550715157269",
          "4051577828743386545",
          "0xFd77c53AA4eF0E3C01f5Ac012BF7Cc7A3ECf5168",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19864195,
          "0x0001e235c578fe09344d3893d6ac91fb7a021473adcdf1bbb74bed76b7f13698"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712691755,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": [
          "3734403246176062136",
          "4949039107694359620",
          "15971525489660198786"
        ],
        "getToken": "0xB60acD2057067DC9ed8c083f5aa227a244044fD6",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x0d954A23a3c32aea407dF052C29E14434a4BB9aa",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "4 of 6 (67%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1680128783,
      "values": {
        "domainSeparator": "0x5dd8192ccce5779416929dd99e647306553f885426c25c53d359c645581d708f",
        "getChainId": 1,
        "getOwners": [
          "0x054B7Db5f5DDBC9748D3e7d8ded296fe37B1fd46",
          "0xf6f12C499E1a76634da4c321b781942d282A8e29",
          "0x6eed1087Acd27A6306E8a3e989144B4A679d3C50",
          "0xa4c4FeB118a42A337020487459001cF5282825Cd",
          "0x2aad7029B5408fe61592AEA53Afa16F81bBC4F51",
          "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77"
        ],
        "getThreshold": 4,
        "nonce": 76,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x0DAFed8dAF42040dB2c6227ca2AEB14D9C8B2602",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1716484655,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["15971525489660198786", "4949039107694359620"],
        "getToken": "0x482dF7483a52496F4C65AB499966dfcdf4DDFDbc",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "",
      "address": "0x0E33075f2517a3F452DE8bD023E508D7899a9f9A",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695218447
    },
    {
      "name": "OnRamp11",
      "address": "0x0f27c8532457b66D6037141DEB0ed479Dad04B3c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688669975,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getAllowList": [
          "0xAFa2c441a83bBCEDc2E8c5c6f66248aFD8b9af3d",
          "0x6aaD18a3cafB04b9a70761943796eCC179A1D933",
          "0xB66364b66ebf3D33e48945bc87C41f4607fBa792",
          "0x789d7f3e2eaA6de41133A7fB11d7390603645F31",
          "0x70996FeE3bc1BA38e36Ea356aee5d855161e6e52",
          "0xF9F5bcd3a50653387ee0b9d60C1905854093e8Fb",
          "0x4C96324a3cb342aa51fA6ABa0ac4C838Df427464",
          "0xaA562FA16EBB6479Ee7bD6A4ABBaB7C83C93EB70",
          "0xc9e03910DDDF689D3e309b42dbf4c581ED1e795D",
          "0x0E33075f2517a3F452DE8bD023E508D7899a9f9A",
          "0x284A4912a39dD710994347cB63853E297f45564f",
          "0x66F806aB43AB8a9bdd4Db54899179aC5A3EB6F51",
          "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F",
          "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
          "0xCcC8170eB01434Ca514a6f7a5d9ACEB5Ba84DcCc",
          "0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1",
          "0x426c7fCd001A4EDD242A2bdcc7a2027de892500c",
          "0xA473fDfdBBaf3a31f14F5b69f0Dfc31cc5a14e83",
          "0x7ace867b3a503C6C76834ac223993FBD8963BED2",
          "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB",
          "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
          "0x17483FC75528C53d21Ca7465484aee081BFf39Bd",
          "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61",
          "0xdF715B5815A735DCfF31166d642A367f5405e6Ef",
          "0xac400063D3B5E2fda887a7a1dFdAaAC4B5bAD6BD",
          "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
          "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5"
        ],
        "getAllowListEnabled": true,
        "getDynamicConfig": [
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          1,
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          30000,
          2000000
        ],
        "getExpectedNextSequenceNumber": 2142,
        "getNopFeesJuels": 9,
        "getNops": [
          [
            ["0xfA3430d84324ABC9ac8AAf30B2D26260F5172ad0", 75],
            ["0x9D219125a0CE10241b4eC1280c2F880475f172f1", 113],
            ["0x55AB744a77f8b1daCa1B7D22d5112165Bcc77d4c", 6289],
            ["0x59eCf48345A221E0731E785ED79eD40d0A94E2A5", 52],
            ["0x9efa0A617C0552F1558c95993aA8b8A68b3e709C", 97],
            ["0xFdC770353dC0bFCE80a17Ab8a6a2E7d80590f1Ba", 59],
            ["0x7AF3C2b54eE2f170b8104222eB4EDf2511f5d9d0", 0],
            ["0x15918ff7f6C44592C81d999B442956B07D26CC44", 28],
            ["0x001E0d294383d5b4136476648aCc8D04a6461Ae3", 327],
            ["0x4564A9c6061f6f1F2Eadb954B1b3C241D2DC984e", 0],
            ["0xDF812B91D8bf6DF698BFD1D8047839479Ba63420", 283],
            ["0x14f94049397C3F1807c45B6f854Cb5F36bC4393B", 357],
            ["0xAB35418fB9f8B13E3e6857c36A0769b9F94a87EC", 86],
            ["0x0921E157b690c4F89F7C2a210cFd8bF3964F6776", 86],
            ["0x47044eE2F23001F8a03FB2f7d2ce6645aDA4D12A", 0],
            ["0xa06B89B08F038Aff4F81ce0A45c5aCb040477c3b", 738],
            ["0x3FB4600736d306Ee2A89EdF0356D4272fb095768", 183],
            ["0xBDB624CD1051F687f116bB0c642330B2aBdfcc06", 0],
            ["0xDA80050Ed4F50033949608208f79EE43Ab91dF55", 37],
            ["0x9cCbFD17FA284f36c2ff503546160B256d1CD3D1", 185],
            ["0xC51D3470693BC049809A1c515606124c7C75908d", 745],
            ["0x183A96629fF566e7AA8AfA38980Cd037EB40A59A", 0],
            ["0x111f1B41f702c20707686769a4b7f25c56C533B2", 260]
          ],
          10000
        ],
        "getStaticConfig": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "5009297550715157269",
          "4051577828743386545",
          200000,
          "20000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": [
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60"
        ],
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "9329970669123959811",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOnRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "AggregationRouterV6",
      "address": "0x111111125421cA6dc452d289314280a0f8842A65",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1707752675,
      "values": {
        "eip712Domain": [
          "0x0f",
          "1inch Aggregation Router",
          "6",
          1,
          "0x111111125421cA6dc452d289314280a0f8842A65",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "owner": "0x11799622F4D98A24514011E8527B969f7488eF47",
        "paused": false
      }
    },
    {
      "name": "AggregationRouterV5",
      "address": "0x1111111254EEB25477B68fb85Ed929f73A960582",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1667541899,
      "values": {
        "owner": "0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1",
        "timestampBelow": [false, false, false, false, false],
        "timestampBelowAndNonceEquals": [false, false, false, false, false]
      },
      "errors": {
        "timestampBelow": "Too many values. Update configuration to explore fully",
        "timestampBelowAndNonceEquals": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "AggregationRouterV4",
      "address": "0x1111111254fb6c44bAC0beD2854e76F90643097d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1636107489,
      "values": {
        "DOMAIN_SEPARATOR": "0x39821575e26f6b451072044840d9a68b6718f7a7770887d2b17a3b48f7147ca3",
        "LIMIT_ORDER_RFQ_TYPEHASH": "0x74ab4f0cde46aaf927859983f7d04002116dd057d4c4941f6dbfb775c3e31f45",
        "owner": "0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x1175E4CFd6a73A4c1F1f2c1400a08D88554FA62e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1709671307,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": ["0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5"],
        "getOnRamps": ["0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4"],
        "getToken": "0x66cC3FD40612F9c591F977ce026Ef1C79520C472",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.2.0"
      }
    },
    {
      "name": "CommitStore2",
      "address": "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1710865403,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 6,
        "getLatestPriceEpochAndRound": 360449,
        "getStaticConfig": [
          "5009297550715157269",
          "465200170687744372",
          "0x0F246651F1c2275B4E14d8ae166D1fd3Af05c405",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          7,
          19992884,
          "0x0001a5c2251b87652560fb4349f8229e01a1729f3d9bbad8abfb2d67baa7bd31"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "SameChainAdapter",
      "address": "0x118DFD5418890c0332042ab05173Db4A2C1d283c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1689286739,
      "values": {
        "getTrustedRemoteByChainId": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "infraToNativeChainId": [0, 1, 0, 0, 0],
        "nativeToInfraChainId": [0, 1, 0, 0, 0]
      },
      "errors": {
        "getTrustedRemoteByChainId": "Too many values. Update configuration to explore fully",
        "infraToNativeChainId": "Too many values. Update configuration to explore fully",
        "nativeToInfraChainId": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "LiFiDiamond",
      "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
      "unverified": true,
      "upgradeability": {
        "type": "EIP2535 diamond proxy",
        "facets": [
          "0xf7993A8df974AD022647E63402d6315137c58ABf",
          "0xF5ba8Db6fEA7aF820De35C8D0c294e17DBC1b9D2",
          "0x6faA6906b9e4A59020e673910105567e809789E0",
          "0xE397c4883ec89ed4Fc9D258F00C689708b2799c9",
          "0x4bEAa5D26300e81cd17e0981fc15494Bb4B10959",
          "0x77A13abB679A0DAFB4435D1Fa4cCC95D1ab51cfc",
          "0x0b5726b7348efBdA8620D5C374F85Cbe8f040B6a",
          "0x411F81f16FF40984ac8a4546f2Ad19e22704693F",
          "0x3b70Eb33948Fbfdc3f2F2491b96DFB1Aa18054E0",
          "0x0eF01249E2731082A078C0B3f408c2929c90Ac9c",
          "0x090e074bc934c4D8B84e168cb6597e87Da0C019b",
          "0xF2c63815eBD0c4E048eF216C77E2c80aa4ecD59c",
          "0x02063A0d7a222c16D5b63213262596B83b07150c",
          "0xBeE13d99dD633fEAa2a0935f00CbC859F8305FA7",
          "0x3C826D17B47DB69E1a9C1e32E10768d3709f1b9A",
          "0x87C10910DA7258E55dA2C5d43739fB68B12E6a4b",
          "0xF609fdBA8f7A020975a7c82C82f6A1f526F9A8fC",
          "0x7D1940fDfF0B37c137B105ce7967B3B86DB42648",
          "0x69cb467EfD8044ac9eDB88F363309ab1cbFA0A15",
          "0x2b7D2C78bd801Cc06DDCF91DeE2e8fAE22814f7e",
          "0xd84d9A8Bf830496C4DEc917bC27D22E09E01cB8A",
          "0x7D507e6E89C52aE610b8D0151c8cb24c24e43bdb",
          "0x66861f292099cAF644F4A8b6091De49BEC5E8a15",
          "0xE7Bf43C55551B1036e796E7Fd3b125d1F9903e2E",
          "0xC0c42d148241c5b5BB38e974d40Fc9087f7F9ecD",
          "0x6eF81a18E1E432C289DC0d1a670B78E8bbF9AA35",
          "0x6731C946747bA54c78e7a65d416Cde39E478ECeb",
          "0xF70A1Ed85EcC454a562A4B69ee40CBc6a4eB0b64",
          "0x175E7799DA0CD40E641352EaB90D8e39e02a4Ca9",
          "0x7A5c119ec5dDbF9631cf40f6e5DB28f31d4332a0",
          "0xF965f52046D7095d5080bD31459601F4Eb24f72D",
          "0xab0E64fc4486d2A2e3F5Bdd232Ebd19E8cDebaD0",
          "0x711e80A9c1eB906d9Ae9d37E5432E6E7aCeEdA0B",
          "0x5292ef25cF25a1e28A8B44e6443088c332FEB48c",
          "0xF18A285f4e6f720Eb9b4e05df71f88b9552E6ADB",
          "0xe12b2488c71432F9a116E9ac244D3Ef4c2386d3a",
          "0x5C2C3F56e33F45389aa4e1DA4D3a807A532a910c",
          "0x14B4e2e2e3422DeC6F8bF3DcDc0BF3566F37197D",
          "0x31a9b1835864706Af10103b31Ea2b79bdb995F5F"
        ]
      },
      "implementations": [
        "0xf7993A8df974AD022647E63402d6315137c58ABf",
        "0xF5ba8Db6fEA7aF820De35C8D0c294e17DBC1b9D2",
        "0x6faA6906b9e4A59020e673910105567e809789E0",
        "0xE397c4883ec89ed4Fc9D258F00C689708b2799c9",
        "0x4bEAa5D26300e81cd17e0981fc15494Bb4B10959",
        "0x77A13abB679A0DAFB4435D1Fa4cCC95D1ab51cfc",
        "0x0b5726b7348efBdA8620D5C374F85Cbe8f040B6a",
        "0x411F81f16FF40984ac8a4546f2Ad19e22704693F",
        "0x3b70Eb33948Fbfdc3f2F2491b96DFB1Aa18054E0",
        "0x0eF01249E2731082A078C0B3f408c2929c90Ac9c",
        "0x090e074bc934c4D8B84e168cb6597e87Da0C019b",
        "0xF2c63815eBD0c4E048eF216C77E2c80aa4ecD59c",
        "0x02063A0d7a222c16D5b63213262596B83b07150c",
        "0xBeE13d99dD633fEAa2a0935f00CbC859F8305FA7",
        "0x3C826D17B47DB69E1a9C1e32E10768d3709f1b9A",
        "0x87C10910DA7258E55dA2C5d43739fB68B12E6a4b",
        "0xF609fdBA8f7A020975a7c82C82f6A1f526F9A8fC",
        "0x7D1940fDfF0B37c137B105ce7967B3B86DB42648",
        "0x69cb467EfD8044ac9eDB88F363309ab1cbFA0A15",
        "0x2b7D2C78bd801Cc06DDCF91DeE2e8fAE22814f7e",
        "0xd84d9A8Bf830496C4DEc917bC27D22E09E01cB8A",
        "0x7D507e6E89C52aE610b8D0151c8cb24c24e43bdb",
        "0x66861f292099cAF644F4A8b6091De49BEC5E8a15",
        "0xE7Bf43C55551B1036e796E7Fd3b125d1F9903e2E",
        "0xC0c42d148241c5b5BB38e974d40Fc9087f7F9ecD",
        "0x6eF81a18E1E432C289DC0d1a670B78E8bbF9AA35",
        "0x6731C946747bA54c78e7a65d416Cde39E478ECeb",
        "0xF70A1Ed85EcC454a562A4B69ee40CBc6a4eB0b64",
        "0x175E7799DA0CD40E641352EaB90D8e39e02a4Ca9",
        "0x7A5c119ec5dDbF9631cf40f6e5DB28f31d4332a0",
        "0xF965f52046D7095d5080bD31459601F4Eb24f72D",
        "0xab0E64fc4486d2A2e3F5Bdd232Ebd19E8cDebaD0",
        "0x711e80A9c1eB906d9Ae9d37E5432E6E7aCeEdA0B",
        "0x5292ef25cF25a1e28A8B44e6443088c332FEB48c",
        "0xF18A285f4e6f720Eb9b4e05df71f88b9552E6ADB",
        "0xe12b2488c71432F9a116E9ac244D3Ef4c2386d3a",
        "0x5C2C3F56e33F45389aa4e1DA4D3a807A532a910c",
        "0x14B4e2e2e3422DeC6F8bF3DcDc0BF3566F37197D",
        "0x31a9b1835864706Af10103b31Ea2b79bdb995F5F"
      ],
      "sinceTimestamp": 1666261427,
      "values": {
        "ACROSS_REFERRER_DELIMITER": "0xd00dfeeddeadbeef",
        "approvedDexs": [
          "0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149",
          "0xa356867fDCEa8e71AEaF87805808803806231FdC",
          "0xa2398842F37465f89540430bDC00219fA9E4D28a",
          "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57",
          "0x216B4B4Ba9F3e719726886d34a177484278Bfcae",
          "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64",
          "0x1111111254fb6c44bAC0beD2854e76F90643097d",
          "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
          "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
          "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
          "0xbD6C7B0d2f68c2b7805d88388319cfB6EcB50eA9",
          "0xE592427A0AEce92De3Edee1F18E0157C05861564",
          "0x1111111254EEB25477B68fb85Ed929f73A960582",
          "0x353a5303dD2a39aB59aEd09fb971D359b94658C7",
          "0x894b3e1e30Be0727eb138d2cceb0A99d2Fc4C55D",
          "0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587",
          "0xf068cc770f32042Ff4a8fD196045641234dFaa47",
          "0x4b0B89b90fF83247aEa12469CeA9A6222e09d54c",
          "0x9ca271A532392230EAe919Fb5460aEa9D9718424",
          "0xB49EaD76FE09967D7CA0dbCeF3C3A06eb3Aa0cB4",
          "0x50f9bDe1c76bba997a5d6e7FEFff695ec8536194",
          "0xB4B0ea46Fe0E9e8EAB4aFb765b527739F2718671",
          "0xC85c2B19958D116d79C654ecE73b359c08802A76",
          "0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",
          "0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559",
          "0x6777f6ebEC76D796CB3999A69cd5980bD86cCfe5",
          "0x38147794FF247e5Fc179eDbAE6C37fff88f68C52",
          "0xdFC2983401614118E1F2D5A5FD93C17Fecf8BdC6",
          "0xc4f7A34b8d283f66925eF0f5CCdFC2AF3030DeaE",
          "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5",
          "0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E",
          "0x9501165EF2962e5C0612D6C5A4b39d606b27E22f",
          "0x14f2b6ca0324cd2B013aD02a7D85541d215e2906",
          "0x5215E9fd223BC909083fbdB2860213873046e45d",
          "0xc02FFcdD914DbA646704439c6090BAbaD521d04C",
          "0xe43ca1Dee3F0fc1e2df73A0745674545F11A59F5",
          "0x111111125421cA6dc452d289314280a0f8842A65"
        ],
        "facetAddresses": [
          "0xf7993A8df974AD022647E63402d6315137c58ABf",
          "0xF5ba8Db6fEA7aF820De35C8D0c294e17DBC1b9D2",
          "0x6faA6906b9e4A59020e673910105567e809789E0",
          "0xE397c4883ec89ed4Fc9D258F00C689708b2799c9",
          "0x4bEAa5D26300e81cd17e0981fc15494Bb4B10959",
          "0x77A13abB679A0DAFB4435D1Fa4cCC95D1ab51cfc",
          "0x0b5726b7348efBdA8620D5C374F85Cbe8f040B6a",
          "0x411F81f16FF40984ac8a4546f2Ad19e22704693F",
          "0x3b70Eb33948Fbfdc3f2F2491b96DFB1Aa18054E0",
          "0x0eF01249E2731082A078C0B3f408c2929c90Ac9c",
          "0x090e074bc934c4D8B84e168cb6597e87Da0C019b",
          "0xF2c63815eBD0c4E048eF216C77E2c80aa4ecD59c",
          "0x02063A0d7a222c16D5b63213262596B83b07150c",
          "0xBeE13d99dD633fEAa2a0935f00CbC859F8305FA7",
          "0x3C826D17B47DB69E1a9C1e32E10768d3709f1b9A",
          "0x87C10910DA7258E55dA2C5d43739fB68B12E6a4b",
          "0xF609fdBA8f7A020975a7c82C82f6A1f526F9A8fC",
          "0x7D1940fDfF0B37c137B105ce7967B3B86DB42648",
          "0x69cb467EfD8044ac9eDB88F363309ab1cbFA0A15",
          "0x2b7D2C78bd801Cc06DDCF91DeE2e8fAE22814f7e",
          "0xd84d9A8Bf830496C4DEc917bC27D22E09E01cB8A",
          "0x7D507e6E89C52aE610b8D0151c8cb24c24e43bdb",
          "0x66861f292099cAF644F4A8b6091De49BEC5E8a15",
          "0xE7Bf43C55551B1036e796E7Fd3b125d1F9903e2E",
          "0xC0c42d148241c5b5BB38e974d40Fc9087f7F9ecD",
          "0x6eF81a18E1E432C289DC0d1a670B78E8bbF9AA35",
          "0x6731C946747bA54c78e7a65d416Cde39E478ECeb",
          "0xF70A1Ed85EcC454a562A4B69ee40CBc6a4eB0b64",
          "0x175E7799DA0CD40E641352EaB90D8e39e02a4Ca9",
          "0x7A5c119ec5dDbF9631cf40f6e5DB28f31d4332a0",
          "0xF965f52046D7095d5080bD31459601F4Eb24f72D",
          "0xab0E64fc4486d2A2e3F5Bdd232Ebd19E8cDebaD0",
          "0x711e80A9c1eB906d9Ae9d37E5432E6E7aCeEdA0B",
          "0x5292ef25cF25a1e28A8B44e6443088c332FEB48c",
          "0xF18A285f4e6f720Eb9b4e05df71f88b9552E6ADB",
          "0xe12b2488c71432F9a116E9ac244D3Ef4c2386d3a",
          "0x5C2C3F56e33F45389aa4e1DA4D3a807A532a910c",
          "0x14B4e2e2e3422DeC6F8bF3DcDc0BF3566F37197D",
          "0x31a9b1835864706Af10103b31Ea2b79bdb995F5F"
        ],
        "facets": [
          ["0xf7993A8df974AD022647E63402d6315137c58ABf", ["0x1f931c1c"]],
          [
            "0xF5ba8Db6fEA7aF820De35C8D0c294e17DBC1b9D2",
            [
              "0xcdffacc6",
              "0x52ef6b2c",
              "0xadfca15e",
              "0x7a0ed627",
              "0x01ffc9a7"
            ]
          ],
          [
            "0x6faA6906b9e4A59020e673910105567e809789E0",
            ["0x23452b9c", "0x7200b829", "0x8da5cb5b", "0xf2fde38b"]
          ],
          [
            "0xE397c4883ec89ed4Fc9D258F00C689708b2799c9",
            [
              "0x5a39b10a",
              "0xb4f39378",
              "0x1cf9fd2f",
              "0xae6c7060",
              "0xacc53eb8",
              "0xcf73f711",
              "0x4c128e60",
              "0x2340ab8f",
              "0x5eedcbd6"
            ]
          ],
          [
            "0x4bEAa5D26300e81cd17e0981fc15494Bb4B10959",
            [
              "0x536db266",
              "0xfbb2d381",
              "0xfcd8e49e",
              "0x9afc19c7",
              "0x44e2b18c",
              "0x2d2506a9",
              "0x124f1ead",
              "0xc3a6a96b"
            ]
          ],
          [
            "0x77A13abB679A0DAFB4435D1Fa4cCC95D1ab51cfc",
            ["0x612ad9cb", "0xa4c3366e"]
          ],
          [
            "0x0b5726b7348efBdA8620D5C374F85Cbe8f040B6a",
            ["0x22907204", "0x13a5201b", "0x65c958d4", "0xac3dcc95"]
          ],
          [
            "0x411F81f16FF40984ac8a4546f2Ad19e22704693F",
            ["0x8dc9932d", "0x83f31917"]
          ],
          [
            "0x3b70Eb33948Fbfdc3f2F2491b96DFB1Aa18054E0",
            ["0xae0b91e5", "0x482c6a85", "0x0d19e519"]
          ],
          [
            "0x0eF01249E2731082A078C0B3f408c2929c90Ac9c",
            ["0x02cba4a3", "0xa9d0550f"]
          ],
          [
            "0x090e074bc934c4D8B84e168cb6597e87Da0C019b",
            ["0xc9851d0b", "0x3cc9517b"]
          ],
          [
            "0xF2c63815eBD0c4E048eF216C77E2c80aa4ecD59c",
            ["0x8bf6ef99", "0x9feb6731"]
          ],
          [
            "0x02063A0d7a222c16D5b63213262596B83b07150c",
            ["0xef55f6dd", "0xa342d3ff", "0xdcd5733b", "0xbcd733b3"]
          ],
          [
            "0xBeE13d99dD633fEAa2a0935f00CbC859F8305FA7",
            ["0x1fd8010c", "0x3a3f7332"]
          ],
          [
            "0x3C826D17B47DB69E1a9C1e32E10768d3709f1b9A",
            ["0x782621d8", "0x95726782"]
          ],
          [
            "0x87C10910DA7258E55dA2C5d43739fB68B12E6a4b",
            ["0xdecb09d7", "0xce8a97a5", "0x5bb5d448"]
          ],
          [
            "0xF609fdBA8f7A020975a7c82C82f6A1f526F9A8fC",
            ["0xaf62c7d6", "0xb4f37581"]
          ],
          [
            "0x7D1940fDfF0B37c137B105ce7967B3B86DB42648",
            ["0xc07386e6", "0xd35794fd", "0xbe1eace7", "0xed178619"]
          ],
          [
            "0x69cb467EfD8044ac9eDB88F363309ab1cbFA0A15",
            ["0xa516f0f3", "0x5c2ed36a"]
          ],
          [
            "0x2b7D2C78bd801Cc06DDCF91DeE2e8fAE22814f7e",
            ["0x878863a4", "0xd5bc7be1", "0x8f0af374", "0x4630a0d8"]
          ],
          [
            "0xd84d9A8Bf830496C4DEc917bC27D22E09E01cB8A",
            ["0x3961d1ed", "0xb3b63587", "0xa01fe784"]
          ],
          [
            "0x7D507e6E89C52aE610b8D0151c8cb24c24e43bdb",
            [
              "0x0680ded4",
              "0x082bc047",
              "0x03add8c3",
              "0x0b4cb5d8",
              "0x55c99cd8",
              "0x42afe79a",
              "0x8d03f456",
              "0xd40e64cc",
              "0xca360ae0"
            ]
          ],
          [
            "0x66861f292099cAF644F4A8b6091De49BEC5E8a15",
            ["0x9b6ee8e4", "0x55206216"]
          ],
          [
            "0xE7Bf43C55551B1036e796E7Fd3b125d1F9903e2E",
            [
              "0xfc852c5a",
              "0xbe8a84ac",
              "0xaef365ad",
              "0xa2ed5607",
              "0xdee4be1b",
              "0xf6848697",
              "0x0193979f",
              "0x0078afb6"
            ]
          ],
          [
            "0xC0c42d148241c5b5BB38e974d40Fc9087f7F9ecD",
            ["0xe40f2460", "0xa74ccb35"]
          ],
          [
            "0x6eF81a18E1E432C289DC0d1a670B78E8bbF9AA35",
            [
              "0xc18fa245",
              "0x54de26d9",
              "0xbd6d15ca",
              "0xfc1ebe3e",
              "0xe8bd0564",
              "0x26a93135",
              "0xad6607ff",
              "0x3c580fed",
              "0x4b06e05f",
              "0x33619a2d",
              "0xc5e04e30",
              "0x1223354c",
              "0x76e04bbc",
              "0xc5ae0fe6",
              "0x04c5aa34",
              "0x161be542",
              "0xcda5f324",
              "0x1a0b79bf",
              "0x7cccba6d",
              "0x4bd751a8",
              "0x6c225efe"
            ]
          ],
          [
            "0x6731C946747bA54c78e7a65d416Cde39E478ECeb",
            ["0xbab657d8", "0x8fab0663"]
          ],
          [
            "0xF70A1Ed85EcC454a562A4B69ee40CBc6a4eB0b64",
            ["0x05095ded", "0xb06c52da", "0x8406c079"]
          ],
          [
            "0x175E7799DA0CD40E641352EaB90D8e39e02a4Ca9",
            ["0xd6a4bc50", "0xa548ec5f", "0xd903b917", "0x0510f6bf"]
          ],
          [
            "0x7A5c119ec5dDbF9631cf40f6e5DB28f31d4332a0",
            [
              "0x7f99d7af",
              "0x103c5200",
              "0xc318eeda",
              "0xee0aa320",
              "0x070e81f1",
              "0xd53482cf",
              "0xf58ae2ce"
            ]
          ],
          [
            "0xF965f52046D7095d5080bD31459601F4Eb24f72D",
            [
              "0xf85a8104",
              "0x19aa6225",
              "0xdb5205b9",
              "0x55a6abd1",
              "0xad91858e",
              "0x13a11d30",
              "0x22dd4d61",
              "0x9aedbd51",
              "0xb095cb1f",
              "0xfec34c65",
              "0x30983cfd",
              "0x9c130c90",
              "0x5572ad26",
              "0xca6ed7aa",
              "0x994afa77",
              "0xd87687c5",
              "0x63ebdd16",
              "0x5123fca2",
              "0xe0e43439"
            ]
          ],
          [
            "0xab0E64fc4486d2A2e3F5Bdd232Ebd19E8cDebaD0",
            ["0x2541ec57", "0xad673d88"]
          ],
          [
            "0x711e80A9c1eB906d9Ae9d37E5432E6E7aCeEdA0B",
            ["0xd9caed12", "0x1458d7ad"]
          ],
          ["0x5292ef25cF25a1e28A8B44e6443088c332FEB48c", ["0xf3dcf536"]],
          [
            "0xF18A285f4e6f720Eb9b4e05df71f88b9552E6ADB",
            [
              "0x62fcecbf",
              "0x9c5647d9",
              "0xf536efc6",
              "0x70313c4b",
              "0xdf0359e2",
              "0x3abdecb4",
              "0x698fbb56",
              "0x90f21c80",
              "0xecda1c0e"
            ]
          ],
          [
            "0xe12b2488c71432F9a116E9ac244D3Ef4c2386d3a",
            ["0xb70fb9a5", "0x6e067161"]
          ],
          [
            "0x5C2C3F56e33F45389aa4e1DA4D3a807A532a910c",
            ["0x3f313808", "0xa8f66666"]
          ],
          [
            "0x14B4e2e2e3422DeC6F8bF3DcDc0BF3566F37197D",
            ["0xd4793716", "0x0701cc4c", "0xbc98b5dc", "0x9ca3d8bf"]
          ],
          [
            "0x31a9b1835864706Af10103b31Ea2b79bdb995F5F",
            [
              "0x5fd9ae2e",
              "0x2c57e884",
              "0x736eac0b",
              "0x4666fc80",
              "0x733214a3",
              "0xaf7060fd"
            ]
          ]
        ],
        "getOFTLayerZeroChainId": [],
        "INTERFACE_ID_IOFTCore": "0x14e4ceea",
        "INTERFACE_ID_IOFTV2": "0x1f7ecdf7",
        "INTERFACE_ID_IOFTWithFee": "0x6984a9e8",
        "mayan": "0xF3f04555f8FdA510bfC77820FD6eB8446f59E72d",
        "nativeBridge": "0x0000000000000000000000000000000000000000",
        "nativeExchangeAddress": "0x0000000000000000000000000000000000000000",
        "nativeHToken": "0x0000000000000000000000000000000000000000",
        "nativeL2CanonicalToken": "0x0000000000000000000000000000000000000000",
        "owner": "0x37347dD595C49212C5FC2D95EA10d1085896f51E",
        "relayer": "0x6a8b11bF29C0546991DEcD6E0Db8cC7Fda22bA97"
      },
      "errors": {
        "pendingOwner": "Multicall failed"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x123ed44f3B863a684437Ebf18F8a744c250Ee5cA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697125163,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
          "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x333f976915195ba9044fD0cd603cEcE936f6264e",
          "0xe2Eb229e88F56691e96bb98256707Bc62160FE73",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "",
      "address": "0x14f2b6ca0324cd2B013aD02a7D85541d215e2906",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1705482359
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x1580C7d4754f5671626e42f0372D56104B092CFA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715364503,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": [
          "4051577828743386545",
          "4949039107694359620",
          "11344663589394136015"
        ],
        "getToken": "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "KlasterGatewaySingleton",
      "address": "0x17483FC75528C53d21Ca7465484aee081BFf39Bd",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697552027,
      "values": {
        "feePercentage": 25,
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "owner": "0x6a60CC0C310e4F99b32C60Eee4180eb6DED02eaE",
        "relayerChainSelector": "5009297550715157269",
        "thisChainSelector": "5009297550715157269"
      }
    },
    {
      "name": "RToken",
      "address": "0x183015a9bA6fF60230fdEaDc3F43b3D788b13e21",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1684795691,
      "values": {
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0xb21b9658eeacae343a904b5933a044f3c5281cdfa652d2556da2684540bd77b3",
        "feeRecipient": "0xf41f9fC0B622Eb112445fD7b32fc5190d0c0D3f4",
        "flashMintFeePercentage": 1,
        "MAX_FLASH_MINT_FEE_PERCENTAGE": 500,
        "name": "R Stablecoin",
        "owner": "0xaB40A7e3cEF4AfB323cE23B6565012Ac7c76BFef",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "PERCENTAGE_BASE": 10000,
        "positionManager": "0x5F59b322eB3e16A0C78846195af1F588b77403FC",
        "symbol": "R",
        "totalSupply": "15962068371250691566915077"
      }
    },
    {
      "name": "OffRamp10",
      "address": "0x1C207dabc46902dF9028b27D6d301c3849b2D12c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688669831,
      "values": {
        "currentRateLimiterState": [
          "100000000000000000000000",
          1717577159,
          true,
          "100000000000000000000000",
          "167000000000000000000"
        ],
        "getDestinationTokens": ["0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5"],
        "getDynamicConfig": [
          28800,
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          1,
          30000
        ],
        "getStaticConfig": [
          "0x40c558575093eC1099CC21B020d9b8D13c74417F",
          "5009297550715157269",
          "6433500567565415381",
          "0x3D3817270db2b89e9F68bA27297fb4672082f942",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": ["0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5"],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "latestConfigDetails": [
          6,
          18631363,
          "0x00012ac211a1e7d0569092f2bdce66b4ddc2ae54d0b086c50017d80cd4182e30"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "ERC20MintablePauseableUpgradeable",
      "address": "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a",
        "admin": "0xf70B2473e7808eDAeA4A5Cea95996A9B1843D96C"
      },
      "implementations": ["0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a"],
      "sinceTimestamp": 1695179807,
      "values": {
        "cap": 0,
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "eip712Domain": [
          "0x0f",
          "PermitToken",
          "1.0",
          1,
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "implementation": "0x0000000000000000000000000000000000000000",
        "MINTER_ROLE": "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
        "name": "Sumerian ETH",
        "paused": false,
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "symbol": "suETH",
        "totalSupply": 0
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x1e28DD4b559a7fF546b1e84691129508b2C9C3D3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1707769379,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"
        ],
        "getToken": "0x04C154b66CB340F3Ae24111CC767e0184Ed00Cc6",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "UniswapV3Factory",
      "address": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1620156420,
      "values": {
        "owner": "0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "parameters": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          0,
          0
        ]
      }
    },
    {
      "name": "CommitStore11",
      "address": "0x20718EfbC25Dba60FD51c2c81362b83f7C411A6D",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688670119,
      "values": {
        "getDynamicConfig": ["0x020082A7a9c2510e1921116001152DEE4da81985"],
        "getExpectedNextSequenceNumber": 1732,
        "getLatestPriceEpochAndRound": 23231746,
        "getStaticConfig": [
          "5009297550715157269",
          "4051577828743386545",
          "0xAE0e486Fa6577188d586A8e4c12360FB82E2a386",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          3,
          18631711,
          "0x00017916887246a6efeddfc7333a0e01097122611ee79fbfb2ad4643340ba37a"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "typeAndVersion": "CommitStore 1.0.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x21377fe476Fb8587CbAFd47155093597Fa4df45E",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1706051735,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": ["0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"],
        "getOnRamps": ["0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"],
        "getToken": "0x911D86C72155c33993d594B0Ec7E6206B4C803da",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "TokenTransferProxy",
      "address": "0x216B4B4Ba9F3e719726886d34a177484278Bfcae",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1629290525,
      "values": {
        "owner": "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57"
      }
    },
    {
      "name": "HeaderStorage",
      "address": "0x22F1fc71A505c0b2bf4D5075801cc5E0ec84B09e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1699517855,
      "values": {
        "headers": [
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ]
      },
      "errors": {
        "headers": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "",
      "address": "0x241F93f26c94a78f49E32AE782587355BC46a0C5",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1703515643
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x2764910B500689BbC9DB16c7AD61c6DD32FDE73B",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715364491,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["15971525489660198786"],
        "getToken": "0x8Fe815417913a93Ea99049FC0718ee1647A2a07c",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x27E843260c71443b4CC8cB6bF226C3f77b9695AF",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": ["0x96E367914f7C1eca47C3511A409F6b1063B884CE"],
        "threshold": "2 of 4 (50%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1608243801,
      "values": {
        "domainSeparator": "0x3c98722f2fb7d6fb7d713ae2b3ee272a2160347e261d1eaafd4b8265142cbe68",
        "getChainId": 1,
        "getOwners": [
          "0x796e8415119b7b9b0B6D03d95e6466c4963a636E",
          "0x84A0fC18a43357D6224C4138D0E3979FC27bb5E3",
          "0x4c5EC12dFEF170Fda1aC46AC1b50f8FD34E794C7",
          "0x7B9a9e24055D45A05949ab45c5fA6781823dC09F"
        ],
        "getThreshold": 2,
        "nonce": 289,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "",
      "address": "0x2824Ac0Eab15744396E763A698b55F4Fe983a757",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700333591
    },
    {
      "name": "",
      "address": "0x284A4912a39dD710994347cB63853E297f45564f",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695628727
    },
    {
      "name": "CommitStore5",
      "address": "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701286199,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 1654,
        "getLatestPriceEpochAndRound": 362499,
        "getStaticConfig": [
          "5009297550715157269",
          "6433500567565415381",
          "0xD0701FcC7818c31935331B02Eb21e91eC71a1704",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          8,
          19992818,
          "0x00018c33fe48784c2decbe5572c681bdeb706c4b05c3e1f367dec59d0c4e3780"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "CommitStore14",
      "address": "0x2D1708ff2a15adbE313eA8C6035aA24d0FBA1c77",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693423211,
      "values": {
        "getDynamicConfig": ["0x020082A7a9c2510e1921116001152DEE4da81985"],
        "getExpectedNextSequenceNumber": 464,
        "getLatestPriceEpochAndRound": 23248129,
        "getStaticConfig": [
          "5009297550715157269",
          "15971525489660198786",
          "0xD44371bFDe87f2db3eA6Df242091351A06c2e181",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          5,
          18631610,
          "0x0001807b42eae8e4e1753e3bb109d7466eaba0204b3b724dda60faa9d96b39a9"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "typeAndVersion": "CommitStore 1.0.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x2dd317E7e36544C5222818F228d607c209517470",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697125139,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
          "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x333f976915195ba9044fD0cd603cEcE936f6264e",
          "0xe2Eb229e88F56691e96bb98256707Bc62160FE73",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "MissingOnez",
      "address": "0x2F23357ce83cb17C5B0F78CCD18330858BC3cA6f",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698365435,
      "values": {
        "baseURI": "https://cdn.madskullz.io/missingonez/metadata/",
        "CROSS_CHAIN_ROLE": "0x620d362b92b6ef580d4e86c5675d679fe08d31dff47b72f281959a4eecdd036a",
        "currentSupply": 333,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getApproved": [],
        "getPrice": [
          0,
          "50000000000000000",
          "98000000000000000",
          "145500000000000000",
          "192000000000000000"
        ],
        "isMintOpen": true,
        "MAX_BATCH_MINT": 10,
        "maxSupply": 333,
        "name": "Missing Onez",
        "owner": "0x00058e802800f23319E166Bc3Fa0003D5Ab6a055",
        "ownerOf": [],
        "revealedTokenIds": [true, true, true, true, true],
        "ROYALTIES_VALUE": 500,
        "royaltyRecipient": "0x00058e802800f23319E166Bc3Fa0003D5Ab6a055",
        "supplyLeft": 0,
        "symbol": "M1Z",
        "tokenByIndex": [130, 92, 231, 265, 279],
        "tokenURI": [],
        "totalSupply": 53,
        "unitPrice": "50000000000000000",
        "unrevealedPath": "ethereum_key.json"
      },
      "errors": {
        "getPrice": "Too many values. Update configuration to explore fully",
        "revealedTokenIds": "Too many values. Update configuration to explore fully",
        "tokenByIndex": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ManyChainMultiSig",
      "address": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695826667,
      "values": {
        "getConfig": [
          [
            ["0x162A8E51E69D72a4bA462220aE9A2E94e44d753F", 0, 0],
            ["0x1c6460cfe32916196f6977b5442b0F98A826D880", 1, 0],
            ["0x31e16F375531F8d77E027ff935e1114eD62D797b", 2, 0],
            ["0x41eAdbc688797a02bfaBE48472995833489ce69D", 3, 0],
            ["0x5A5A8C7E8448484Cf3458d7f426876E79c529f41", 4, 0],
            ["0x7052cB84079905400ea52B635cAb6a275fDA8823", 5, 0],
            ["0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514", 6, 0],
            ["0xAe735fd5e74887064DFf99C637f291caE5485A75", 7, 0],
            ["0xE062e7D123AC8dF480C56147f911144F55C10f88", 8, 0]
          ],
          [
            4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ],
          [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ]
        ],
        "getOpCount": 99,
        "getRoot": [
          "0x7115d7bc51913b1a222cea07fbeaf29cd80721c6c3e779a3feb3536e0168486f",
          1717507367
        ],
        "getRootMetadata": [
          1,
          "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
          89,
          99,
          false
        ],
        "MAX_NUM_SIGNERS": 200,
        "NUM_GROUPS": 32,
        "owner": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "LendingRewards",
      "address": "0x300648a601c584E6379fa0D6a31CbBFCcA6177e4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1686330755,
      "values": {
        "beginningOfMonth": [0, 0, 0, 0, 0],
        "monthlyRewards": [0, 0, 0, 0, 0],
        "rewardsPerShare": "127674606854629426284223420376",
        "token": "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA",
        "totalDistributed": "6847559407977149215",
        "totalRewards": "10901150390772437327",
        "totalSharesDeposited": "77833080605205013799757909",
        "totalStakedUsers": 3213
      },
      "errors": {
        "beginningOfMonth": "Too many values. Update configuration to explore fully",
        "monthlyRewards": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "CommitStore1",
      "address": "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701802727,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 730,
        "getLatestPriceEpochAndRound": 361475,
        "getStaticConfig": [
          "5009297550715157269",
          "5142893604156789321",
          "0x190bcE84CF2d500B878966F4Cf98a50d78f2675E",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          8,
          19992872,
          "0x0001a5fb364dc20180c6b3dd2e3ce85a349ddac175a17e46dc3cd325153736be"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "OnRamp12",
      "address": "0x333f976915195ba9044fD0cd603cEcE936f6264e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693422455,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getAllowList": [
          "0xAFa2c441a83bBCEDc2E8c5c6f66248aFD8b9af3d",
          "0x8EfcE1B976AaE2eB3B6283A5b4CC2019F8250362",
          "0xB66364b66ebf3D33e48945bc87C41f4607fBa792",
          "0x7A0a06735E41dc59F90228686f44bf2E13CC1724",
          "0x31F8F44196d57eA2bC9A4E6CAcbFcAF7868F55C6",
          "0x789d7f3e2eaA6de41133A7fB11d7390603645F31",
          "0x9fb2887182130095b952AB91AfDD6d094940B4b5",
          "0xF9F5bcd3a50653387ee0b9d60C1905854093e8Fb",
          "0xc9e03910DDDF689D3e309b42dbf4c581ED1e795D",
          "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F",
          "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
          "0x0779960d4DC3e594B40b531dB9496E4620ed6757",
          "0x411C71E1A08B5c3831caFE68a808F00b8ED03188",
          "0x17483FC75528C53d21Ca7465484aee081BFf39Bd",
          "0xc8BA6Be4A8F60889E6D1bdbb9A17d433a62dF3d3",
          "0xaFB2820316e7Bc5Ef78d295AB9b8Bb2257534576",
          "0x95b1fF7fc76b8293Ea57e342b969fdd23B5dAC01",
          "0x48d2Ae51E665298000A42f924E7Ad09914f21821",
          "0x7ace867b3a503C6C76834ac223993FBD8963BED2",
          "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB",
          "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
          "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61",
          "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
          "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5"
        ],
        "getAllowListEnabled": true,
        "getDynamicConfig": [
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          1,
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          30000,
          2000000
        ],
        "getExpectedNextSequenceNumber": 948,
        "getNopFeesJuels": 3,
        "getNops": [
          [
            ["0xfA3430d84324ABC9ac8AAf30B2D26260F5172ad0", 0],
            ["0x9D219125a0CE10241b4eC1280c2F880475f172f1", 8],
            ["0x55AB744a77f8b1daCa1B7D22d5112165Bcc77d4c", 9948],
            ["0x59eCf48345A221E0731E785ED79eD40d0A94E2A5", 0],
            ["0x9efa0A617C0552F1558c95993aA8b8A68b3e709C", 25],
            ["0xFdC770353dC0bFCE80a17Ab8a6a2E7d80590f1Ba", 0],
            ["0x7AF3C2b54eE2f170b8104222eB4EDf2511f5d9d0", 0],
            ["0x15918ff7f6C44592C81d999B442956B07D26CC44", 0],
            ["0x001E0d294383d5b4136476648aCc8D04a6461Ae3", 0],
            ["0x4564A9c6061f6f1F2Eadb954B1b3C241D2DC984e", 0],
            ["0xDF812B91D8bf6DF698BFD1D8047839479Ba63420", 0],
            ["0x14f94049397C3F1807c45B6f854Cb5F36bC4393B", 0],
            ["0xAB35418fB9f8B13E3e6857c36A0769b9F94a87EC", 0],
            ["0x0921E157b690c4F89F7C2a210cFd8bF3964F6776", 19],
            ["0x47044eE2F23001F8a03FB2f7d2ce6645aDA4D12A", 0],
            ["0xa06B89B08F038Aff4F81ce0A45c5aCb040477c3b", 0],
            ["0x3FB4600736d306Ee2A89EdF0356D4272fb095768", 0],
            ["0xBDB624CD1051F687f116bB0c642330B2aBdfcc06", 0],
            ["0xDA80050Ed4F50033949608208f79EE43Ab91dF55", 0],
            ["0x9cCbFD17FA284f36c2ff503546160B256d1CD3D1", 0],
            ["0xC51D3470693BC049809A1c515606124c7C75908d", 0],
            ["0x183A96629fF566e7AA8AfA38980Cd037EB40A59A", 0],
            ["0x111f1B41f702c20707686769a4b7f25c56C533B2", 0]
          ],
          10000
        ],
        "getStaticConfig": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "5009297550715157269",
          "4949039107694359620",
          200000,
          "20000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": [
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA"
        ],
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6173708040088247691",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOnRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "DODOApproveProxy",
      "address": "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1611652229,
      "values": {
        "_DODO_APPROVE_": "0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149",
        "_NEW_OWNER_": "0x0000000000000000000000000000000000000000",
        "_OWNER_": "0x95C4F5b83aA70810D4f142d58e5F7242Bd891CB0",
        "_PENDING_ADD_DODO_PROXY_": "0x0000000000000000000000000000000000000000",
        "_TIMELOCK_": 0
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x34fEf5DA92c59d6aC21d0A75ce90B351D0Fb6CE6",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "3 of 6 (50%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1666894139,
      "values": {
        "domainSeparator": "0x7b67d8d0d06790ac12693ee7a94d1620e26a0a6a7bced2f5dc24e55d18b2c748",
        "getChainId": 1,
        "getOwners": [
          "0x010dA5FF62B6e45f89FA7B2d8CEd5a8b5754eC1b",
          "0x037465bF6a4A8D7F552AE18046478C6A727178F3",
          "0x6dcAB4d155CFfa74E65056fdC94164732D611E85",
          "0x982F264ce97365864181df65dF4931C593A515ad",
          "0xC51Caf7ab90cf6b5cC03b81A37235054fA2d0000",
          "0xE1B019F6A0423d29EA9d8f6F5F385BF5010CCccE"
        ],
        "getThreshold": 3,
        "nonce": 69,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "FeeCollector",
      "address": "0x353a5303dD2a39aB59aEd09fb971D359b94658C7",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1666358327,
      "values": {
        "owner": "0x11F11121DF7256C40339393b0FB045321022ce44",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "CCIPeth",
      "address": "0x3596fB4e61dE7d5Cca41Ae5a3fFFcCdedE313a4e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697180003,
      "values": {
        "cozyPenguin": "0x63d48Ed3f50aBA950c17e37CA03356CCd6b6a280",
        "destinationChainSelector": "6433500567565415381",
        "emergencyPause": false,
        "gasLimit": 2000000,
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "maxAmountOfNfts": 25,
        "MIGRATION_DELAY_DAYS": 604800,
        "migrationAddress": "0x70378147cC3Fa41C4351140F2356d3db8c3da3F4",
        "migrationAllowedTimestamp": 1713488351,
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "sourceAddress": "0xD224b2b69CC45D5B85317D03729aC39aDb73b36B",
        "targetAddress": "0xD224b2b69CC45D5B85317D03729aC39aDb73b36B",
        "travelLock": true
      }
    },
    {
      "name": "OnRamp2",
      "address": "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701286259,
      "values": {
        "currentRateLimiterState": [
          "1000000000000000000000000",
          1717577159,
          true,
          "1000000000000000000000000",
          "277000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          0,
          16,
          0,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 1663,
        "getNopFeesJuels": "1013351581596261002",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7755387324761516006",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "4051577828743386545"],
        "tokenAddresses": [
          "0xd2a530170D71a9Cfe1651Fb468E2B98F7Ed7456b",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xa19f5264F7D7Be11c451C093D8f92592820Bea86",
          "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
          "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
          "0x0AA1e96D2a46Ec6beB2923dE1E61Addf5F5f1dce"
        ],
        "tokenPools": [
          "0x50f6631B377be52E132DF35a2F05eA54fda882ac",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0xc62c311FE64abf19CF33195e15c188Ca6d1AaD3e",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0xd1b3015ceFCAC84dB3EFCBB18FBdd50BA5aF49DE",
          "0x6dDF2F3f93688dfc9d37DF7078982cE8E6494DB2",
          "0x1580C7d4754f5671626e42f0372D56104B092CFA",
          "0xa17698199466E71bAFC31F226db341B7840701E7"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "GnosisSafe",
      "address": "0x37347dD595C49212C5FC2D95EA10d1085896f51E",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "3 of 5 (60%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1671012587,
      "values": {
        "domainSeparator": "0xf74470015dbfe92da3c13915c3e5425b9a04aa9250e0e60802a264a266e7a096",
        "getChainId": 1,
        "getOwners": [
          "0xb78FbE12d9C09d98ce7271Fa089c2fe437B7B4D5",
          "0x65f6F29D3eb871254d71A79CC4F74dB3AAF3b86e",
          "0x24767E3A1cb07ee500BA9A5621F2B608440Ca270",
          "0x81Dbb716aA13869323974A1766120D0854188e3e",
          "0x11F1022cA6AdEF6400e5677528a80d49a069C00c"
        ],
        "getThreshold": 3,
        "nonce": 64,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "SafeEnsoShortcuts",
      "address": "0x38147794FF247e5Fc179eDbAE6C37fff88f68C52",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1692914507
    },
    {
      "name": "BIFI",
      "address": "0x3960f6c882d11B797bd3f574D77E339516813B5A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694264915,
      "values": {
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x8c357bf3fbe023b032502543c0105cabefce5f2df8dad5adb02dbc16436d685e",
        "eip712Domain": [
          "0x0f",
          "Beefy",
          "1",
          1,
          "0x3960f6c882d11B797bd3f574D77E339516813B5A",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "name": "mooTest",
        "symbol": "mooTest",
        "totalSupply": "80000000000000000000000"
      }
    },
    {
      "name": "OffRamp1",
      "address": "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701803111,
      "values": {
        "commitStore": ["0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB"],
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB",
          "5009297550715157269",
          "5142893604156789321",
          "0x190bcE84CF2d500B878966F4Cf98a50d78f2675E",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19611168,
          "0x0001115f0d55fadf391c077d5d9bdc70ab474e483905389a638dce6740a52618"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "StakeManager",
      "address": "0x3Aee3e96c9E340cBe0fFFC5224Db9e97949f3899",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x73822D7814E10A2D0C964AE52e74f08390De957B",
        "admin": "0x6aAcff7ec8903c2C7883b1A6Af85e6e330999aa6"
      },
      "implementations": ["0x73822D7814E10A2D0C964AE52e74f08390De957B"],
      "sinceTimestamp": 1689815939,
      "values": {
        "admin": "0x003AaCE7E639624b4D15Cd923Da81b356AEe75D3",
        "currentEra": 3034,
        "delegationBalancer": "0x211BEd4bd65d4c01643377d95491B8c4B533EAAD",
        "eraOffset": 16845,
        "eraRate": [0, 0, 0, 0, 0],
        "eraSeconds": 86400,
        "erc20TokenAddress": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
        "getBondedPools": ["0x33e91fb7e5FeD3ba103FB4B0fd1e5cdB6E555361"],
        "getRate": "1174750266986720878",
        "latestEra": 3034,
        "MAX_ERA_SECONDS": 172800,
        "MAX_PROTOCOL_FEE_COMMISSION": "200000000000000000",
        "MAX_RATE_CHANGE_LIMIT": 1000000000000000,
        "MAX_UNBONDING_DURATION": 32,
        "MAX_UNSTAKE_FEE_COMMISSION": "10000000000000000",
        "minStakeAmount": 1000000000000,
        "nextUnstakeIndex": 30,
        "protocolFeeCommission": "100000000000000000",
        "rateChangeLimit": 500000000000000,
        "rTokenAddress": "0x3DBB00c9bE5A327E25CAf4f650844C5DbA81E34B",
        "totalProtocolFee": "5037183748463488315628",
        "totalRTokenSupply": "258405412296194058625115",
        "UNBOND_TIMES_LIMIT": 100,
        "unbondingDuration": 4,
        "unstakeAtIndex": [
          [
            2713,
            "0x33e91fb7e5FeD3ba103FB4B0fd1e5cdB6E555361",
            "0x1bfCC34DadaA1154bB5f6dC2b7923f3b5cC256f7",
            "565682088554000000"
          ],
          [
            2713,
            "0x33e91fb7e5FeD3ba103FB4B0fd1e5cdB6E555361",
            "0xBABf7e6b5bcE0BD749FD3C527374bEf8919cC7A9",
            "1131364177108000000"
          ],
          [
            2727,
            "0x33e91fb7e5FeD3ba103FB4B0fd1e5cdB6E555361",
            "0x1bfCC34DadaA1154bB5f6dC2b7923f3b5cC256f7",
            "11332039575625752"
          ],
          [
            2738,
            "0x33e91fb7e5FeD3ba103FB4B0fd1e5cdB6E555361",
            "0xcBF7CE87E25E8A3d08087a5f612D304B9C0708D2",
            "367782406684279991027161"
          ],
          [
            2745,
            "0x33e91fb7e5FeD3ba103FB4B0fd1e5cdB6E555361",
            "0x1bfCC34DadaA1154bB5f6dC2b7923f3b5cC256f7",
            "113569770794551529"
          ]
        ],
        "unstakeFeeCommission": 0
      },
      "errors": {
        "eraRate": "Too many values. Update configuration to explore fully",
        "unstakeAtIndex": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "XERC20",
      "address": "0x3B2faF664d6cCA5248CD7f44a6538A1fFdCcF7F0",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694264939,
      "values": {
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x3cab506a072b5eeb0f893ec2ad9be3fa5f899c90c5a40d20a7c77ae0b57d0ceb",
        "eip712Domain": [
          "0x0f",
          "xTest",
          "1",
          1,
          "0x3B2faF664d6cCA5248CD7f44a6538A1fFdCcF7F0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "FACTORY": "0xe9be4C876305aEF08D5B4D3f331d70eFaA04a98d",
        "lockbox": "0x90C30227f04A4d7Ff86Eab8CA56eC25DD5fa15D2",
        "name": "xTest",
        "owner": "0x161D61e30284A33Ab1ed227beDcac6014877B3DE",
        "symbol": "xTest",
        "totalSupply": 0
      }
    },
    {
      "name": "CommitStore12",
      "address": "0x3d3467e1036Ee25F6F4aa15e3Abf77443A23144C",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693423091,
      "values": {
        "getDynamicConfig": ["0x020082A7a9c2510e1921116001152DEE4da81985"],
        "getExpectedNextSequenceNumber": 661,
        "getLatestPriceEpochAndRound": 23236610,
        "getStaticConfig": [
          "5009297550715157269",
          "4949039107694359620",
          "0x98dd9E9b8AE458225119Ab5B8c947A9d1cd0B648",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          5,
          18631512,
          "0x0001d9ea41bf842b58c69efa7a3da49136a0a6c3b6ba5a2dea5ec141027c0d7f"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "typeAndVersion": "CommitStore 1.0.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "OnRamp4",
      "address": "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701286163,
      "values": {
        "currentRateLimiterState": [
          "1000000000000000000000000",
          1717577159,
          true,
          "1000000000000000000000000",
          "277000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          0,
          16,
          0,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 1307,
        "getNopFeesJuels": "2165303536507873973",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7330553933601448995",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "6433500567565415381"],
        "tokenAddresses": [
          "0xd2a530170D71a9Cfe1651Fb468E2B98F7Ed7456b",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
          "0xf2DbAaBd8F8E0993F11DE4CEd470Df1ED1a4491b"
        ],
        "tokenPools": [
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0xc62c311FE64abf19CF33195e15c188Ca6d1AaD3e",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x6dDF2F3f93688dfc9d37DF7078982cE8E6494DB2",
          "0xBF7cb652A2d5ed3BFc3832Ef8Af33Ffb0cDc0982"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "UniversalRouter",
      "address": "0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1682675111
    },
    {
      "name": "CommitStore10",
      "address": "0x40c558575093eC1099CC21B020d9b8D13c74417F",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688669819,
      "values": {
        "getDynamicConfig": ["0x020082A7a9c2510e1921116001152DEE4da81985"],
        "getExpectedNextSequenceNumber": 2944,
        "getLatestPriceEpochAndRound": 23284993,
        "getStaticConfig": [
          "5009297550715157269",
          "6433500567565415381",
          "0x3D3817270db2b89e9F68bA27297fb4672082f942",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          3,
          18631411,
          "0x00011183f9c1ff66759dad792628e17ee75e0ec8d0f745c96f5de053d0e907fe"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "typeAndVersion": "CommitStore 1.0.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "BasicTokenSender",
      "address": "0x411C71E1A08B5c3831caFE68a808F00b8ED03188",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695969443,
      "values": {
        "owner": "0xdc5fbe85b0b7d6c9980275f25b333e1F34538BF1"
      }
    },
    {
      "name": "ARMProxy",
      "address": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688661563,
      "values": {
        "getARM": "0x8B63b3DE93431C0f756A493644d128134291fA1b",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "ARMProxy 1.0.0"
      }
    },
    {
      "name": "OffRamp9",
      "address": "0x41627a90f2c6238f2BADAB72D5aB050B857fdAb5",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688669531,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getDestinationTokens": ["0xb2F30A7C980f052f02563fb518dcc39e6bf38175"],
        "getDynamicConfig": [
          28800,
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          1,
          30000
        ],
        "getStaticConfig": [
          "0x8bEFCa744c6f2b567b1863dcF055C593afdC11A0",
          "5009297550715157269",
          "3734403246176062136",
          "0xad1b1F2A6DD55627e3893B771A00Cd43F69DcE35",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": ["0xb2F30A7C980f052f02563fb518dcc39e6bf38175"],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "latestConfigDetails": [
          6,
          18631660,
          "0x0001163edbee4ac1c05c3deab7fed618f3d7bba670cc956957716b93e42c25ac"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "BridgeETH",
      "address": "0x426c7fCd001A4EDD242A2bdcc7a2027de892500c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1696948331,
      "values": {
        "gas": 200000,
        "getLastReceivedMessageDetails": [
          "0xffd950bbac9017b3546acb74ab9ceee1778850625044f11ce525a8e53231031d",
          ""
        ],
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "LINK": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
        "maxCountTransfer": 1,
        "NFT": "0x69187eEC9b2593fAD2D646eD8815107bf618302e",
        "owner": "0x1F5C65a8bBE108c67AF559863F4C6B57E17aAA02",
        "priceTransfer": 0,
        "senderPolygon": "0x59cb21A5565082CAE08A66f4230b2d4CDfC154dd"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x44622f4604353E4815A4212d5a3dD137A1C7FF14",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715364551,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["11344663589394136015", "4949039107694359620"],
        "getToken": "0xa7a0B3Fe94121E366D774d60D075F6386F750884",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "RBACTimelock",
      "address": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1689097535,
      "values": {
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "BYPASSER_ROLE": "0xa1b2b8005de234c4b8ce8cd0be058239056e0d54f6097825b5117101469d5a8d",
        "CANCELLER_ROLE": "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
        "getBlockedFunctionSelectorAt": [],
        "getBlockedFunctionSelectorCount": 0,
        "getMinDelay": 86400,
        "PROPOSER_ROLE": "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1"
      }
    },
    {
      "name": "",
      "address": "0x45196c7C4bdFC0d2327d5fb034C27D1acCBa0606",
      "unverified": true,
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xF45b1a1C0464339337bE075eAafab6869c2a8c76",
        "admin": "0x8ebD04b2fbA00418Be00329146837dcE51F02c00"
      },
      "implementations": ["0xF45b1a1C0464339337bE075eAafab6869c2a8c76"],
      "sinceTimestamp": 1701594503
    },
    {
      "name": "TokenProxy",
      "address": "0x48d2Ae51E665298000A42f924E7Ad09914f21821",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694683091,
      "values": {
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "getToken": "0x183015a9bA6fF60230fdEaDc3F43b3D788b13e21",
        "owner": "0x603d50BAd151Da8becf405E51a8c4Abc8bA1c95E"
      }
    },
    {
      "name": "CommitStore4",
      "address": "0x4af4B497c998007eF83ad130318eB2b925a79dc8",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701285563,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 1179,
        "getLatestPriceEpochAndRound": 357122,
        "getStaticConfig": [
          "5009297550715157269",
          "3734403246176062136",
          "0x55183Db1d2aE0b63e4c92A64bEF2CBfc2032B127",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          8,
          19992870,
          "0x0001e913beffb46fc6e567324b90592e032e4890b9f8368fa9227350b3d5803a"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "ServiceFeeCollector",
      "address": "0x4b0B89b90fF83247aEa12469CeA9A6222e09d54c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1683882635,
      "values": {
        "owner": "0x11F11121DF7256C40339393b0FB045321022ce44",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x4C3aEe10334461F1f33c0A8843424de3F8fb7709",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715888579,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["11344663589394136015", "15971525489660198786"],
        "getToken": "0x01aaC2b594F7bdBeC740F0F1AA22910EbB4B74Ab",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "",
      "address": "0x4C96324a3cb342aa51fA6ABa0ac4C838Df427464",
      "unverified": true,
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x4d92A613352E013943c4270295B72aF518A49ef5",
        "admin": "0xba30Add178fb849aad4715354Bc66506aA327E36"
      },
      "implementations": ["0x4d92A613352E013943c4270295B72aF518A49ef5"],
      "sinceTimestamp": 1694489171
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x50f6631B377be52E132DF35a2F05eA54fda882ac",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698777515,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
          "0xBDd822f3bC2EAB6818CfA3053107831D4E93fE72",
          "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x0f27c8532457b66D6037141DEB0ed479Dad04B3c",
          "0x333f976915195ba9044fD0cd603cEcE936f6264e",
          "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"
        ],
        "getToken": "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "DODOFeeRouteProxy",
      "address": "0x50f9bDe1c76bba997a5d6e7FEFff695ec8536194",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1670996747,
      "values": {
        "_DODO_APPROVE_PROXY_": "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619",
        "_WETH_": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "owner": "0x95C4F5b83aA70810D4f142d58e5F7242Bd891CB0",
        "routeFeeRate": 0,
        "routeFeeReceiver": "0x1271CAba4bf23f8Fb31F97448605d65EE302CA51",
        "totalWeight": 100
      }
    },
    {
      "name": "LinkToken",
      "address": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1505597189,
      "values": {
        "decimals": 18,
        "name": "ChainLink Token",
        "symbol": "LINK",
        "totalSupply": "1000000000000000000000000000"
      }
    },
    {
      "name": "CCIP Block Hash Sender",
      "address": "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700220359,
      "values": {
        "future_owner": "0x0000000000000000000000000000000000000000",
        "gas_limit": 500000,
        "owner": "0x745748bcFd8F9c2De519a71D789be8A63dd7d66C",
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
      }
    },
    {
      "name": "",
      "address": "0x51D071006d4b76a343544e7f20866bb790291467",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1703515691
    },
    {
      "name": "TokenWrapper",
      "address": "0x5215E9fd223BC909083fbdB2860213873046e45d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1710089111,
      "values": {
        "wrappedToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "Executor",
      "address": "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694513963,
      "values": {
        "owner": "0xdAbad81aF85554E9ae636395611C58F7eC1aAEc5"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x532C1f04E76C2AA6e146dfFa59a0cb0f68DAF21D",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "2 of 3 (67%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1686307079,
      "values": {
        "domainSeparator": "0x9dd345ac5d8b5b6ee6ec8f2b820c34058556b443be8305025fd97ec0b0fcbdb1",
        "getChainId": 1,
        "getOwners": [
          "0x47C7c921ADf8b09e24EfAc584E2064e34CBb1b6F",
          "0xBBb0bB7EC7d45d1B22e6eC83ad329621fa468375",
          "0xEd610492a7270493D8AE4a80A2bE02252eF9fA11"
        ],
        "getThreshold": 2,
        "nonce": 75,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x55562A08104837FF55E3A66c49A1419b6311c1E6",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698777455,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x333f976915195ba9044fD0cd603cEcE936f6264e",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"
        ],
        "getToken": "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x55AB744a77f8b1daCa1B7D22d5112165Bcc77d4c",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "2 of 5 (40%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1690999631,
      "values": {
        "domainSeparator": "0x946bbc95dd39f843cdbbc3a79f111af0ba55cb01c99523892d76cf1ef6059ddb",
        "getChainId": 1,
        "getOwners": [
          "0x7Ab003a9c7Cd3016e90a03A4A608975a6FAC40B4",
          "0x5A5A8C7E8448484Cf3458d7f426876E79c529f41",
          "0x31e16F375531F8d77E027ff935e1114eD62D797b",
          "0x9cf154D032feBE9463fb0Ec7b3319ad579E5beB9",
          "0x162A8E51E69D72a4bA462220aE9A2E94e44d753F"
        ],
        "getThreshold": 2,
        "nonce": 0,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "OffRamp5",
      "address": "0x569940e02D4425eac61A7601632eC00d69f75c17",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701286211,
      "values": {
        "commitStore": ["0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE"],
        "currentRateLimiterState": [
          "1000000000000000000000000",
          1717577159,
          true,
          "1000000000000000000000000",
          "277000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE",
          "5009297550715157269",
          "6433500567565415381",
          "0xD0701FcC7818c31935331B02Eb21e91eC71a1704",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19864097,
          "0x0001f5ec01ea1084fb3150e9c0ae4a075107aee34612efc5c190a12232e94b0e"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x57D3bb46aF4A9b210FAE046796013090D428475F",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697125187,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
          "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x333f976915195ba9044fD0cd603cEcE936f6264e",
          "0xe2Eb229e88F56691e96bb98256707Bc62160FE73",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0xCA160D11087E03fd398d40f561cd4768825f4958",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x5e6aE74195111dA086dDF658A5110A687e5DBCdc",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1702042043,
      "values": {
        "owner": "0xc2B8Abc5249397DB5d159b4E3c311c2fAf4091f2"
      }
    },
    {
      "name": "ApeRouter",
      "address": "0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1651134982,
      "values": {
        "factory": "0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B",
        "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "OffRamp12",
      "address": "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693423103,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getDestinationTokens": [
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA"
        ],
        "getDynamicConfig": [
          28800,
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          1,
          30000
        ],
        "getStaticConfig": [
          "0x3d3467e1036Ee25F6F4aa15e3Abf77443A23144C",
          "5009297550715157269",
          "4949039107694359620",
          "0x98dd9E9b8AE458225119Ab5B8c947A9d1cd0B648",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": [
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xfb9Fed8cB962548A11fE7F6F282949061395c7F5",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x27f485b62C4A7E635F561A87560Adf5090239E93",
          "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "latestConfigDetails": [
          7,
          18631511,
          "0x00013012981266e68ac1ae195190da0d78fa446f550b00f806d3b497b2c15cd3"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "MetaAggregationRouterV2",
      "address": "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1673237483,
      "values": {
        "owner": "0x2475039bF2ECDCe2EE4C82954e64bE9674f43546",
        "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1711027487,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": [
          "3734403246176062136",
          "4949039107694359620",
          "11344663589394136015"
        ],
        "getToken": "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "OpenOceanExchange",
      "address": "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xe9a9B6CE6ae2141Ed7393a61E6CaaDC481780f77",
        "admin": "0xC979fEC5bf053D0d52caDA4CFe1C25737731502D"
      },
      "implementations": ["0xe9a9B6CE6ae2141Ed7393a61E6CaaDC481780f77"],
      "sinceTimestamp": 1633943808,
      "values": {
        "owner": "0x9986EE0C3Eea15DCf8642b56179652F9589B95dB",
        "paused": false
      }
    },
    {
      "name": "CozyPenguin",
      "address": "0x63d48Ed3f50aBA950c17e37CA03356CCd6b6a280",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1644127214,
      "values": {
        "getApproved": [],
        "imageBaseUri": "ar://veLMprs2c--Rl6nXCeakR5FG9K8y4WXt62iLxayrflo",
        "linkAddress": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
        "locked": true,
        "maxPhase": 4,
        "maxTokens": 10000,
        "maxTokensPerUser": 5,
        "merkleRoot": "0x231b429e465eca3ba6f8ce18400f78c1cab0b9f9ba89864168892a405e43dce1",
        "metadataBaseUri": "ar://FaZDPjTzMSvTZ9V0s2D8mLUoSsJg2eyD4Pg0LzdT3Yg/",
        "name": "Cozy Penguin",
        "owner": "0x6c89A1CbBaEf4bE6eE3Ae29C7920AD21f9b4d24E",
        "ownerOf": [],
        "phase": 4,
        "randomized": true,
        "randomOffset": 5571,
        "revealed": true,
        "symbol": "CZPG",
        "tokenByIndex": [1, 2, 3, 4, 5],
        "tokenURI": [],
        "totalSupply": 10000,
        "totalTokenSupply": 10000,
        "unknownTokenUri": "ar://5C018_sTWaMz7ralztnFcs_9GB1pJEVQ9Ga6CP6KEG4",
        "vrfCoordinatorAddress": "0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",
        "vrfFee": "2000000000000000000",
        "vrfKeyHash": "0xaa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af445"
      },
      "errors": {
        "tokenByIndex": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "EtherSenderReceiver",
      "address": "0x66598216D8E4d9AFE0F06d525B335b762229842f",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712581007,
      "values": {
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "typeAndVersion": "EtherSenderReceiver 1.5.0"
      },
      "derivedName": "EtherSenderReceiver"
    },
    {
      "name": "",
      "address": "0x66F806aB43AB8a9bdd4Db54899179aC5A3EB6F51",
      "unverified": true,
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xfF1727f97E828A2A5F8ea0d83366276620Cbeca2",
        "admin": "0x0000000000000000000000000000000000000000"
      },
      "implementations": ["0xfF1727f97E828A2A5F8ea0d83366276620Cbeca2"],
      "sinceTimestamp": 1695575387
    },
    {
      "name": "",
      "address": "0x6777f6ebEC76D796CB3999A69cd5980bD86cCfe5",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1691164691
    },
    {
      "name": "HiddenBeauty721A",
      "address": "0x69187eEC9b2593fAD2D646eD8815107bf618302e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694413523,
      "values": {
        "blockDate": 0,
        "blockedTransfer": false,
        "getApproved": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "groupDiscont": [0, 0, 0, 0, 0],
        "maxMintOneAddress": 10000,
        "name": "Hidden Beauty",
        "owner": "0x675E37925FF460C05bD70B24290187C6f3972CC4",
        "ownerOf": [
          "0x675E37925FF460C05bD70B24290187C6f3972CC4",
          "0x675E37925FF460C05bD70B24290187C6f3972CC4",
          "0x1F5C65a8bBE108c67AF559863F4C6B57E17aAA02",
          "0xD216559aE67Aaf4a6c4e1F5a0Ec112eD85b9661f",
          "0x53296e7FC6234513097CadDA65cE384567350B28"
        ],
        "price": "15000000000000000",
        "stepMaxMint": 10000,
        "symbol": "Hidden Beauty",
        "tokenURI": [
          "https://hiddenbeautynft.com/meta/0",
          "https://hiddenbeautynft.com/meta/1",
          "https://hiddenbeautynft.com/meta/2",
          "https://hiddenbeautynft.com/meta/3",
          "https://hiddenbeautynft.com/meta/4"
        ],
        "totalSupply": 8
      },
      "errors": {
        "getApproved": "Too many values. Update configuration to explore fully",
        "groupDiscont": "Too many values. Update configuration to explore fully",
        "ownerOf": "Too many values. Update configuration to explore fully",
        "tokenURI": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1709738675,
      "values": {
        "canAcceptLiquidity": true,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000001",
        "getRebalancer": "0xc07556a0Bd177F8de4D077f449C2653A072F3798",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["3734403246176062136", "4949039107694359620"],
        "getToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "RelayerCelerIM",
      "address": "0x6a8b11bF29C0546991DEcD6E0Db8cC7Fda22bA97",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1690368347,
      "values": {
        "cBridgeMessageBus": "0x4066D196A423b2b3B8B054f4F40efB47a74E200C",
        "diamondAddress": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
        "owner": "0x156CeBba59DEB2cB23742F70dCb0a11cC775591F",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "CrossChainController",
      "address": "0x6aaD18a3cafB04b9a70761943796eCC179A1D933",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xbDfA4BdD705e02A2Da357ddd2e543ec654529940",
        "admin": "0xD3cF979e676265e4f6379749DECe4708B9A22476"
      },
      "implementations": ["0xbDfA4BdD705e02A2Da357ddd2e543ec654529940"],
      "sinceTimestamp": 1689252215,
      "values": {
        "getAllowedBridgeAdaptersByChain": [[], [], [], [], []],
        "getBridgeAdaptersByChain": [
          [],
          [
            [
              "0x118DFD5418890c0332042ab05173Db4A2C1d283c",
              "0x118DFD5418890c0332042ab05173Db4A2C1d283c"
            ]
          ],
          [],
          [],
          []
        ],
        "getConfigurationByChain": [
          [0, 0],
          [0, 0],
          [0, 0],
          [0, 0],
          [0, 0]
        ],
        "getCurrentEnvelopeNonce": 5,
        "getCurrentTransactionNonce": 5,
        "getSupportedChains": [137, 43114],
        "guardian": "0xEAF6183bAb3eFD3bF856Ac5C058431C8592394d6",
        "owner": "0xEAF6183bAb3eFD3bF856Ac5C058431C8592394d6",
        "whoCanRescue": "0xEAF6183bAb3eFD3bF856Ac5C058431C8592394d6"
      },
      "errors": {
        "getAllowedBridgeAdaptersByChain": "Too many values. Update configuration to explore fully",
        "getBridgeAdaptersByChain": "Too many values. Update configuration to explore fully",
        "getConfigurationByChain": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x6ce8b799002BbECc7df94c18BF150B3b0E4A28F4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713201839,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["15971525489660198786", "4949039107694359620"],
        "getToken": "0x72e364F2ABdC788b7E918bc238B21f109Cd634D7",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "SameChainAdapter",
      "address": "0x6cfbd2aA4691fc18B9C209bDd43DC3943C228FCf",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1710239351,
      "values": {
        "adapterName": "SameChain adapter",
        "getTrustedRemoteByChainId": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "infraToNativeChainId": [0, 1, 0, 0, 0],
        "nativeToInfraChainId": [0, 1, 0, 0, 0]
      },
      "errors": {
        "getTrustedRemoteByChainId": "Too many values. Update configuration to explore fully",
        "infraToNativeChainId": "Too many values. Update configuration to explore fully",
        "nativeToInfraChainId": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x6dDF2F3f93688dfc9d37DF7078982cE8E6494DB2",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1714419443,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4051577828743386545", "6433500567565415381"],
        "getToken": "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "LendingPool",
      "address": "0x6F2064837D82358AFF96E2dFe6AA8953123A0249",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1709898527,
      "values": {
        "borrowAPRMax": 1500,
        "borrowAPRMin": 200,
        "borrowInitFee": 300,
        "calculateBorrowAPR": 1489,
        "custodian": "0xC1dE6455D1Ce538aeF2a7e6Ea7304e4128813d74",
        "enabled": true,
        "getAllWhitelistedPools": [
          "0x874f903003dec4639e22cbeBff6e8295c80842a7",
          "0xCBCdF9626bC03E24f779434178A73a0B4bad62eD",
          "0x0c30062368eEfB96bF3AdE1218E685306b8E89Fa",
          "0xa6Cc3C2531FdaA6Ae1A3CA84c2855806728693e8",
          "0x290A6a7460B308ee3F19023D2D00dE604bcf5B42",
          "0x44C95bf226A6A1385beacED2bb3328D6aFb044a3",
          "0x11950d141EcB863F01007AdD7D1A342041227b58",
          "0x510100D5143e011Db24E2aa38abE85d73D5B2177",
          "0xAD9eF19e289dcbC9AB27b83D2dF53CDEFF60f02D",
          "0x2F62f2B4c5fcd7570a709DeC05D68EA19c82A9ec"
        ],
        "getLTVX96": [],
        "liquidateDefaultCapital": false,
        "liquidateSlippage": 1000,
        "liquidationLTV": 9500,
        "loanNFT": "0xB9ef94C9541fBB6bDe4a1a3d79C44909e268E23e",
        "loans": [
          [
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            1711276247,
            "0xAA1A0Be5c2c411FE7e88a5eb692678889394e3b2",
            1716271739,
            "0xCBCdF9626bC03E24f779434178A73a0B4bad62eD",
            32500000,
            "1933877987237442922"
          ],
          [
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            1713968591,
            "0xF90C525067be6689f3d6Eb5496eB2Ab027472c18",
            1713968591,
            "0x874f903003dec4639e22cbeBff6e8295c80842a7",
            "1299999970802002974889058",
            "3000000000000000000"
          ],
          [
            1715820563,
            "0x5709b1419182AA55D30cC0EE8055455bEcB43dFD",
            1715820563,
            "0x874f903003dec4639e22cbeBff6e8295c80842a7",
            "869164597370000000000000",
            "1000000000000000000"
          ]
        ],
        "maxLiquidationsPerUpkeep": 10,
        "maxLTVOverall": 5000,
        "owner": "0x47C7c921ADf8b09e24EfAc584E2064e34CBb1b6F",
        "shouldLiquidateLoan": [false, false, false, false, false]
      },
      "errors": {
        "loans": "Too many values. Update configuration to explore fully",
        "shouldLiquidateLoan": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x6Ff6BF3BF8af2e419DDC7BF038aFa5EB92b6cD7e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1711027655,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["11344663589394136015"],
        "getToken": "0xE46a5E19B19711332e33F33c2DB3eA143e86Bc10",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "CozyPenguinStorage",
      "address": "0x70378147cC3Fa41C4351140F2356d3db8c3da3F4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712881055,
      "values": {
        "confirmedOperatorAddress": "0xEe5435ED882eE996C4DDB40a3AAE63CfD58B87C8",
        "cozyPenguin": "0x63d48Ed3f50aBA950c17e37CA03356CCd6b6a280",
        "owner": "0xDfE4B320547F3C30F9a123a66F96A516FC323Bf9"
      }
    },
    {
      "name": "CrossChainPortal",
      "address": "0x70996FeE3bc1BA38e36Ea356aee5d855161e6e52",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1692049787,
      "values": {
        "getActionQueueState": [0, 0, 0, 1692049787],
        "getGovernor": "0x125C7562f84be4CfE1e6f4DBc1f1A1ddC4480914",
        "getGovernorChainSelector": "4051577828743386545",
        "getGovTransferReqTimestamp": 0,
        "getIntervalCommunicationLost": 2592000,
        "getIntervalGuardianGoneRogue": 1209600,
        "getPendingGovernor": "0x0000000000000000000000000000000000000000",
        "getPendingGovernorChainSelector": 0,
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "TRANSFER_GOVERNANCE_DELAY": 259200
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x73aEB5ECA03Ad587B8Fdcc2B61f9fb4D2e3D90c1",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1706129963,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": ["0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"],
        "getOnRamps": ["0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"],
        "getToken": "0xA95C5ebB86E0dE73B4fB8c47A45B792CFeA28C23",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "CommitStore",
      "address": "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1717183043,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 1,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": [
          "5009297550715157269",
          "7264351850409363825",
          "0xbD5F9C193a7fEF5D578C55Ddfe4d08d6BCc15648",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          2,
          20021002,
          "0x000158ce8fc4a0f994dfd6e0a25592e775701df72df104097ecbf9fefb87160e"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      }
    },
    {
      "name": "BaseV2VoterInterface",
      "address": "0x777034fEF3CCBed74536Ea1002faec9620deAe0A",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x1855c918eE5371FB4a46bac68aD49315d671a930",
        "admin": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A"
      },
      "implementations": ["0x1855c918eE5371FB4a46bac68aD49315d671a930"],
      "sinceTimestamp": 1672480595,
      "values": {
        "_ve": "0x77730ed992D286c53F3A0838232c3957dAeaaF73",
        "activePeriod": 1717027200,
        "bribeFactory": "0x77717604518940F735b62926194B985DA83170Ef",
        "factory": "0x777de5Fe8117cAAA7B44f396E93a401Cf5c9D4d6",
        "feeDistFactory": "0x7773922B14d16B0616804f27ce24566cbd2b53D3",
        "gaugeFactory": "0x77779759974f2353835F1A8c17B88f6F1f3e4362",
        "generalFees": "0x7771125a6E1553EA8845dfDF525e51DCA79585b2",
        "governanceAddress": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A",
        "governanceIsKilled": false,
        "implementationAddress": "0x1855c918eE5371FB4a46bac68aD49315d671a930",
        "interfaceAddress": "0x1855c918eE5371FB4a46bac68aD49315d671a930",
        "length": 44,
        "listing_fee": "70713257248402777590939",
        "listingFeeRatio": 50,
        "logicAddress": "0xc14CAB30312e5E093aEF611057B9F95F3A469D89",
        "minter": "0x77780aA5e04e0EB5004767352748399d9D6eAee0",
        "periodTotalWeight": [0, 0, 0, 0, 0],
        "pools": [
          "0xcD452c162dA7761f08F656B8e5eDe3A385981378",
          "0xc7ed724499946C8d12F57330c0d2D25Af219AdF8",
          "0xed82dE5C52b2CdeB3FeEd2a4a7f87d60300E19b5",
          "0x2e959b8596a8E59eEeABa8E8061F473bBD8Da8E8",
          "0x63A65a174Cc725824188940255aD41c371F28F28"
        ],
        "poolVote": [[], [], [], [], []],
        "rewards": [0, 0, 0, 0, 0],
        "rewardsDistributor": "0x6207801cF58eC8Ff24D59dBb8fc25E4A20989aE7",
        "totalWeight": "809759483211704904885595",
        "trainingWheels": true,
        "usedWeights": [0, 0, 0, 0, 0]
      },
      "errors": {
        "periodTotalWeight": "Too many values. Update configuration to explore fully",
        "pools": "Too many values. Update configuration to explore fully",
        "poolVote": "Too many values. Update configuration to explore fully",
        "rewards": "Too many values. Update configuration to explore fully",
        "usedWeights": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BaseV2TokenInterface",
      "address": "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x04ec553dC65312C85Cd914927B5f45112F8FE37C",
        "admin": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A"
      },
      "implementations": ["0x04ec553dC65312C85Cd914927B5f45112F8FE37C"],
      "sinceTimestamp": 1672480595,
      "values": {
        "decimals": 18,
        "governanceAddress": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A",
        "governanceIsKilled": false,
        "implementationAddress": "0x04ec553dC65312C85Cd914927B5f45112F8FE37C",
        "interfaceAddress": "0x04ec553dC65312C85Cd914927B5f45112F8FE37C",
        "logicAddress": "0x9eb8a8E7d925631b3828C591F2FCeEa5AB0B5f23",
        "minter": "0x77780aA5e04e0EB5004767352748399d9D6eAee0",
        "name": "Solidly",
        "symbol": "SOLID",
        "totalSupply": "84637057758473510202902734"
      }
    },
    {
      "name": "VeV2Interface",
      "address": "0x77730ed992D286c53F3A0838232c3957dAeaaF73",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x306Dd1d3D2637c13CC59686889C0B9550C13c8bB",
        "admin": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A"
      },
      "implementations": ["0x306Dd1d3D2637c13CC59686889C0B9550C13c8bB"],
      "sinceTimestamp": 1672480595,
      "values": {
        "attachments": [0, 0, 0, 0, 0],
        "balanceOfNFT": [
          0,
          "120351243157566369802056",
          0,
          "120258278262959531959",
          "6027190648135962114286"
        ],
        "block_number": 20024520,
        "decimals": 18,
        "epoch": 6348,
        "get_last_user_slope": [
          0, 1495172037582216, 0, 1494017097199, 74878220497246
        ],
        "getApproved": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "getDelegate": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "governanceAddress": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A",
        "governanceIsKilled": false,
        "implementationAddress": "0x306Dd1d3D2637c13CC59686889C0B9550C13c8bB",
        "interfaceAddress": "0x306Dd1d3D2637c13CC59686889C0B9550C13c8bB",
        "locked": [
          [0, 0],
          ["188090250052582716049685", 1798070400],
          [0, 0],
          ["187944960400332174595", 1798070400],
          ["9419560333400762772841", 1798070400]
        ],
        "locked__end": [0, 1798070400, 0, 1798070400, 1798070400],
        "logicAddress": "0x6153A7B45C8BE4Fd8Ae804d9a638b9d9ec44B9fB",
        "mergedInto": [0, 0, 1302, 0, 0],
        "name": "veSOLID",
        "ownerOf": [
          "0x0000000000000000000000000000000000000000",
          "0xa955512Ed84424f790eEa39473bBE06536d51f24",
          "0x0000000000000000000000000000000000000000",
          "0x6f3064d973C08Dd9c88D43080549F474E5827d71",
          "0x2aeCdA6691c1BC138Dba240Cae2e9Ec7b106fC0F"
        ],
        "ownership_change": [0, 16305163, 18901134, 16305258, 16305267],
        "point_history": [
          [0, 0, 1672480595, 16303991],
          [
            "63111647368116308747186744",
            "502522346855505368",
            1672480667,
            16303997
          ],
          [
            "63104048830943426905315744",
            "502522343675814688",
            1672495787,
            16305249
          ],
          [
            "63104049230231853380447971",
            "502522346855505367",
            1672495787,
            16305249
          ],
          [
            "63103807347360950684556840",
            "502520852838408168",
            1672495895,
            16305258
          ]
        ],
        "slope_changes": [0, 0, 0, 0, 0],
        "supply": "75179049070143307219405410",
        "symbol": "veSOLID",
        "token": "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
        "tokenURI": [],
        "totalSupply": "70494406308792954684714839",
        "totalSupplyAt": [],
        "totalSupplyAtT": [],
        "user_point_epoch": [0, 317, 3, 1, 6],
        "version": "1.0.0",
        "voted": [false, false, false, false, false],
        "voter": "0x777034fEF3CCBed74536Ea1002faec9620deAe0A"
      },
      "errors": {
        "attachments": "Too many values. Update configuration to explore fully",
        "balanceOfNFT": "Too many values. Update configuration to explore fully",
        "get_last_user_slope": "Too many values. Update configuration to explore fully",
        "getApproved": "Too many values. Update configuration to explore fully",
        "getDelegate": "Too many values. Update configuration to explore fully",
        "locked": "Too many values. Update configuration to explore fully",
        "locked__end": "Too many values. Update configuration to explore fully",
        "mergedInto": "Too many values. Update configuration to explore fully",
        "ownerOf": "Too many values. Update configuration to explore fully",
        "ownership_change": "Too many values. Update configuration to explore fully",
        "point_history": "Too many values. Update configuration to explore fully",
        "slope_changes": "Too many values. Update configuration to explore fully",
        "user_point_epoch": "Too many values. Update configuration to explore fully",
        "voted": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "VeDistV2Interface",
      "address": "0x77760C63940eC0454b977A31ED65D6440Ec5Fb92",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xE3dd9Ff9af27e69d1C4CeCcecf9D2B2896048a7e",
        "admin": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A"
      },
      "implementations": ["0xE3dd9Ff9af27e69d1C4CeCcecf9D2B2896048a7e"],
      "sinceTimestamp": 1672480595,
      "values": {
        "claimable": [
          0,
          "10264653772445458210520",
          "19721582436960270512101",
          "9580659713662276320",
          "374057495216421647774"
        ],
        "depositor": "0x77780aA5e04e0EB5004767352748399d9D6eAee0",
        "governanceAddress": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A",
        "governanceIsKilled": false,
        "implementationAddress": "0xE3dd9Ff9af27e69d1C4CeCcecf9D2B2896048a7e",
        "interfaceAddress": "0xE3dd9Ff9af27e69d1C4CeCcecf9D2B2896048a7e",
        "last_token_time": 1717027271,
        "logicAddress": "0xA2Fb2a895BCB8D8e7B8Fdf5060061f99736c8818",
        "start_time": 1672272000,
        "time_cursor": 1717632000,
        "time_cursor_of": [0, 0, 0, 0, 1678320000],
        "timestamp": 1717027200,
        "token": "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
        "token_last_balance": "594286363230670393554707",
        "tokens_per_week": [0, 0, 0, 0, 0],
        "user_epoch_of": [0, 0, 0, 0, 0],
        "ve_supply": [0, 0, 0, 0, 0],
        "voting_escrow": "0x77730ed992D286c53F3A0838232c3957dAeaaF73"
      },
      "errors": {
        "claimable": "Too many values. Update configuration to explore fully",
        "time_cursor_of": "Too many values. Update configuration to explore fully",
        "tokens_per_week": "Too many values. Update configuration to explore fully",
        "user_epoch_of": "Too many values. Update configuration to explore fully",
        "ve_supply": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BaseV2MinterInterface",
      "address": "0x77780aA5e04e0EB5004767352748399d9D6eAee0",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xB600C9be12C2487140d603C63506a462a6feaC17",
        "admin": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A"
      },
      "implementations": ["0xB600C9be12C2487140d603C63506a462a6feaC17"],
      "sinceTimestamp": 1672480595,
      "values": {
        "_token": "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
        "_ve": "0x77730ed992D286c53F3A0838232c3957dAeaaF73",
        "_ve_dist": "0x77760C63940eC0454b977A31ED65D6440Ec5Fb92",
        "_voter": "0x777034fEF3CCBed74536Ea1002faec9620deAe0A",
        "a": 3519858543427703,
        "active_period": 1717027200,
        "b": 4801414565690,
        "bDecayRate": "990000000000000000",
        "calculate_emission": "54149147355673680424734",
        "calculate_growth": [0, 0, 1, 2, 3],
        "circulating_emission": "54149147355673680424734",
        "circulating_supply": "14142651449680555518187895",
        "governanceAddress": "0x9006550fAC2fe75903f9a7457E0CcF996DAd396A",
        "governanceIsKilled": false,
        "humpFactor": [0, 0, 0, 0, 0],
        "implementationAddress": "0xB600C9be12C2487140d603C63506a462a6feaC17",
        "interfaceAddress": "0xB600C9be12C2487140d603C63506a462a6feaC17",
        "logicAddress": "0x54D712cFacaeAb1Be6b8D3Fb7548d6AC346C3c5e",
        "targetSupply": "100000000000000000000000000",
        "week": 604800,
        "weekly": "54427440093108150786300",
        "weekly_emission": "54149147355673680424734"
      },
      "errors": {
        "calculate_growth": "Too many values. Update configuration to explore fully",
        "humpFactor": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "SolidBridgeInterface",
      "address": "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x798Ad75154A15464BBE8E6C1ff07f390b1012b2c",
        "admin": "0x444a69854C78913c60560EB628Ef633a1D659728"
      },
      "implementations": ["0x798Ad75154A15464BBE8E6C1ff07f390b1012b2c"],
      "sinceTimestamp": 1703507507,
      "values": {
        "base": "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
        "bridgedBase": "1059285209554585197475392",
        "chainMap": [
          ["", 0, 0],
          ["", 0, 0],
          ["", 0, 0],
          ["", 0, 0],
          ["", 0, 0]
        ],
        "chains": [250, 42161, 10, 8453],
        "crosschainDistributor": "0x777c1b853799f9c02c7A6395bA2340dD15794b3A",
        "governanceAddress": "0x444a69854C78913c60560EB628Ef633a1D659728",
        "governanceIsKilled": false,
        "implementationAddress": "0x798Ad75154A15464BBE8E6C1ff07f390b1012b2c",
        "interfaceAddress": "0x798Ad75154A15464BBE8E6C1ff07f390b1012b2c",
        "isPaused": [false, false, false, false, false],
        "logicAddress": "0x51D071006d4b76a343544e7f20866bb790291467",
        "minter": "0x77780aA5e04e0EB5004767352748399d9D6eAee0",
        "nonce": 205,
        "paused": false,
        "pausedChains": 0,
        "solidBridgeMap": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "supportedChains": [250, 42161, 10, 8453]
      },
      "errors": {
        "chainMap": "Too many values. Update configuration to explore fully",
        "isPaused": "Too many values. Update configuration to explore fully",
        "solidBridgeMap": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "NftBridgeInterface",
      "address": "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xbda1d6131Cccc28A3e925E4C3BbA5C5A2D7a1f28",
        "admin": "0x444a69854C78913c60560EB628Ef633a1D659728"
      },
      "implementations": ["0xbda1d6131Cccc28A3e925E4C3BbA5C5A2D7a1f28"],
      "sinceTimestamp": 1703507507,
      "values": {
        "chainBalances": [0, 0, 0, 0, 0],
        "chainMap": [
          ["", 0, 0],
          ["", 0, 0],
          ["", 0, 0],
          ["", 0, 0],
          ["", 0, 0]
        ],
        "chains": [250, 42161, 10, 8453],
        "childChainVe": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "crosschainDistributor": ["0x777c1b853799f9c02c7A6395bA2340dD15794b3A"],
        "governanceAddress": "0x444a69854C78913c60560EB628Ef633a1D659728",
        "governanceIsKilled": false,
        "implementationAddress": "0xbda1d6131Cccc28A3e925E4C3BbA5C5A2D7a1f28",
        "interfaceAddress": "0xbda1d6131Cccc28A3e925E4C3BbA5C5A2D7a1f28",
        "isPaused": [false, false, false, false, false],
        "lockInfo": [1842220800, 124643641, true],
        "logicAddress": "0x241F93f26c94a78f49E32AE782587355BC46a0C5",
        "masterTokenId": 1302,
        "ownerOf": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x77eeaf07C050a690f9B3C2E8e7642Cc3CBEcEEb4",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "paused": false,
        "supportedChains": [250, 42161, 10, 8453],
        "totalBridgedBase": "26707143377225478758152854",
        "totalLocked": "26930088230889545386791559",
        "totalShares": "26430265221156406365057132",
        "ve": "0x77730ed992D286c53F3A0838232c3957dAeaaF73",
        "ve_dist": "0x77760C63940eC0454b977A31ED65D6440Ec5Fb92",
        "voteDelay": 601200,
        "voter": "0x777034fEF3CCBed74536Ea1002faec9620deAe0A",
        "voteWeights": [10000]
      },
      "errors": {
        "chainBalances": "Too many values. Update configuration to explore fully",
        "chainMap": "Too many values. Update configuration to explore fully",
        "childChainVe": "Too many values. Update configuration to explore fully",
        "isPaused": "Too many values. Update configuration to explore fully",
        "ownerOf": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "CrosschainDistributorInterface",
      "address": "0x777c1b853799f9c02c7A6395bA2340dD15794b3A",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xfC39fdcB21Cb78b7D476207670584313EA0dfe2c",
        "admin": "0x444a69854C78913c60560EB628Ef633a1D659728"
      },
      "implementations": ["0xfC39fdcB21Cb78b7D476207670584313EA0dfe2c"],
      "sinceTimestamp": 1703507507,
      "values": {
        "accruedEmissions": [0, 0, 0, 0, 0],
        "base": "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
        "governanceAddress": "0x444a69854C78913c60560EB628Ef633a1D659728",
        "governanceIsKilled": false,
        "implementationAddress": "0xfC39fdcB21Cb78b7D476207670584313EA0dfe2c",
        "interfaceAddress": "0xfC39fdcB21Cb78b7D476207670584313EA0dfe2c",
        "logicAddress": "0xA8f1201d873c47E652E0D6C253D6D88505331f0F",
        "minter": "0x77780aA5e04e0EB5004767352748399d9D6eAee0",
        "nftBridge": "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5",
        "periodEmissions": [0, 0, 0, 0, 0],
        "solidBridge": "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
        "voter": "0x777034fEF3CCBed74536Ea1002faec9620deAe0A"
      },
      "errors": {
        "accruedEmissions": "Too many values. Update configuration to explore fully",
        "periodEmissions": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x78196436aF11b948c7036424B1ceA711fAdAd288",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1709671463,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": ["0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5"],
        "getOnRamps": ["0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4"],
        "getToken": "0x2624Bd0094f474713AC9c634b37A5ebef4e0b1FE",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.2.0"
      }
    },
    {
      "name": "OmniSenderV4",
      "address": "0x789d7f3e2eaA6de41133A7fB11d7390603645F31",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x031D3F8Aa6D7dBC3d97050845eb776b17464E5E6",
        "admin": "0x85db5038d66e7fB5AB656215D21fE64D5EEe1Ed6"
      },
      "implementations": ["0x031D3F8Aa6D7dBC3d97050845eb776b17464E5E6"],
      "sinceTimestamp": 1692630071,
      "values": {
        "CONTRACT_ADMIN": "0xcc3e15b6937a2f69a6f5452031b5fbab5ab7de91ec2efae0db33241e870e6121",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EVM_EXTRA_ARGS_V1_TAG": "0x97a657c9"
      }
    },
    {
      "name": "CommitStore13",
      "address": "0x7986C9892389854cAAbAC785ff18123B0070a5Fd",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693422755,
      "values": {
        "getDynamicConfig": ["0x020082A7a9c2510e1921116001152DEE4da81985"],
        "getExpectedNextSequenceNumber": 539,
        "getLatestPriceEpochAndRound": 23254531,
        "getStaticConfig": [
          "5009297550715157269",
          "11344663589394136015",
          "0x1f17D464652f5Bd74a03446FeA20590CCfB3332D",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          7,
          18631461,
          "0x0001a352f30559d634af956cc934347582bea16ab38bfb9661cac8c7bcd8059d"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "typeAndVersion": "CommitStore 1.0.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "UniswapV2Router02",
      "address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1591388241,
      "values": {
        "factory": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
        "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "CcipSender",
      "address": "0x7ace867b3a503C6C76834ac223993FBD8963BED2",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xb72F019a1B2AC43eA377d8a154e0b575439F9155",
        "admin": "0x9aDa42ed163bB45ea2FF11c06c59cF27d27E6cba"
      },
      "implementations": ["0xb72F019a1B2AC43eA377d8a154e0b575439F9155"],
      "sinceTimestamp": 1698101507,
      "values": {
        "admin": "0x27E843260c71443b4CC8cB6bF226C3f77b9695AF",
        "DFX": "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
        "getAdmin": "0x9aDa42ed163bB45ea2FF11c06c59cF27d27E6cba",
        "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D"
      }
    },
    {
      "name": "OffRamp3",
      "address": "0x7Afe7088aff57173565F4b034167643AA8b9171c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701457427,
      "values": {
        "commitStore": ["0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75"],
        "currentRateLimiterState": [
          "5000000000000000000000000",
          1717577159,
          true,
          "5000000000000000000000000",
          "1389000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75",
          "5009297550715157269",
          "11344663589394136015",
          "0x0Bf40b034872D0b364f3DCec04C7434a4Da1C8d9",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19864115,
          "0x00016c527abd568b60ba375f0f53a5d45c115706b7f4d031b23592f88eff4e54"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "ActionExecutor",
      "address": "0x7b2E3FC7510D1A51b3bef735F985446589219354",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1678878191,
      "values": {
        "callerGuardMode": 1,
        "fullListedCallerGuardContractList": [
          "0xC670Ae8b51a508d7328202e94501b1068C3fe953"
        ],
        "fullManagerList": ["0x0d954A23a3c32aea407dF052C29E14434a4BB9aa"],
        "listedCallerGuardContractCount": 1,
        "listedCallerGuardContractList": [
          "0xC670Ae8b51a508d7328202e94501b1068C3fe953"
        ],
        "managerCount": 1,
        "owner": "0xda3111E42Ba048a9Be555f0C08d363F26B2A375a",
        "paused": false,
        "registry": "0xF19EA8e63256992a823262C71568b0bb27cE146f",
        "SYSTEM_VERSION_ID": "64276665108388658174230283029000281090856552654675654641351991970535913918410",
        "variableBalanceRecords": "0xbFc3b856b9BCC792875E79Fc8FFcc09028AAD406"
      }
    },
    {
      "name": "Router",
      "address": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700593571,
      "values": {
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getWrappedNative": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "MAX_RET_BYTES": 132,
        "offRamps": [
          ["3734403246176062136", "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7"],
          ["4051577828743386545", "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395"],
          ["4949039107694359620", "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"],
          ["6433500567565415381", "0x569940e02D4425eac61A7601632eC00d69f75c17"],
          [
            "11344663589394136015",
            "0x7Afe7088aff57173565F4b034167643AA8b9171c"
          ],
          [
            "15971525489660198786",
            "0xdf85c8381954694E74abD07488f452b4c2Cddfb3"
          ],
          ["5142893604156789321", "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5"],
          ["465200170687744372", "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4"],
          ["1346049177634351622", "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46"],
          ["7264351850409363825", "0xE8af3b68eDfFf65Ce48648009982380701f09B92"]
        ],
        "onRamps": {
          "3734403246176062136": "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
          "4051577828743386545": "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
          "4949039107694359620": "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "6433500567565415381": "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630",
          "11344663589394136015": "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
          "15971525489660198786": "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7",
          "5142893604156789321": "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4",
          "465200170687744372": "0xF538dA6c673A30338269655f4e019B71ba58CFd4",
          "1346049177634351622": "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa"
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "Router 1.2.0"
      },
      "derivedName": "Router"
    },
    {
      "name": "EnsoShortcutRouter",
      "address": "0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700158115,
      "values": {
        "enso": "0x7d585B0e27BBb3D981b7757115EC11F47c476994"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x8272dbBA30f14900b22b4bfC8DB4E88B02bA413a",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713201383,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["15971525489660198786", "4949039107694359620"],
        "getToken": "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0x8291a8E8dCF429e2FA7d032bF3E583ee959F3B06",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1708552763,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"
        ],
        "getToken": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x8300e89e82A840176eb250EcDA0A7dBDb4a6B12D",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715888555,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4949039107694359620"],
        "getToken": "0x1Cbc4BF664907669CfAB86a3b1aCC3EC8867a25F",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "CommitStore",
      "address": "0x831097033C88c82a7F1897b168Aa88cC44540C8f",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715889587,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 6,
        "getLatestPriceEpochAndRound": 361985,
        "getStaticConfig": [
          "5009297550715157269",
          "1346049177634351622",
          "0x27C96A8a2f70a8408aD6c620717a3bDaA54bb10b",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          5,
          19992835,
          "0x000179263a4a130df5e4be4d20e7eb032024c3eb8e72d99093e09d089598c58a"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      }
    },
    {
      "name": "HyperbolicProtocol",
      "address": "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1686330755,
      "values": {
        "calculateTaxFromAmount": [0, 0, 0, 0, 0],
        "decimals": 18,
        "factory": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
        "launchTime": 1686572627,
        "lendingPool": "0x6F2064837D82358AFF96E2dFe6AA8953123A0249",
        "lendingRewards": "0x300648a601c584E6379fa0D6a31CbBFCcA6177e4",
        "lpPosManager": "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
        "lpTax": 2500,
        "maxTax": 400,
        "minTax": 0,
        "name": "Hyperbolic Protocol",
        "owner": "0x532C1f04E76C2AA6e146dfFa59a0cb0f68DAF21D",
        "poolBalToMarketCapRatio": [
          "3496528325168950031",
          "407675425791054942596"
        ],
        "poolToMarketCapTarget": 10000,
        "rewardsLocker": "0x02FFdaCeb369b54255b6f20d640C5829F029061F",
        "swapAtAmount": "50000000000000000000000",
        "swapEnabled": false,
        "swapRouter": "0xE592427A0AEce92De3Edee1F18E0157C05861564",
        "symbol": "HYPE",
        "taxesEnabled": false,
        "taxesOnBuys": true,
        "taxesOnSells": false,
        "taxesOnTransfers": false,
        "totalSupply": "88654455950402246534848341",
        "twapUtils": "0xBf1858b24243Ecbcf7d940f458e36CB7401c2366",
        "WETH9": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "errors": {
        "calculateTaxFromAmount": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x85db5038d66e7fB5AB656215D21fE64D5EEe1Ed6",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1692630059,
      "values": {
        "owner": "0x753092e1C4D41e881A85D445267d7FEcA38cEd44"
      }
    },
    {
      "name": "OnRamp1",
      "address": "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701285455,
      "values": {
        "currentRateLimiterState": [
          "5000000000000000000000000",
          1717577159,
          true,
          "5000000000000000000000000",
          "1389000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          33596,
          16,
          6840,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 780,
        "getNopFeesJuels": "593675744498469445",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "4745226274803959190",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "3734403246176062136"],
        "tokenAddresses": [
          "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0x04C154b66CB340F3Ae24111CC767e0184Ed00Cc6",
          "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          "0xB60acD2057067DC9ed8c083f5aa227a244044fD6"
        ],
        "tokenPools": [
          "0x057152DB365B47851B0A0bd431644b8eE21fE1b4",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0x1e28DD4b559a7fF546b1e84691129508b2C9C3D3",
          "0x8291a8E8dCF429e2FA7d032bF3E583ee959F3B06",
          "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A",
          "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
          "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "CommitStore3",
      "address": "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701457415,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 1451,
        "getLatestPriceEpochAndRound": 358145,
        "getStaticConfig": [
          "5009297550715157269",
          "11344663589394136015",
          "0x0Bf40b034872D0b364f3DCec04C7434a4Da1C8d9",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          8,
          19992834,
          "0x0001e5962ef720d1edb8a8e5cc3e267a8a6479748b6709f835e93bfe8fb28d41"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "DFXToken",
      "address": "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1610615371,
      "values": {
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x5526f708a94cc75e371018126755c21938b15dcfdf938f9df34840c5605a13e0",
        "name": "DFX Token",
        "owner": "0x27E843260c71443b4CC8cB6bF226C3f77b9695AF",
        "symbol": "DFX",
        "totalSupply": "100000000000000000000000000"
      }
    },
    {
      "name": "ServiceFeeCollector",
      "address": "0x894b3e1e30Be0727eb138d2cceb0A99d2Fc4C55D",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1676726531,
      "values": {
        "owner": "0x08647cc950813966142A416D40C382e2c5DB73bB",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "ARM",
      "address": "0x8B63b3DE93431C0f756A493644d128134291fA1b",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688661551,
      "values": {
        "getCurseProgress": [[], [], [], 0, false],
        "isCursed": false,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "ARM 1.0.0"
      },
      "derivedName": "ARM"
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712691803,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": [
          "11344663589394136015",
          "15971525489660198786",
          "4051577828743386545",
          "4949039107694359620",
          "6433500567565415381"
        ],
        "getToken": "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "CommitStore9",
      "address": "0x8bEFCa744c6f2b567b1863dcF055C593afdC11A0",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688669519,
      "values": {
        "getDynamicConfig": ["0x020082A7a9c2510e1921116001152DEE4da81985"],
        "getExpectedNextSequenceNumber": 2874,
        "getLatestPriceEpochAndRound": 23314177,
        "getStaticConfig": [
          "5009297550715157269",
          "3734403246176062136",
          "0xad1b1F2A6DD55627e3893B771A00Cd43F69DcE35",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          3,
          18631661,
          "0x0001413711c5eea50db3618441f033ebf77d7a745ddeaa74338e65f0a30b4325"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "typeAndVersion": "CommitStore 1.0.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "ERC20MintablePauseableUpgradeable",
      "address": "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a",
        "admin": "0xf70B2473e7808eDAeA4A5Cea95996A9B1843D96C"
      },
      "implementations": ["0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a"],
      "sinceTimestamp": 1695179651,
      "values": {
        "cap": 0,
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "eip712Domain": [
          "0x0f",
          "PermitToken",
          "1.0",
          1,
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "implementation": "0x0000000000000000000000000000000000000000",
        "MINTER_ROLE": "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
        "name": "Sumerian USD",
        "paused": false,
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "symbol": "suUSD",
        "totalSupply": 0
      }
    },
    {
      "name": "PriceRegistry",
      "address": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700593583,
      "values": {
        "getFeeTokens": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
        ],
        "getPriceUpdaters": [
          "0x4af4B497c998007eF83ad130318eB2b925a79dc8",
          "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE",
          "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76",
          "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75",
          "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749",
          "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04",
          "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB",
          "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC",
          "0x831097033C88c82a7F1897b168Aa88cC44540C8f",
          "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e"
        ],
        "getStalenessThreshold": 90000,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "PriceRegistry 1.2.0"
      }
    },
    {
      "name": "CommitStore6",
      "address": "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287747,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 2265,
        "getLatestPriceEpochAndRound": 357123,
        "getStaticConfig": [
          "5009297550715157269",
          "15971525489660198786",
          "0xDEA286dc0E01Cb4755650A6CF8d1076b454eA1cb",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          8,
          19992869,
          "0x000173258584964bd15f9876bea21f3bfc961c025ad5b3e4356ae918393e3874"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "XERC20Lockbox",
      "address": "0x90C30227f04A4d7Ff86Eab8CA56eC25DD5fa15D2",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694264951,
      "values": {
        "ERC20": "0x3960f6c882d11B797bd3f574D77E339516813B5A",
        "IS_NATIVE": false,
        "XERC20": "0x3B2faF664d6cCA5248CD7f44a6538A1fFdCcF7F0"
      }
    },
    {
      "name": "OnRamp5",
      "address": "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287003,
      "values": {
        "currentRateLimiterState": [
          "5000000000000000000000000",
          1717577159,
          true,
          "5000000000000000000000000",
          "1389000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          0,
          16,
          0,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 1558,
        "getNopFeesJuels": "1785910107234168729",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "9288050172940952666",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "11344663589394136015"],
        "tokenAddresses": [
          "0xE46a5E19B19711332e33F33c2DB3eA143e86Bc10",
          "0x1a2EB478FA07125C9935A77b3C03a82470801E30",
          "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
          "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
          "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
          "0xa7a0B3Fe94121E366D774d60D075F6386F750884",
          "0x60b9C41d99FE3Eb64Ecc1344baD31D87f1bceD6D",
          "0x01aaC2b594F7bdBeC740F0F1AA22910EbB4B74Ab"
        ],
        "tokenPools": [
          "0xa008534BF96b61d9D33aD64aAD463bc6D300cd91",
          "0xc43c01026128Aa758A65D12dB6a72CE4DD778dF2",
          "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
          "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
          "0x6Ff6BF3BF8af2e419DDC7BF038aFa5EB92b6cD7e",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x1580C7d4754f5671626e42f0372D56104B092CFA",
          "0x44622f4604353E4815A4212d5a3dD137A1C7FF14",
          "0x06f9817a91595E1B595F789Fb91529e8651da9B8",
          "0x4C3aEe10334461F1f33c0A8843424de3F8fb7709"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "AffinePass",
      "address": "0x9244d2cf73861Ee7aA79Ffe90fe4eDF925482795",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698072479,
      "values": {
        "baseURI": "https://affine-pass.s3.amazonaws.com/pass/",
        "getApproved": [],
        "hasRemainingSupply": true,
        "MAX_MINTABLE_SUPPLY": 2012,
        "MAX_PUBLIC_MINT": 1,
        "MAX_RESERVE_TOKENS": 988,
        "MAX_SUPPLY": 3000,
        "MAX_WHITELIST_MINT": 1,
        "merkleRoot": "0xcd3bd15b8472a61a124018ae11d3cf7eabba15bc592e41f57496e43abad9165e",
        "mintedReserveTokens": 0,
        "name": "Affine Pass",
        "owner": "0xdc956B7135AA7a99F8080e54dEf4148f8e54bCa4",
        "ownerOf": [],
        "saleIsActive": false,
        "symbol": "APASS",
        "tokenByIndex": [941, 1172, 520, 422, 374],
        "tokenURI": [],
        "totalSupply": 15,
        "whitelistSaleIsActive": false
      },
      "errors": {
        "tokenByIndex": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "OnRamp3",
      "address": "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287339,
      "values": {
        "currentRateLimiterState": [
          "5000000000000000000000000",
          1717577159,
          true,
          "5000000000000000000000000",
          "1389000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          35648,
          16,
          6500,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 2366,
        "getNopFeesJuels": "2331934606229215941",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "3444715092116813839",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "4949039107694359620"],
        "tokenAddresses": [
          "0x72e364F2ABdC788b7E918bc238B21f109Cd634D7",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0xA95C5ebB86E0dE73B4fB8c47A45B792CFeA28C23",
          "0x911D86C72155c33993d594B0Ec7E6206B4C803da",
          "0x98C6616F1CC0D3E938A16200830DD55663dd7DD3",
          "0x04C154b66CB340F3Ae24111CC767e0184Ed00Cc6",
          "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
          "0xDcEe70654261AF21C44c093C300eD3Bb97b78192",
          "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          "0x32bd822d615A3658A68b6fDD30c2fcb2C996D678",
          "0x49446A0874197839D15395B908328a74ccc96Bc0",
          "0x8a053350ca5F9352a16deD26ab333e2D251DAd7c",
          "0xB60acD2057067DC9ed8c083f5aa227a244044fD6",
          "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
          "0x38C2a4a7330b22788374B8Ff70BBa513C8D848cA",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
          "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
          "0xa7a0B3Fe94121E366D774d60D075F6386F750884",
          "0x60b9C41d99FE3Eb64Ecc1344baD31D87f1bceD6D",
          "0xf2DbAaBd8F8E0993F11DE4CEd470Df1ED1a4491b",
          "0x1Cbc4BF664907669CfAB86a3b1aCC3EC8867a25F",
          "0x482dF7483a52496F4C65AB499966dfcdf4DDFDbc"
        ],
        "tokenPools": [
          "0x57D3bb46aF4A9b210FAE046796013090D428475F",
          "0xcd196D3905AfA0eCB4e0e62C2D7d6c52f9C73526",
          "0x2dd317E7e36544C5222818F228d607c209517470",
          "0x123ed44f3B863a684437Ebf18F8a744c250Ee5cA",
          "0x50f6631B377be52E132DF35a2F05eA54fda882ac",
          "0x55562A08104837FF55E3A66c49A1419b6311c1E6",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0x73aEB5ECA03Ad587B8Fdcc2B61f9fb4D2e3D90c1",
          "0x21377fe476Fb8587CbAFd47155093597Fa4df45E",
          "0xeaE89E53B8317CaB04165F5323285252D5669B73",
          "0x1e28DD4b559a7fF546b1e84691129508b2C9C3D3",
          "0xc43c01026128Aa758A65D12dB6a72CE4DD778dF2",
          "0xdCa0A2341ed5438E06B9982243808A76B9ADD6d0",
          "0x8291a8E8dCF429e2FA7d032bF3E583ee959F3B06",
          "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A",
          "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
          "0x047204D42d93a6471F7c9Ec94292B4B00E8e0786",
          "0xE2F0dad85D504aa046b9F704a426fD6C5493e366",
          "0xa370CEcd451ecf15c2A01ec47762E967dF7574DA",
          "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA",
          "0x8272dbBA30f14900b22b4bfC8DB4E88B02bA413a",
          "0xb854536206EB6C1013b1642b576196E5EF19D7BA",
          "0x6ce8b799002BbECc7df94c18BF150B3b0E4A28F4",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
          "0x1580C7d4754f5671626e42f0372D56104B092CFA",
          "0x44622f4604353E4815A4212d5a3dD137A1C7FF14",
          "0x06f9817a91595E1B595F789Fb91529e8651da9B8",
          "0xBF7cb652A2d5ed3BFc3832Ef8Af33Ffb0cDc0982",
          "0x8300e89e82A840176eb250EcDA0A7dBDb4a6B12D",
          "0x0DAFed8dAF42040dB2c6227ca2AEB14D9C8B2602"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "BETS",
      "address": "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1690387679,
      "values": {
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0xc7323a98024bf97b68f742ae16c901c86aac9670cf2456ef266a5963c04663d9",
        "eip712Domain": [
          "0x0f",
          "BetSwirl v2",
          "1",
          1,
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "MAX_SUPPLY": "7777777777000000000000000000",
        "MINTER_ROLE": "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
        "name": "BetSwirl v2",
        "symbol": "BETS",
        "totalSupply": "2560404381863915449432886135"
      }
    },
    {
      "name": "UniswapV2Router02",
      "address": "0x9501165EF2962e5C0612D6C5A4b39d606b27E22f",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1690887167,
      "values": {
        "factory": "0x28500192Ec2Bd53f20cc8056F44C72E3873d84A8",
        "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "RETHToken",
      "address": "0x9559Aaa82d9649C7A7b220E7c461d2E74c9a3593",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1611803201,
      "values": {
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getBurnEnabled": false,
        "getCollateralRate": 0,
        "getEthValue": [0, 1, 2, 3, 4],
        "getExchangeRate": "1089570178805479155",
        "getRethValue": [0, 0, 1, 2, 3],
        "getTotalCollateral": "22138742516926438",
        "MINTER_ROLE": "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
        "name": "StaFi",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "symbol": "rETH",
        "totalSupply": "2484613132331746794289",
        "version": 1
      },
      "errors": {
        "getEthValue": "Too many values. Update configuration to explore fully",
        "getRethValue": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1709217539,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x7Afe7088aff57173565F4b034167643AA8b9171c",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.2.0"
      }
    },
    {
      "name": "CommitStore8",
      "address": "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287831,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 1660,
        "getLatestPriceEpochAndRound": 355329,
        "getStaticConfig": [
          "5009297550715157269",
          "4949039107694359620",
          "0xCe11020D56e5FDbfE46D9FC3021641FfbBB5AdEE",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          8,
          19992851,
          "0x00016059e453c2ca94d0c2fad2be55e6548b0a0ebb25096b1962a18f9c93a594"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "FeeCollector",
      "address": "0x9ca271A532392230EAe919Fb5460aEa9D9718424",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1687178459,
      "values": {
        "owner": "0x08647cc950813966142A416D40C382e2c5DB73bB",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x9d6A86FaCdCF24859a38e6b9A2Ef87610a4fC157",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "modules": [],
        "threshold": "2 of 7 (29%)"
      },
      "implementations": ["0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"],
      "sinceTimestamp": 1628846120,
      "values": {
        "domainSeparator": "0xcc307fcd89d65afa20c174878b31c9730ea331a93aa9eed58663b206d0de61a7",
        "getModules": [],
        "getOwners": [
          "0x7Ab003a9c7Cd3016e90a03A4A608975a6FAC40B4",
          "0xF0A9c943b6229450c9e95a05b66811c2905F0EA1",
          "0x31e16F375531F8d77E027ff935e1114eD62D797b",
          "0x7420879541250749544CF8180B664E617f3Fd49F",
          "0x5A5A8C7E8448484Cf3458d7f426876E79c529f41",
          "0x9cf154D032feBE9463fb0Ec7b3319ad579E5beB9",
          "0x162A8E51E69D72a4bA462220aE9A2E94e44d753F"
        ],
        "getThreshold": 2,
        "NAME": "Gnosis Safe",
        "nonce": 2355,
        "VERSION": "1.1.1"
      }
    },
    {
      "name": "",
      "address": "0x9fb2887182130095b952AB91AfDD6d094940B4b5",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694649971
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xa008534BF96b61d9D33aD64aAD463bc6D300cd91",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1707769415,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": ["0x7Afe7088aff57173565F4b034167643AA8b9171c"],
        "getOnRamps": ["0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69"],
        "getToken": "0x1a2EB478FA07125C9935A77b3C03a82470801E30",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0xa17698199466E71bAFC31F226db341B7840701E7",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715888531,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4051577828743386545", "465200170687744372"],
        "getToken": "0x0AA1e96D2a46Ec6beB2923dE1E61Addf5F5f1dce",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "DODORouteProxy",
      "address": "0xa2398842F37465f89540430bDC00219fA9E4D28a",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1622701788,
      "values": {
        "_DODO_APPROVE_PROXY_": "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619",
        "_WETH_": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "DODOV2Proxy02",
      "address": "0xa356867fDCEa8e71AEaF87805808803806231FdC",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1611652328,
      "values": {
        "_CHI_TOKEN_": "0x0000000000004946c0e9F43F4Dee607b0eF1fA1c",
        "_CP_FACTORY_": "0xE8C9A78725D0451FA19878D5f8A3dC0D55FECF25",
        "_DODO_APPROVE_PROXY_": "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619",
        "_DODO_INCENTIVE_": "0x989DcAA95801C527C5B73AA65d3962dF9aCe1b0C",
        "_DODO_SELL_HELPER_": "0x533dA777aeDCE766CEAe696bf90f8541A4bA80Eb",
        "_DPP_FACTORY_": "0x6B4Fa0bc61Eddc928e0Df9c7f01e407BfcD3e5EF",
        "_DVM_FACTORY_": "0x72d220cE168C4f361dD4deE5D826a01AD8598f6C",
        "_GAS_DODO_MAX_RETURN_": 0,
        "_GAS_EXTERNAL_RETURN_": 0,
        "_NEW_OWNER_": "0x0000000000000000000000000000000000000000",
        "_OWNER_": "0x95C4F5b83aA70810D4f142d58e5F7242Bd891CB0",
        "_WETH_": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xa370CEcd451ecf15c2A01ec47762E967dF7574DA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1711406315,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000001",
        "getRebalancer": "0x0000000000000000000000000000000000000001",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4949039107694359620"],
        "getToken": "0x8a053350ca5F9352a16deD26ab333e2D251DAd7c",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "AffinePassBridge",
      "address": "0xA473fDfdBBaf3a31f14F5b69f0Dfc31cc5a14e83",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x7EE66EA2cEB877BC06B86db09bb9a07e174de672",
        "admin": "0xdc956B7135AA7a99F8080e54dEf4148f8e54bCa4"
      },
      "implementations": ["0x7EE66EA2cEB877BC06B86db09bb9a07e174de672"],
      "sinceTimestamp": 1697119283,
      "values": {
        "affinePass": "0x9244d2cf73861Ee7aA79Ffe90fe4eDF925482795",
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "owner": "0xdc956B7135AA7a99F8080e54dEf4148f8e54bCa4",
        "paused": false
      },
      "errors": {
        "proxiableUUID": "Multicall failed"
      }
    },
    {
      "name": "USDCTokenPool",
      "address": "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701285215,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x569940e02D4425eac61A7601632eC00d69f75c17",
          "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d",
          "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395"
        ],
        "getOnRamps": [
          "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630",
          "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7",
          "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B"
        ],
        "getToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "getUSDCInterfaceId": "0xd6aca1be",
        "i_localDomainIdentifier": 0,
        "i_messageTransmitter": "0x0a992d191DEeC32aFe36203Ad87D7d289a738F81",
        "i_tokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "SUPPORTED_USDC_VERSION": 0,
        "typeAndVersion": "USDCTokenPool 1.2.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xA82A87a9b6550e89dd8a7C8a1E3e421974eaf858",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712692055,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["15971525489660198786"],
        "getToken": "0xc719d010B63E5bbF2C0551872CD5316ED26AcD83",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "",
      "address": "0xaA562FA16EBB6479Ee7bD6A4ABBaB7C83C93EB70",
      "unverified": true,
      "upgradeability": {
        "type": "EIP2535 diamond proxy",
        "facets": [
          "0x82a13703B638bC8aC9a09247679852cb87EE75b2",
          "0xDCA76a9D11620D78021cFF8d6aeA5f852E6ce8aD",
          "0x7bC3E2D2bAD89E9a8C7f3706c858Bed3cDDFF25c",
          "0xc25fD2F159825A7A2408324bfaf65307B56F990b",
          "0x6EE3413750e0c231eCd33745dE3d1EA5a5DA5991",
          "0xf3Fe1b57AC4109c2141410a16C196778E3cA8359",
          "0x3e26021C77799f8Dc7fa64957D8f324c971035Fb",
          "0xe7c2A8ABceD933E58C1425C160023948C43eB99F"
        ]
      },
      "implementations": [
        "0x82a13703B638bC8aC9a09247679852cb87EE75b2",
        "0xDCA76a9D11620D78021cFF8d6aeA5f852E6ce8aD",
        "0x7bC3E2D2bAD89E9a8C7f3706c858Bed3cDDFF25c",
        "0xc25fD2F159825A7A2408324bfaf65307B56F990b",
        "0x6EE3413750e0c231eCd33745dE3d1EA5a5DA5991",
        "0xf3Fe1b57AC4109c2141410a16C196778E3cA8359",
        "0x3e26021C77799f8Dc7fa64957D8f324c971035Fb",
        "0xe7c2A8ABceD933E58C1425C160023948C43eB99F"
      ],
      "sinceTimestamp": 1695123263,
      "values": {
        "getGeneralConfig": [
          "0x8958ca82F35933895Ba083E1dC8d6AB37ceF6686",
          "0x009439010074A20c2ec855439A9935f781Cbd11A",
          "0xaA562FA16EBB6479Ee7bD6A4ABBaB7C83C93EB70"
        ],
        "getLinkTokenAddress": "0x0000000000000000000000000000000000000000",
        "getPrice": "20000000000000000"
      }
    },
    {
      "name": "",
      "address": "0xac400063D3B5E2fda887a7a1dFdAaAC4B5bAD6BD",
      "unverified": true,
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x4C086B2E76e61418a9cBf2Af7Ae9d6d96fD6cD83",
        "admin": "0x5e6aE74195111dA086dDF658A5110A687e5DBCdc"
      },
      "implementations": ["0x4C086B2E76e61418a9cBf2Af7Ae9d6d96fD6cD83"],
      "sinceTimestamp": 1702042055
    },
    {
      "name": "OffRamp4",
      "address": "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701285983,
      "values": {
        "commitStore": ["0x4af4B497c998007eF83ad130318eB2b925a79dc8"],
        "currentRateLimiterState": [
          "5000000000000000000000000",
          1717577159,
          true,
          "5000000000000000000000000",
          "1389000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x4af4B497c998007eF83ad130318eB2b925a79dc8",
          "5009297550715157269",
          "3734403246176062136",
          "0x55183Db1d2aE0b63e4c92A64bEF2CBfc2032B127",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19864178,
          "0x0001c3cd527c6c9dc67c9b6f4a9905a8e35fb30bb1337a60b7c66b2a204eff3e"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "M1ZSourceSender",
      "address": "0xB109aE8CD22eeE9D8119058Ca3C9F452df6367f3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698365471,
      "values": {
        "canMintCrossChain": false,
        "crossChainGasLimit": 1000000,
        "getPrice": [
          0,
          "999000000000000000000",
          "1958040000000000000000",
          "2907090000000000000000",
          "3836160000000000000000"
        ],
        "i_router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "m1z": "0x2F23357ce83cb17C5B0F78CCD18330858BC3cA6f",
        "maxBatch": 5,
        "owner": "0x00058e802800f23319E166Bc3Fa0003D5Ab6a055",
        "unitPrice": "999000000000000000000"
      },
      "errors": {
        "getPrice": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "XERC20",
      "address": "0xb1feA302f3B2E93FA04E46dCCE35F2Fc522d7bB9",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697892335,
      "values": {
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x68e308ffcde5fd733dbbdfeebb2fc80f908bee0fada9b6f9306fd10accaf43d2",
        "eip712Domain": [
          "0x0f",
          "X Moo BIFI",
          "1",
          1,
          "0xb1feA302f3B2E93FA04E46dCCE35F2Fc522d7bB9",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "FACTORY": "0xb33f68A074dcBa4eE9068Faf35AdFCA24827Cc0E",
        "lockbox": "0xc6e3d0CAF52E057Fb8950ae9d07aE67602919AcD",
        "name": "X Moo BIFI",
        "owner": "0x23B4a2b256AD52b7C2FCcAFba0Fd96e1E1886F71",
        "symbol": "xmBIFI",
        "totalSupply": 0
      }
    },
    {
      "name": "",
      "address": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1682628431
    },
    {
      "name": "FeeCollector",
      "address": "0xB49EaD76FE09967D7CA0dbCeF3C3A06eb3Aa0cB4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1683882167,
      "values": {
        "owner": "0x11F11121DF7256C40339393b0FB045321022ce44",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "SwapsRouter",
      "address": "0xB4B0ea46Fe0E9e8EAB4aFb765b527739F2718671",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1654762243,
      "values": {
        "FACTORY": "0xee3E9E46E34a27dC755a63e2849C9913Ee1A06E2",
        "PAIR": "0x7290367aa694703220516A35E68e3D339Ee7D193",
        "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0xb812d0944f8F581DfAA3a93Dda0d22EcEf51A9CF",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "2 of 3 (67%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1651423626,
      "values": {
        "domainSeparator": "0x593cfc0dc80abe566fc621123892cdad5fd389f21a7d6bf9b3b4865b1deef4bc",
        "getChainId": 1,
        "getOwners": [
          "0x0650302887619fa7727D8BD480Cda11A638B219B",
          "0xf71fc92e2949ccF6A5Fd369a0b402ba80Bc61E02",
          "0x5811d9FF80ff4B73A8F9bA42A6082FaB82E89Ea7"
        ],
        "getThreshold": 2,
        "nonce": 141,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xb854536206EB6C1013b1642b576196E5EF19D7BA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713201359,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["15971525489660198786", "4949039107694359620"],
        "getToken": "0x38C2a4a7330b22788374B8Ff70BBa513C8D848cA",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "ChainlinkCcipGateway",
      "address": "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698812555,
      "values": {
        "client": "0x7b2E3FC7510D1A51b3bef735F985446589219354",
        "endpoint": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "fullManagerList": ["0x0d954A23a3c32aea407dF052C29E14434a4BB9aa"],
        "fullPeerChainIdList": [56, 43114, 137, 42161, 8453, 10],
        "managerCount": 1,
        "minTargetGas": [150000, 150000, 150000, 150000, 150000],
        "minTargetGasCustom": [
          [false, 0],
          [false, 0],
          [false, 0],
          [false, 0],
          [false, 0]
        ],
        "minTargetGasDefault": 150000,
        "owner": "0xda3111E42Ba048a9Be555f0C08d363F26B2A375a",
        "paused": false,
        "peerChainIdIndexMap": [
          [false, 0],
          [false, 0],
          [false, 0],
          [false, 0],
          [false, 0]
        ],
        "peerChainIdList": [56, 43114, 137, 42161, 8453],
        "peerCount": 6,
        "peerMap": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "processingFeeCollector": "0x36Dd4C9151a3bb9aAcB18547Aa9743E2fFec3590",
        "self": "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
        "standardToCcipChainId": [0, "5009297550715157269", 0, 0, 0],
        "SYSTEM_VERSION_ID": "15685333357143876905381156080256194284585309009741792718237957731407193701748",
        "targetGasReserve": 10000,
        "variableBalanceRecords": "0xbFc3b856b9BCC792875E79Fc8FFcc09028AAD406"
      },
      "errors": {
        "minTargetGas": "Too many values. Update configuration to explore fully",
        "minTargetGasCustom": "Too many values. Update configuration to explore fully",
        "peerChainIdIndexMap": "Too many values. Update configuration to explore fully",
        "peerChainIdList": "Too many values. Update configuration to explore fully",
        "peerMap": "Too many values. Update configuration to explore fully",
        "standardToCcipChainId": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0xba30Add178fb849aad4715354Bc66506aA327E36",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694489147,
      "values": {
        "owner": "0xC52a72eDdcA008580b4Efc89eA9f343AfF11FeA3"
      }
    },
    {
      "name": "TokenMessenger",
      "address": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677628295,
      "values": {
        "localMessageTransmitter": "0x0a992d191DEeC32aFe36203Ad87D7d289a738F81",
        "localMinter": "0xc4922d64a24675E16e1586e3e3Aa56C06fABe907",
        "messageBodyVersion": 0,
        "owner": "0x6b0b72E63764101Fc4d5BD914B107987041578C4",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "rescuer": "0x65cBcdbE95567A8F9519242f9C52F65E8067021B"
      }
    },
    {
      "name": "FeeCollector",
      "address": "0xbD6C7B0d2f68c2b7805d88388319cfB6EcB50eA9",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1658941560,
      "values": {
        "owner": "0xC06ebbefD94032B85424D51906e2A335EFAe264B",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "OffRamp11",
      "address": "0xBDd822f3bC2EAB6818CfA3053107831D4E93fE72",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688670131,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getDestinationTokens": [
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60"
        ],
        "getDynamicConfig": [
          28800,
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          1,
          30000
        ],
        "getStaticConfig": [
          "0x20718EfbC25Dba60FD51c2c81362b83f7C411A6D",
          "5009297550715157269",
          "4051577828743386545",
          "0xAE0e486Fa6577188d586A8e4c12360FB82E2a386",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": [
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x27f485b62C4A7E635F561A87560Adf5090239E93"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "latestConfigDetails": [
          6,
          18631710,
          "0x0001007a4662694594ac05762067a6eddd5f3b2ac2b3652205e0e389d3981910"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "LiFiDiamond",
      "address": "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F",
      "upgradeability": {
        "type": "EIP2535 diamond proxy",
        "facets": [
          "0xF1d67E1dddc87E2858C87EBd5b19f99a4E297541",
          "0x49d195D3138D4E0E2b4ea88484C54AEE45B04B9F",
          "0x44beA2Ab010d1CedC4E60E97DA8F88b8840951B0",
          "0x428C4abf8BB3ECc893bD3E0Be12b0f363c6e81aA",
          "0x64D41a7B52CA910f4995b1df33ea68471138374b",
          "0xfaA5f885a54D22C8571806fC001E53F0191f5Aff",
          "0x2EfC66F1ff37fc5277De5526Ab5CB7650f2DD518",
          "0x2fF4484bcaEf13e4a1Db84E6af882c9d66c97e3F",
          "0x6e118Db5ab7018FcF195e1310074688B8A1912B3",
          "0xe80E2a7ea862AF5580fBa9B7092a397e3D73cb7f",
          "0xFB4C992Cc7cfA7Eb3e44b928C6f756C07a3feb04",
          "0x933A3AfE2087FB8F5c9EE9A033477C42CC14c18E",
          "0xe1FaF1759cAB242c5A790Da72c8f0cC7F5e09f59",
          "0x57F98A94AC66e197AF6776D5c094FF0da2C0B198",
          "0xa696287F37d21D566B9A80AC29b2640FF910C176",
          "0xe7072402217EfF9b73cf457731cEE2A3824360dc",
          "0x987f67811Ef841da0466746E10B4139Daff95053",
          "0x9dC5653ed59D0B927bF59b5A08FDFC4Ddd75AC3E",
          "0x5fda594b67d38E05fb4C9A1a4Cf3B22f48c8de4E",
          "0x7cFdffE0e298b3CAC2cFe1F31c9965d9A49C3184",
          "0xd18C6a3488d424920dD9f6A4187645794df96383",
          "0xC1E20466AD79BAe875568eb08ABaaEA1F0E25b7E",
          "0xE8Ff7BFEF5DacB57E87bC2d0B6CCFefBE5f546BC",
          "0x9BE903AB2ad61dfC71f7E2171A3dBf0884a4cdBF"
        ]
      },
      "implementations": [
        "0xF1d67E1dddc87E2858C87EBd5b19f99a4E297541",
        "0x49d195D3138D4E0E2b4ea88484C54AEE45B04B9F",
        "0x44beA2Ab010d1CedC4E60E97DA8F88b8840951B0",
        "0x428C4abf8BB3ECc893bD3E0Be12b0f363c6e81aA",
        "0x64D41a7B52CA910f4995b1df33ea68471138374b",
        "0xfaA5f885a54D22C8571806fC001E53F0191f5Aff",
        "0x2EfC66F1ff37fc5277De5526Ab5CB7650f2DD518",
        "0x2fF4484bcaEf13e4a1Db84E6af882c9d66c97e3F",
        "0x6e118Db5ab7018FcF195e1310074688B8A1912B3",
        "0xe80E2a7ea862AF5580fBa9B7092a397e3D73cb7f",
        "0xFB4C992Cc7cfA7Eb3e44b928C6f756C07a3feb04",
        "0x933A3AfE2087FB8F5c9EE9A033477C42CC14c18E",
        "0xe1FaF1759cAB242c5A790Da72c8f0cC7F5e09f59",
        "0x57F98A94AC66e197AF6776D5c094FF0da2C0B198",
        "0xa696287F37d21D566B9A80AC29b2640FF910C176",
        "0xe7072402217EfF9b73cf457731cEE2A3824360dc",
        "0x987f67811Ef841da0466746E10B4139Daff95053",
        "0x9dC5653ed59D0B927bF59b5A08FDFC4Ddd75AC3E",
        "0x5fda594b67d38E05fb4C9A1a4Cf3B22f48c8de4E",
        "0x7cFdffE0e298b3CAC2cFe1F31c9965d9A49C3184",
        "0xd18C6a3488d424920dD9f6A4187645794df96383",
        "0xC1E20466AD79BAe875568eb08ABaaEA1F0E25b7E",
        "0xE8Ff7BFEF5DacB57E87bC2d0B6CCFefBE5f546BC",
        "0x9BE903AB2ad61dfC71f7E2171A3dBf0884a4cdBF"
      ],
      "sinceTimestamp": 1687893887,
      "values": {
        "approvedDexs": [
          "0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149",
          "0xa356867fDCEa8e71AEaF87805808803806231FdC",
          "0xa2398842F37465f89540430bDC00219fA9E4D28a",
          "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57",
          "0x216B4B4Ba9F3e719726886d34a177484278Bfcae",
          "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64",
          "0x1111111254fb6c44bAC0beD2854e76F90643097d",
          "0x1111111254EEB25477B68fb85Ed929f73A960582",
          "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
          "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
          "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
          "0xE592427A0AEce92De3Edee1F18E0157C05861564",
          "0xbD6C7B0d2f68c2b7805d88388319cfB6EcB50eA9",
          "0x4b0B89b90fF83247aEa12469CeA9A6222e09d54c",
          "0xB49EaD76FE09967D7CA0dbCeF3C3A06eb3Aa0cB4",
          "0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587"
        ],
        "facetAddresses": [
          "0xF1d67E1dddc87E2858C87EBd5b19f99a4E297541",
          "0x49d195D3138D4E0E2b4ea88484C54AEE45B04B9F",
          "0x44beA2Ab010d1CedC4E60E97DA8F88b8840951B0",
          "0x428C4abf8BB3ECc893bD3E0Be12b0f363c6e81aA",
          "0x64D41a7B52CA910f4995b1df33ea68471138374b",
          "0xfaA5f885a54D22C8571806fC001E53F0191f5Aff",
          "0x2EfC66F1ff37fc5277De5526Ab5CB7650f2DD518",
          "0x2fF4484bcaEf13e4a1Db84E6af882c9d66c97e3F",
          "0x6e118Db5ab7018FcF195e1310074688B8A1912B3",
          "0xe80E2a7ea862AF5580fBa9B7092a397e3D73cb7f",
          "0xFB4C992Cc7cfA7Eb3e44b928C6f756C07a3feb04",
          "0x933A3AfE2087FB8F5c9EE9A033477C42CC14c18E",
          "0xe1FaF1759cAB242c5A790Da72c8f0cC7F5e09f59",
          "0x57F98A94AC66e197AF6776D5c094FF0da2C0B198",
          "0xa696287F37d21D566B9A80AC29b2640FF910C176",
          "0xe7072402217EfF9b73cf457731cEE2A3824360dc",
          "0x987f67811Ef841da0466746E10B4139Daff95053",
          "0x9dC5653ed59D0B927bF59b5A08FDFC4Ddd75AC3E",
          "0x5fda594b67d38E05fb4C9A1a4Cf3B22f48c8de4E",
          "0x7cFdffE0e298b3CAC2cFe1F31c9965d9A49C3184",
          "0xd18C6a3488d424920dD9f6A4187645794df96383",
          "0xC1E20466AD79BAe875568eb08ABaaEA1F0E25b7E",
          "0xE8Ff7BFEF5DacB57E87bC2d0B6CCFefBE5f546BC",
          "0x9BE903AB2ad61dfC71f7E2171A3dBf0884a4cdBF"
        ],
        "facets": [
          ["0xF1d67E1dddc87E2858C87EBd5b19f99a4E297541", ["0x1f931c1c"]],
          [
            "0x49d195D3138D4E0E2b4ea88484C54AEE45B04B9F",
            [
              "0xcdffacc6",
              "0x52ef6b2c",
              "0xadfca15e",
              "0x7a0ed627",
              "0x01ffc9a7"
            ]
          ],
          [
            "0x44beA2Ab010d1CedC4E60E97DA8F88b8840951B0",
            ["0x23452b9c", "0x7200b829", "0x8da5cb5b", "0xf2fde38b"]
          ],
          [
            "0x428C4abf8BB3ECc893bD3E0Be12b0f363c6e81aA",
            ["0x1458d7ad", "0xd9caed12"]
          ],
          [
            "0x64D41a7B52CA910f4995b1df33ea68471138374b",
            [
              "0x536db266",
              "0xfbb2d381",
              "0xfcd8e49e",
              "0x9afc19c7",
              "0x44e2b18c",
              "0x2d2506a9",
              "0x124f1ead",
              "0xc3a6a96b"
            ]
          ],
          [
            "0xfaA5f885a54D22C8571806fC001E53F0191f5Aff",
            ["0x612ad9cb", "0xa4c3366e"]
          ],
          [
            "0x2EfC66F1ff37fc5277De5526Ab5CB7650f2DD518",
            ["0xa516f0f3", "0x5c2ed36a"]
          ],
          ["0x2fF4484bcaEf13e4a1Db84E6af882c9d66c97e3F", ["0x4630a0d8"]],
          [
            "0x6e118Db5ab7018FcF195e1310074688B8A1912B3",
            ["0x9b6ee8e4", "0x55206216"]
          ],
          [
            "0xe80E2a7ea862AF5580fBa9B7092a397e3D73cb7f",
            ["0xbab657d8", "0x8fab0663"]
          ],
          [
            "0xFB4C992Cc7cfA7Eb3e44b928C6f756C07a3feb04",
            ["0x6502c79a", "0xc7c8b355"]
          ],
          [
            "0x933A3AfE2087FB8F5c9EE9A033477C42CC14c18E",
            ["0xf85856af", "0x6a0f3cbd"]
          ],
          [
            "0xe1FaF1759cAB242c5A790Da72c8f0cC7F5e09f59",
            ["0x02d452ab", "0xe9017dc5"]
          ],
          [
            "0x57F98A94AC66e197AF6776D5c094FF0da2C0B198",
            ["0x9700ad75", "0x7d9dd78b"]
          ],
          [
            "0xa696287F37d21D566B9A80AC29b2640FF910C176",
            ["0x2541ec57", "0xad673d88"]
          ],
          [
            "0xe7072402217EfF9b73cf457731cEE2A3824360dc",
            ["0xebbaa1cb", "0x5d939e16"]
          ],
          [
            "0x987f67811Ef841da0466746E10B4139Daff95053",
            ["0xc9851d0b", "0x3cc9517b"]
          ],
          [
            "0x9dC5653ed59D0B927bF59b5A08FDFC4Ddd75AC3E",
            ["0x5fcb0260", "0xbe3d5ec5"]
          ],
          [
            "0x5fda594b67d38E05fb4C9A1a4Cf3B22f48c8de4E",
            ["0x02cba4a3", "0xa9d0550f"]
          ],
          [
            "0x7cFdffE0e298b3CAC2cFe1F31c9965d9A49C3184",
            ["0x31191ec3", "0xeca3735c"]
          ],
          [
            "0xd18C6a3488d424920dD9f6A4187645794df96383",
            ["0xc68f807b", "0xfec34c65", "0xb5bdbe90", "0x1b4a9df3"]
          ],
          [
            "0xC1E20466AD79BAe875568eb08ABaaEA1F0E25b7E",
            ["0x782621d8", "0x95726782"]
          ],
          [
            "0xE8Ff7BFEF5DacB57E87bC2d0B6CCFefBE5f546BC",
            ["0xdecb09d7", "0xce8a97a5", "0x5bb5d448"]
          ],
          [
            "0x9BE903AB2ad61dfC71f7E2171A3dBf0884a4cdBF",
            [
              "0x5f352aaf",
              "0x3071e675",
              "0x128a60c8",
              "0xdb26bc6a",
              "0x22290e3e",
              "0xdc6b5e32"
            ]
          ]
        ],
        "owner": "0x29DaCdF7cCaDf4eE67c923b4C22255A4B2494eD7",
        "routerClient": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
      }
    },
    {
      "name": "BeefyVaultV7",
      "address": "0xBEEF8e0982874e0292E6C5751C5A4092b3e1BEEF",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697833931,
      "values": {
        "approvalDelay": 21600,
        "available": 0,
        "balance": "28384711150963474122707",
        "decimals": 18,
        "getPricePerFullShare": "1050536839691247276",
        "name": "Moo BIFI",
        "owner": "0x5B6C5363851EC9ED29CB7220C39B44E1dd443992",
        "stratCandidate": ["0x0000000000000000000000000000000000000000", 0],
        "strategy": "0xDEF1be4D80a990847f8C7A1e15e824fF2749C0DE",
        "symbol": "mooBIFI",
        "totalSupply": "27019243950841114039752",
        "want": "0xB1F1ee126e9c96231Cc3d3fAD7C08b4cf873b1f1"
      }
    },
    {
      "name": "TwapUtils",
      "address": "0xBf1858b24243Ecbcf7d940f458e36CB7401c2366",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1686327923,
      "values": {
        "getSqrtPriceX96FromPriceX96": [
          0, 281474976710656, 281474976710656, 281474976710656, 562949953421312
        ],
        "owner": "0x0000000000000000000000000000000000000000",
        "twapInterval": 300
      },
      "errors": {
        "getSqrtPriceX96FromPriceX96": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0xBF7cb652A2d5ed3BFc3832Ef8Af33Ffb0cDc0982",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715888603,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4949039107694359620", "6433500567565415381"],
        "getToken": "0xf2DbAaBd8F8E0993F11DE4CEd470Df1ED1a4491b",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.4.0"
      }
    },
    {
      "name": "VariableBalanceRecords",
      "address": "0xbFc3b856b9BCC792875E79Fc8FFcc09028AAD406",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1678878167,
      "values": {
        "actionExecutor": "0x7b2E3FC7510D1A51b3bef735F985446589219354",
        "fullManagerList": ["0x0d954A23a3c32aea407dF052C29E14434a4BB9aa"],
        "managerCount": 1,
        "owner": "0xda3111E42Ba048a9Be555f0C08d363F26B2A375a",
        "SYSTEM_VERSION_ID": "64276665108388658174230283029000281090856552654675654641351991970535913918410"
      }
    },
    {
      "name": "WETH9",
      "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1513077455,
      "values": {
        "decimals": 18,
        "name": "Wrapped Ether",
        "symbol": "WETH",
        "totalSupply": "2906347150407260509958674"
      }
    },
    {
      "name": "LiFuelFeeCollector",
      "address": "0xc02FFcdD914DbA646704439c6090BAbaD521d04C",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1708072091,
      "values": {
        "owner": "0xC71284231A726A18ac85c94D75f9fe17A185BeAF",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0xc07556a0Bd177F8de4D077f449C2653A072F3798",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "3 of 7 (43%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1707337151,
      "values": {
        "domainSeparator": "0xccec06d2944ed816bb6addb86977393693ae262ae101237d9a6cd8bc5d9f613a",
        "getChainId": 1,
        "getOwners": [
          "0xE0a8ABcf65e6212abFd659d5D857CFbA62a14771",
          "0x0669d4d05Fc5bCF261DBADc3b41854a6ee7E2E85",
          "0x5aC189Db4351787516d2E6Fc628BF762ce684326",
          "0xBd6934b2DF4B6926FA7161f72A7DC599b9A2E581",
          "0x53482ACf424d4196b0F8EbdD6F8A15eb8516FB88",
          "0xcD5868dD3dEe0f0A31c38D088dd562F5d4ea2386",
          "0xbD4dAf39E552C29648C9Ec78e2f671373b1347f2"
        ],
        "getThreshold": 3,
        "nonce": 17,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688661575,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24",
          "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3"
        ],
        "getOnRamps": [
          "0xe2Eb229e88F56691e96bb98256707Bc62160FE73",
          "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "NonfungiblePositionManager",
      "address": "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1620156913,
      "values": {
        "baseURI": "",
        "DOMAIN_SEPARATOR": "0x24ea63bbfcb16de2524c7c24322b6cbc39cb2d08881bce770af4771e6b1ad117",
        "factory": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
        "getApproved": [],
        "name": "Uniswap V3 Positions NFT-V1",
        "ownerOf": [],
        "PERMIT_TYPEHASH": "0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad",
        "positions": [],
        "symbol": "UNI-V3-POS",
        "tokenByIndex": [1, 2, 3, 4, 5],
        "tokenURI": [],
        "totalSupply": 675207,
        "WETH9": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "errors": {
        "tokenByIndex": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xc43c01026128Aa758A65D12dB6a72CE4DD778dF2",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1707769439,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0x7Afe7088aff57173565F4b034167643AA8b9171c",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"
        ],
        "getToken": "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "TokenMinter",
      "address": "0xc4922d64a24675E16e1586e3e3Aa56C06fABe907",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677628319,
      "values": {
        "localTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "owner": "0x01430Aa44F14007c8d5Ddc011FA63dCcE7878dC8",
        "paused": false,
        "pauser": "0x817ae4109dC0f21E437b94c899962690514Ba09f",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "rescuer": "0x96D16c491aDA31f609eC72Ae33018b8B7e80EB41",
        "tokenController": "0x8a9A13A106cB89E15410B2AB4488135155032169"
      }
    },
    {
      "name": "LiFuelFeeCollector",
      "address": "0xc4f7A34b8d283f66925eF0f5CCdFC2AF3030DeaE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698307259,
      "values": {
        "owner": "0xC71284231A726A18ac85c94D75f9fe17A185BeAF",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0xc62c311FE64abf19CF33195e15c188Ca6d1AaD3e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1709217479,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395",
          "0x569940e02D4425eac61A7601632eC00d69f75c17"
        ],
        "getOnRamps": [
          "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
          "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630"
        ],
        "getToken": "0xd2a530170D71a9Cfe1651Fb468E2B98F7Ed7456b",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.2.0"
      }
    },
    {
      "name": "XERC20Lockbox",
      "address": "0xc6e3d0CAF52E057Fb8950ae9d07aE67602919AcD",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697892395,
      "values": {
        "ERC20": "0xBEEF8e0982874e0292E6C5751C5A4092b3e1BEEF",
        "IS_NATIVE": false,
        "XERC20": "0xb1feA302f3B2E93FA04E46dCCE35F2Fc522d7bB9"
      }
    },
    {
      "name": "ServiceFeeCollector",
      "address": "0xC85c2B19958D116d79C654ecE73b359c08802A76",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1690451327,
      "values": {
        "owner": "0x08647cc950813966142A416D40C382e2c5DB73bB",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "CCIPBridge",
      "address": "0xc8BA6Be4A8F60889E6D1bdbb9A17d433a62dF3d3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698058535,
      "values": {
        "owner": "0x47C7c921ADf8b09e24EfAc584E2064e34CBb1b6F",
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
      }
    },
    {
      "name": "",
      "address": "0xC979fEC5bf053D0d52caDA4CFe1C25737731502D",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1633942966
    },
    {
      "name": "RateSender",
      "address": "0xc9e03910DDDF689D3e309b42dbf4c581ED1e795D",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694610251,
      "values": {
        "ccipRegister": "0x02777053d6764996e594c3E88AF1D58D5363a2e6",
        "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
        "owner": "0x211BEd4bd65d4c01643377d95491B8c4B533EAAD",
        "reth": "0x9559Aaa82d9649C7A7b220E7c461d2E74c9a3593",
        "rethLatestRate": "1079594404912699822",
        "rethRateInfoOf": [
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ]
        ],
        "rmatic": "0x3Aee3e96c9E340cBe0fFFC5224Db9e97949f3899",
        "rmaticLatestRate": "1158848172546133926",
        "rmaticRateInfoOf": [
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ]
        ],
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
      },
      "errors": {
        "rethRateInfoOf": "Too many values. Update configuration to explore fully",
        "rmaticRateInfoOf": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BridgedNuon",
      "address": "0xCA160D11087E03fd398d40f561cd4768825f4958",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695318419,
      "values": {
        "decimals": 18,
        "name": "NUON",
        "owner": "0xf9A2375d501049E2c6f358548c34867216927ebF",
        "symbol": "NUON",
        "totalSupply": "1999999999999999998"
      }
    },
    {
      "name": "DODOApprove",
      "address": "0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1607949632,
      "values": {
        "_DODO_PROXY_": "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619",
        "_NEW_OWNER_": "0x0000000000000000000000000000000000000000",
        "_OWNER_": "0x95C4F5b83aA70810D4f142d58e5F7242Bd891CB0",
        "_PENDING_DODO_PROXY_": "0x0000000000000000000000000000000000000000",
        "_TIMELOCK_": 0,
        "getDODOProxy": "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619"
      }
    },
    {
      "name": "OnRamp7",
      "address": "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701802691,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          0,
          16,
          0,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 1189,
        "getNopFeesJuels": "469798865335944495",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "4933563445075025815",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "5142893604156789321"],
        "tokenAddresses": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0x66cC3FD40612F9c591F977ce026Ef1C79520C472",
          "0x2624Bd0094f474713AC9c634b37A5ebef4e0b1FE"
        ],
        "tokenPools": [
          "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
          "0x1175E4CFd6a73A4c1F1f2c1400a08D88554FA62e",
          "0x78196436aF11b948c7036424B1ceA711fAdAd288"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "OnRamp9",
      "address": "0xCC19bC4D43d17eB6859F0d22BA300967C97780b0",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688668931,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getAllowList": [
          "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
          "0x7A0a06735E41dc59F90228686f44bf2E13CC1724",
          "0xAFa2c441a83bBCEDc2E8c5c6f66248aFD8b9af3d",
          "0xccccB27BB46ffE01479248EDDFb75E300DE06879",
          "0xcccd6EC6F4705292f07eE4a9a8F1F120963358c5",
          "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F",
          "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
          "0x17483FC75528C53d21Ca7465484aee081BFf39Bd",
          "0xcccEa7Fe84272995664369334351Fe344E2732aE",
          "0xef0F8397300189D680534dDe7276A379D8A7B19f",
          "0x48d2Ae51E665298000A42f924E7Ad09914f21821",
          "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB",
          "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
          "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61",
          "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
          "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5"
        ],
        "getAllowListEnabled": true,
        "getDynamicConfig": [
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          1,
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          30000,
          2000000
        ],
        "getExpectedNextSequenceNumber": 2760,
        "getNopFeesJuels": 10,
        "getNops": [[], 0],
        "getStaticConfig": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "5009297550715157269",
          "3734403246176062136",
          200000,
          "20000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": ["0xb2F30A7C980f052f02563fb518dcc39e6bf38175"],
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8523241045813356899",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOnRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "Polygon_NFT_Bridge",
      "address": "0xCcC8170eB01434Ca514a6f7a5d9ACEB5Ba84DcCc",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1696013411,
      "values": {
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
      }
    },
    {
      "name": "CCIPBridgeAdapter",
      "address": "0xccccB27BB46ffE01479248EDDFb75E300DE06879",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1694264987,
      "values": {
        "BIFI": "0x3960f6c882d11B797bd3f574D77E339516813B5A",
        "chainIdToCcipId": [0, 0, 0, 0, 0],
        "extraArgs": "0x",
        "lockbox": "0x90C30227f04A4d7Ff86Eab8CA56eC25DD5fa15D2",
        "owner": "0x161D61e30284A33Ab1ed227beDcac6014877B3DE",
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "xBIFI": "0x3B2faF664d6cCA5248CD7f44a6538A1fFdCcF7F0"
      },
      "errors": {
        "chainIdToCcipId": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "CCIPBridgeAdapter",
      "address": "0xcccd6EC6F4705292f07eE4a9a8F1F120963358c5",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1695930227,
      "values": {
        "BIFI": "0x3960f6c882d11B797bd3f574D77E339516813B5A",
        "chainIdToCcipId": [0, 0, 0, 0, 0],
        "extraArgs": "0x",
        "lockbox": "0x90C30227f04A4d7Ff86Eab8CA56eC25DD5fa15D2",
        "owner": "0x161D61e30284A33Ab1ed227beDcac6014877B3DE",
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "xBIFI": "0x3B2faF664d6cCA5248CD7f44a6538A1fFdCcF7F0"
      },
      "errors": {
        "chainIdToCcipId": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "CCIPBridgeAdapter",
      "address": "0xcccEa7Fe84272995664369334351Fe344E2732aE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697894723,
      "values": {
        "BIFI": "0xBEEF8e0982874e0292E6C5751C5A4092b3e1BEEF",
        "chainIdToCcipId": [0, 0, 0, 0, 0],
        "errors": [
          [0, "0x0000000000000000000000000000000000000000", 0],
          [0, "0x0000000000000000000000000000000000000000", 0],
          [0, "0x0000000000000000000000000000000000000000", 0],
          [0, "0x0000000000000000000000000000000000000000", 0],
          [0, "0x0000000000000000000000000000000000000000", 0]
        ],
        "extraArgs": "0x",
        "lockbox": "0xc6e3d0CAF52E057Fb8950ae9d07aE67602919AcD",
        "owner": "0x34fEf5DA92c59d6aC21d0A75ce90B351D0Fb6CE6",
        "router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "xBIFI": "0xb1feA302f3B2E93FA04E46dCCE35F2Fc522d7bB9"
      },
      "errors": {
        "chainIdToCcipId": "Too many values. Update configuration to explore fully",
        "errors": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0xcd196D3905AfA0eCB4e0e62C2D7d6c52f9C73526",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697125199,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": [
          "0x61135E701a2214C170c5F596D0067798FEfbaaE4",
          "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
        ],
        "getOnRamps": [
          "0x333f976915195ba9044fD0cd603cEcE936f6264e",
          "0xe2Eb229e88F56691e96bb98256707Bc62160FE73",
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"
      }
    },
    {
      "name": "OdosRouterV2",
      "address": "0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1689220631,
      "values": {
        "addressList": [],
        "FEE_DENOM": "1000000000000000000",
        "owner": "0x47E2D28169738039755586743E2dfCF3bd643f86",
        "REFERRAL_WITH_FEE_THRESHOLD": 2147483648,
        "swapMultiFee": 100000000000000
      }
    },
    {
      "name": "OnRamp10",
      "address": "0xd0B5Fc9790a6085b048b8Aa1ED26ca2b3b282CF2",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688669675,
      "values": {
        "currentRateLimiterState": [
          "100000000000000000000000",
          1717577159,
          true,
          "100000000000000000000000",
          "167000000000000000000"
        ],
        "getAllowList": [
          "0x6aaD18a3cafB04b9a70761943796eCC179A1D933",
          "0x8EfcE1B976AaE2eB3B6283A5b4CC2019F8250362",
          "0x70996FeE3bc1BA38e36Ea356aee5d855161e6e52",
          "0xAFa2c441a83bBCEDc2E8c5c6f66248aFD8b9af3d",
          "0xF9F5bcd3a50653387ee0b9d60C1905854093e8Fb",
          "0x284A4912a39dD710994347cB63853E297f45564f",
          "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F",
          "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
          "0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1",
          "0x3596fB4e61dE7d5Cca41Ae5a3fFFcCdedE313a4e",
          "0xB109aE8CD22eeE9D8119058Ca3C9F452df6367f3",
          "0x17483FC75528C53d21Ca7465484aee081BFf39Bd",
          "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB",
          "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
          "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61",
          "0x2824Ac0Eab15744396E763A698b55F4Fe983a757",
          "0xec0E656E2Dcd53f1BCdD6e68D42328f5c76652c0",
          "0xdF715B5815A735DCfF31166d642A367f5405e6Ef",
          "0xeEFD0D67E4eF9330870961C38a3e25ECE369B141",
          "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
          "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5"
        ],
        "getAllowListEnabled": true,
        "getDynamicConfig": [
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          1,
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          30000,
          2000000
        ],
        "getExpectedNextSequenceNumber": 3310,
        "getNopFeesJuels": 1,
        "getNops": [
          [
            ["0xfA3430d84324ABC9ac8AAf30B2D26260F5172ad0", 0],
            ["0x9D219125a0CE10241b4eC1280c2F880475f172f1", 279],
            ["0x55AB744a77f8b1daCa1B7D22d5112165Bcc77d4c", 4268],
            ["0x59eCf48345A221E0731E785ED79eD40d0A94E2A5", 0],
            ["0x9efa0A617C0552F1558c95993aA8b8A68b3e709C", 0],
            ["0xFdC770353dC0bFCE80a17Ab8a6a2E7d80590f1Ba", 204],
            ["0x7AF3C2b54eE2f170b8104222eB4EDf2511f5d9d0", 0],
            ["0x15918ff7f6C44592C81d999B442956B07D26CC44", 0],
            ["0x001E0d294383d5b4136476648aCc8D04a6461Ae3", 0],
            ["0x4564A9c6061f6f1F2Eadb954B1b3C241D2DC984e", 1447],
            ["0xDF812B91D8bf6DF698BFD1D8047839479Ba63420", 0],
            ["0x14f94049397C3F1807c45B6f854Cb5F36bC4393B", 749],
            ["0xAB35418fB9f8B13E3e6857c36A0769b9F94a87EC", 0],
            ["0x0921E157b690c4F89F7C2a210cFd8bF3964F6776", 696],
            ["0x47044eE2F23001F8a03FB2f7d2ce6645aDA4D12A", 0],
            ["0xa06B89B08F038Aff4F81ce0A45c5aCb040477c3b", 0],
            ["0x3FB4600736d306Ee2A89EdF0356D4272fb095768", 0],
            ["0xBDB624CD1051F687f116bB0c642330B2aBdfcc06", 1354],
            ["0xDA80050Ed4F50033949608208f79EE43Ab91dF55", 221],
            ["0x9cCbFD17FA284f36c2ff503546160B256d1CD3D1", 782],
            ["0xC51D3470693BC049809A1c515606124c7C75908d", 0],
            ["0x183A96629fF566e7AA8AfA38980Cd037EB40A59A", 0],
            ["0x111f1B41f702c20707686769a4b7f25c56C533B2", 0]
          ],
          10000
        ],
        "getStaticConfig": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "5009297550715157269",
          "6433500567565415381",
          200000,
          "20000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": ["0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5"],
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "2766721193549413231",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOnRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xd1b3015ceFCAC84dB3EFCBB18FBdd50BA5aF49DE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1714419419,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getRebalancer": "0x0000000000000000000000000000000000000000",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4051577828743386545"],
        "getToken": "0xa19f5264F7D7Be11c451C093D8f92592820Bea86",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "CommitStore7",
      "address": "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701286319,
      "values": {
        "getDynamicConfig": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "getExpectedNextSequenceNumber": 628,
        "getLatestPriceEpochAndRound": 359939,
        "getStaticConfig": [
          "5009297550715157269",
          "4051577828743386545",
          "0xFd77c53AA4eF0E3C01f5Ac012BF7Cc7A3ECf5168",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": [
          7,
          19992871,
          "0x0001380ba240289ac40146b431a0dcd60a97af46d941e485e13e776015c51bc0"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore"
    },
    {
      "name": "ProxyAdmin",
      "address": "0xD3cF979e676265e4f6379749DECe4708B9A22476",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1676319587,
      "values": {
        "owner": "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A"
      }
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715889599,
      "values": {
        "commitStore": ["0x831097033C88c82a7F1897b168Aa88cC44540C8f"],
        "currentRateLimiterState": [
          "2000000000000000000000000",
          1717577159,
          true,
          "2000000000000000000000000",
          "555550000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x831097033C88c82a7F1897b168Aa88cC44540C8f",
          "5009297550715157269",
          "1346049177634351622",
          "0x27C96A8a2f70a8408aD6c620717a3bDaA54bb10b",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          2,
          19920841,
          "0x00019d184dccae0889b12b4eb0a1aaf1cb6c080ce97e404050f84bdf30f692af"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      }
    },
    {
      "name": "UniswapV2Router02",
      "address": "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1599214709,
      "values": {
        "factory": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
        "WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0xda3111E42Ba048a9Be555f0C08d363F26B2A375a",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "4 of 5 (80%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1680128963,
      "values": {
        "domainSeparator": "0x56a735fa930cd070ab53c70d9dfd6489d1a339cb7d1e858898b82bb9de3f26cf",
        "getChainId": 1,
        "getOwners": [
          "0x054B7Db5f5DDBC9748D3e7d8ded296fe37B1fd46",
          "0x6eed1087Acd27A6306E8a3e989144B4A679d3C50",
          "0xa4c4FeB118a42A337020487459001cF5282825Cd",
          "0x2aad7029B5408fe61592AEA53Afa16F81bBC4F51",
          "0x5DD596C901987A2b28C38A9C1DfBf86fFFc15d77"
        ],
        "getThreshold": 4,
        "nonce": 2,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xdCa0A2341ed5438E06B9982243808A76B9ADD6d0",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1708552811,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getOffRamps": [
          "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d",
          "0xdf85c8381954694E74abD07488f452b4c2Cddfb3"
        ],
        "getOnRamps": [
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7"
        ],
        "getToken": "0xDcEe70654261AF21C44c093C300eD3Bb97b78192",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.2.0"
      }
    },
    {
      "name": "AugustusSwapper",
      "address": "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1629290525,
      "values": {
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getFeeWallet": "0xD5B927956057075377263aaB7f8AfC12F85100dB",
        "getTokenTransferProxy": "0x216B4B4Ba9F3e719726886d34a177484278Bfcae",
        "getVersion": "5.0.0",
        "ROUTER_ROLE": "0x7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2",
        "WHITELISTED_ROLE": "0x8429d542926e6695b59ac6fbdcd9b37e8b1aeb757afab06ab60b1bb5878c3b49"
      }
    },
    {
      "name": "ZeroEx",
      "address": "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1591914534
    },
    {
      "name": "KingdomTiles",
      "address": "0xdF715B5815A735DCfF31166d642A367f5405e6Ef",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701470243,
      "values": {
        "getApproved": [],
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "name": "KingdomTiles",
        "owner": "0xfB76F41bc20292E0bba9FB5c1B0aBD8174ad433e",
        "ownerOf": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "symbol": "KT",
        "tokenURI": [
          "https://api.kingdom.so/tiles/metadata/0.json",
          "https://api.kingdom.so/tiles/metadata/1.json",
          "https://api.kingdom.so/tiles/metadata/2.json",
          "https://api.kingdom.so/tiles/metadata/3.json",
          "https://api.kingdom.so/tiles/metadata/4.json"
        ]
      },
      "errors": {
        "ownerOf": "Too many values. Update configuration to explore fully",
        "tokenURI": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "OffRamp6",
      "address": "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287759,
      "values": {
        "commitStore": ["0x8DC27D621c41a32140e22E2a4dAf1259639BAe04"],
        "currentRateLimiterState": [
          "2000000000000000000000000",
          1717577159,
          true,
          "2000000000000000000000000",
          "555550000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04",
          "5009297550715157269",
          "15971525489660198786",
          "0xDEA286dc0E01Cb4755650A6CF8d1076b454eA1cb",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19864163,
          "0x00012962740daef02da7285c238225a40cb978cc657486d178d0248ff43f2f0a"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "",
      "address": "0xdFC2983401614118E1F2D5A5FD93C17Fecf8BdC6",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1696945031
    },
    {
      "name": "OnRamp6",
      "address": "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287375,
      "values": {
        "currentRateLimiterState": [
          "2000000000000000000000000",
          1717577159,
          true,
          "2000000000000000000000000",
          "555550000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          33596,
          16,
          6840,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 3649,
        "getNopFeesJuels": "3409912262770521639",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8284074688653310266",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "15971525489660198786"],
        "tokenAddresses": [
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xc719d010B63E5bbF2C0551872CD5316ED26AcD83",
          "0xB60acD2057067DC9ed8c083f5aa227a244044fD6",
          "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
          "0x38C2a4a7330b22788374B8Ff70BBa513C8D848cA",
          "0x72e364F2ABdC788b7E918bc238B21f109Cd634D7",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
          "0xDcEe70654261AF21C44c093C300eD3Bb97b78192",
          "0x8Fe815417913a93Ea99049FC0718ee1647A2a07c",
          "0x01aaC2b594F7bdBeC740F0F1AA22910EbB4B74Ab",
          "0x482dF7483a52496F4C65AB499966dfcdf4DDFDbc"
        ],
        "tokenPools": [
          "0x57D3bb46aF4A9b210FAE046796013090D428475F",
          "0xcd196D3905AfA0eCB4e0e62C2D7d6c52f9C73526",
          "0x2dd317E7e36544C5222818F228d607c209517470",
          "0x123ed44f3B863a684437Ebf18F8a744c250Ee5cA",
          "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0xA82A87a9b6550e89dd8a7C8a1E3e421974eaf858",
          "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA",
          "0x8272dbBA30f14900b22b4bfC8DB4E88B02bA413a",
          "0xb854536206EB6C1013b1642b576196E5EF19D7BA",
          "0x6ce8b799002BbECc7df94c18BF150B3b0E4A28F4",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
          "0xdCa0A2341ed5438E06B9982243808A76B9ADD6d0",
          "0x2764910B500689BbC9DB16c7AD61c6DD32FDE73B",
          "0x4C3aEe10334461F1f33c0A8843424de3F8fb7709",
          "0x0DAFed8dAF42040dB2c6227ca2AEB14D9C8B2602"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "OnRamp14",
      "address": "0xe2Eb229e88F56691e96bb98256707Bc62160FE73",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693422911,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getAllowList": [
          "0xAFa2c441a83bBCEDc2E8c5c6f66248aFD8b9af3d",
          "0x8EfcE1B976AaE2eB3B6283A5b4CC2019F8250362",
          "0xB66364b66ebf3D33e48945bc87C41f4607fBa792",
          "0x7A0a06735E41dc59F90228686f44bf2E13CC1724",
          "0x9479a56C7B00eafcDc3B9E7437ae5605Bb890B88",
          "0x48d2Ae51E665298000A42f924E7Ad09914f21821",
          "0x0E33075f2517a3F452DE8bD023E508D7899a9f9A",
          "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F",
          "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE",
          "0x0779960d4DC3e594B40b531dB9496E4620ed6757",
          "0x411C71E1A08B5c3831caFE68a808F00b8ED03188",
          "0xA473fDfdBBaf3a31f14F5b69f0Dfc31cc5a14e83",
          "0xec66b3e3a20b2c365e6C3AC6d915Df28c9cFDd34",
          "0x17483FC75528C53d21Ca7465484aee081BFf39Bd",
          "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB",
          "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818",
          "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61",
          "0x2824Ac0Eab15744396E763A698b55F4Fe983a757",
          "0xec0E656E2Dcd53f1BCdD6e68D42328f5c76652c0",
          "0x8fA510072009E71CfD447169AB5A84cAc394f58A",
          "0x51aEa7355F6E9179B2982934025BE0DD915A3B66",
          "0x26c59D687A0d61a86D2969C377c77B06005aA9D1",
          "0xc26d7EF337e01a5cC5498D3cc2ff0610761ae637",
          "0x4a3dF8cAe46765d33c2551ff5438a5C5FC44347c",
          "0x9efa0A617C0552F1558c95993aA8b8A68b3e709C",
          "0x15918ff7f6C44592C81d999B442956B07D26CC44",
          "0xB8C6E43f37E04A2411562a13c1C48B3ad5975cf4",
          "0xae559B5835c4F79f6bDDB64B04A7F651725A097D",
          "0x797de2909991C66C66D8e730C8385bbab8D18eA6",
          "0x14f94049397C3F1807c45B6f854Cb5F36bC4393B",
          "0x3FB4600736d306Ee2A89EdF0356D4272fb095768",
          "0x4fBefaf1BFf0130945C61603B97D38DD6e21f5Cf",
          "0xD4a2f6440C27B7C86997c7F52Fc092921753E15e",
          "0x2391878Ae8fB823c1Da3F7b240A77671ff7376cc",
          "0xa6C47D321bf4eB581a1654d1aca3A923CCA37b9F",
          "0x4077088c452485179Ff8f1a17b13e7Ec42013908",
          "0x1C911EEc9B3016716c5E708B02d3B4f679807954",
          "0x9d6A86FaCdCF24859a38e6b9A2Ef87610a4fC157",
          "0x61a3F54F79c2b6D05944f2dE814E59c49a6EbDDe",
          "0x017f5d204Bff12fbf417e1031beB10421fe7f3B8",
          "0xA7B67cD6B31b73772AE3C8ea784317207194A6f4",
          "0xA043DCC2149A27f5Ae783721C90268031A3eEC75",
          "0x97E047AAc81449fE6E1A190Ca249c318f206CBaa",
          "0x2aE1a97bD5A37750e17aB9f0ac64B715fdcBa7A5",
          "0x90302b41369796799A280313cE1b9917333dAAD1",
          "0x4e0961e762A78b4b325476c167249C872E567A9c",
          "0xE6F44fc46fB2bd8D93ae084D0b129351ff7fF436",
          "0xF3ae12C1e1Ce989A020EB056628d762be8dCC121",
          "0x45196c7C4bdFC0d2327d5fb034C27D1acCBa0606",
          "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E",
          "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5"
        ],
        "getAllowListEnabled": true,
        "getDynamicConfig": [
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          1,
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          30000,
          2000000
        ],
        "getExpectedNextSequenceNumber": 554,
        "getNopFeesJuels": "338109772018620109",
        "getNops": [[], 0],
        "getStaticConfig": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "5009297550715157269",
          "15971525489660198786",
          200000,
          "20000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711"
        ],
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8119545075890395019",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOnRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "LockReleaseTokenPool",
      "address": "0xE2F0dad85D504aa046b9F704a426fD6C5493e366",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1711406435,
      "values": {
        "canAcceptLiquidity": false,
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getLockReleaseInterfaceId": "0x98a47177",
        "getRateLimitAdmin": "0x0000000000000000000000000000000000000001",
        "getRebalancer": "0x0000000000000000000000000000000000000001",
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "getSupportedChains": ["4949039107694359620"],
        "getToken": "0x49446A0874197839D15395B908328a74ccc96Bc0",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "LockReleaseTokenPool 1.4.0"
      }
    },
    {
      "name": "RouteProcessor4",
      "address": "0xe43ca1Dee3F0fc1e2df73A0745674545F11A59F5",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1708848791,
      "values": {
        "bentoBox": "0x0000000000000000000000000000000000000000",
        "owner": "0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7"
      }
    },
    {
      "name": "Router2",
      "address": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1688661659,
      "values": {
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getWrappedNative": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "MAX_RET_BYTES": 132,
        "offRamps": [],
        "onRamps": {
          "3734403246176062136": "0x0000000000000000000000000000000000000000",
          "6433500567565415381": "0x0000000000000000000000000000000000000000",
          "4051577828743386545": "0x0000000000000000000000000000000000000000",
          "4949039107694359620": "0x0000000000000000000000000000000000000000",
          "11344663589394136015": "0x0000000000000000000000000000000000000000",
          "15971525489660198786": "0x0000000000000000000000000000000000000000"
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "Router 1.0.0"
      },
      "derivedName": "Router"
    },
    {
      "name": "SwapRouter",
      "address": "0xE592427A0AEce92De3Edee1F18E0157C05861564",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1620156641,
      "values": {
        "factory": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
        "WETH9": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "ERC20MintablePauseableUpgradeable",
      "address": "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a",
        "admin": "0xf70B2473e7808eDAeA4A5Cea95996A9B1843D96C"
      },
      "implementations": ["0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a"],
      "sinceTimestamp": 1695180011,
      "values": {
        "cap": 0,
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "eip712Domain": [
          "0x0f",
          "PermitToken",
          "1.0",
          1,
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "implementation": "0x0000000000000000000000000000000000000000",
        "MINTER_ROLE": "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
        "name": "Sumerian BTC",
        "paused": false,
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "symbol": "suBTC",
        "totalSupply": 0
      }
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xE8af3b68eDfFf65Ce48648009982380701f09B92",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1717183115,
      "values": {
        "commitStore": ["0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e"],
        "currentRateLimiterState": [
          "2000000000000000000000000",
          1717577159,
          true,
          "2000000000000000000000000",
          "555550000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e",
          "5009297550715157269",
          "7264351850409363825",
          "0xbD5F9C193a7fEF5D578C55Ddfe4d08d6BCc15648",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          2,
          20020991,
          "0x000199913a98f9c77db76d84154ab452ea930b5006aa347605a27d79012f8d56"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      }
    },
    {
      "name": "OffRamp2",
      "address": "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1710866867,
      "values": {
        "commitStore": ["0x118a9389960F86390A4F14ce4C95D6ff076C6bFC"],
        "currentRateLimiterState": [
          "100000000000000000000000",
          1717577159,
          true,
          "100000000000000000000000",
          "167000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC",
          "5009297550715157269",
          "465200170687744372",
          "0x0F246651F1c2275B4E14d8ae166D1fd3Af05c405",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          4,
          19611170,
          "0x00015a84bd4c293e0aeabc615f14bd7aadf65332baf9ddf83f7d5a1826d3da77"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "BurnMintTokenPool",
      "address": "0xeaE89E53B8317CaB04165F5323285252D5669B73",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1707769475,
      "values": {
        "getAllowList": [],
        "getAllowListEnabled": false,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getOffRamps": ["0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"],
        "getOnRamps": ["0x925228D7B82d883Dde340A55Fe8e6dA56244A22C"],
        "getToken": "0x98C6616F1CC0D3E938A16200830DD55663dd7DD3",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "BurnMintTokenPool 1.2.0"
      }
    },
    {
      "name": "",
      "address": "0xec0E656E2Dcd53f1BCdD6e68D42328f5c76652c0",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700335979
    },
    {
      "name": "",
      "address": "0xec66b3e3a20b2c365e6C3AC6d915Df28c9cFDd34",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697300783
    },
    {
      "name": "CrossChainControllerUpgradeRev2",
      "address": "0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x28559c2F4B038b1E836fA419DCcDe7454d8Fe215",
        "admin": "0xD3cF979e676265e4f6379749DECe4708B9A22476"
      },
      "implementations": ["0x28559c2F4B038b1E836fA419DCcDe7454d8Fe215"],
      "sinceTimestamp": 1694160179,
      "values": {
        "getConfigurationByChain": [
          [0, 0],
          [0, 0],
          [0, 0],
          [0, 0],
          [0, 0]
        ],
        "getCurrentEnvelopeNonce": 469,
        "getCurrentTransactionNonce": 469,
        "getForwarderBridgeAdaptersByChain": [
          [],
          [
            [
              "0x6cfbd2aA4691fc18B9C209bDd43DC3943C228FCf",
              "0x6cfbd2aA4691fc18B9C209bDd43DC3943C228FCf"
            ]
          ],
          [],
          [],
          []
        ],
        "getReceiverBridgeAdaptersByChain": [[], [], [], [], []],
        "getSupportedChains": [137, 43114],
        "guardian": "0xb812d0944f8F581DfAA3a93Dda0d22EcEf51A9CF",
        "owner": "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A",
        "whoCanRescue": "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A"
      },
      "errors": {
        "getConfigurationByChain": "Too many values. Update configuration to explore fully",
        "getForwarderBridgeAdaptersByChain": "Too many values. Update configuration to explore fully",
        "getReceiverBridgeAdaptersByChain": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1715889491,
      "values": {
        "currentRateLimiterState": [
          "2000000000000000000000000",
          1717577159,
          true,
          "2000000000000000000000000",
          "555550000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          0,
          16,
          0,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 13,
        "getNopFeesJuels": "194829539495125684",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "9691026022252784905",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "1346049177634351622"],
        "tokenAddresses": [],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      }
    },
    {
      "name": "CCIPHeaderReporter",
      "address": "0xeEFD0D67E4eF9330870961C38a3e25ECE369B141",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701257435,
      "values": {
        "ADAPTER_CHAIN": 43114,
        "CCIP_ADAPTER_CHAIN": "6433500567565415381",
        "CCIP_ROUTER": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "HEADER_STORAGE": "0x22F1fc71A505c0b2bf4D5075801cc5E0ec84B09e",
        "PROVIDER": "ccip"
      }
    },
    {
      "name": "KlasterGatewaySingleton",
      "address": "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698751439,
      "values": {
        "CCIP_MANAGER_ROLE": "0x6345c8a37e6dd89e52f65ade6338347620ff8f8c79b86d67c52eb45b0cf457bf",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "FEE_MANAGER_ROLE": "0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c",
        "feePercentage": 25,
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "HARVEST_MANAGER_ROLE": "0x5e63ccb182cbf95a0325198ff9446f31e71dd50ca9c82361f97e85a24288d0fa",
        "relayerChainSelector": "5009297550715157269",
        "thisChainSelector": "5009297550715157269"
      }
    },
    {
      "name": "OffRamp8",
      "address": "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701287843,
      "values": {
        "commitStore": ["0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749"],
        "currentRateLimiterState": [
          "5000000000000000000000000",
          1717577159,
          true,
          "5000000000000000000000000",
          "1389000000000000000000"
        ],
        "getDynamicConfig": [
          28800,
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          1,
          30000,
          200000
        ],
        "getStaticConfig": [
          "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749",
          "5009297550715157269",
          "4949039107694359620",
          "0xCe11020D56e5FDbfE46D9FC3021641FfbBB5AdEE",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": [
          6,
          19864128,
          "0x0001e7ed5d54a80493d22c17c148d7c20f6b349cf00ab4a5effec54aebdb7084"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "ServiceFeeCollector",
      "address": "0xf068cc770f32042Ff4a8fD196045641234dFaa47",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1687180295,
      "values": {
        "owner": "0x08647cc950813966142A416D40C382e2c5DB73bB",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "MayanSwap",
      "address": "0xF3f04555f8FdA510bfC77820FD6eB8446f59E72d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1692360071,
      "values": {
        "getWeth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "isPaused": false
      }
    },
    {
      "name": "OnRamp8",
      "address": "0xF538dA6c673A30338269655f4e019B71ba58CFd4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1710865355,
      "values": {
        "currentRateLimiterState": [
          "100000000000000000000000",
          1717577159,
          true,
          "100000000000000000000000",
          "167000000000000000000"
        ],
        "getDynamicConfig": [
          "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          1,
          350000,
          16,
          0,
          16,
          0,
          "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          30000,
          3000000
        ],
        "getExpectedNextSequenceNumber": 12,
        "getNopFeesJuels": "221371022279380669",
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8693707096878920223",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["5009297550715157269", "465200170687744372"],
        "tokenAddresses": ["0x0AA1e96D2a46Ec6beB2923dE1E61Addf5F5f1dce"],
        "tokenPools": ["0xa17698199466E71bAFC31F226db341B7840701E7"],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp"
    },
    {
      "name": "ProxyAdmin",
      "address": "0xf70B2473e7808eDAeA4A5Cea95996A9B1843D96C",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1665182363,
      "values": {
        "owner": "0xe04Cd8884098Ac5f8237642B8e999269468092aA"
      }
    },
    {
      "name": "CCIPTokenProxy",
      "address": "0xF9F5bcd3a50653387ee0b9d60C1905854093e8Fb",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1692780947,
      "values": {
        "getRouter": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
        "getToken": "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0xfA3430d84324ABC9ac8AAf30B2D26260F5172ad0",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "2 of 4 (50%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1642430057,
      "values": {
        "domainSeparator": "0x0eaefd0eb338f4e2e18c889139311ccaae13b4148862802861e15aef8a7c5da0",
        "getChainId": 1,
        "getOwners": [
          "0x53A26f48ED901336D7C165B85E6F43d9F8dBeAA7",
          "0xAF43958ad62389BE3E0B553dFd259Ec335814c1C",
          "0xc12F6A2D93C0788366FC91aeBf21b33CCCb0c0d8",
          "0xE98f781e89A5b108893244b03a7c8BC69625E756"
        ],
        "getThreshold": 2,
        "nonce": 12,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "OffRamp14",
      "address": "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1693423223,
      "values": {
        "currentRateLimiterState": [
          "600000000000000000000000",
          1717577159,
          true,
          "600000000000000000000000",
          "167000000000000000000"
        ],
        "getDestinationTokens": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8"
        ],
        "getDynamicConfig": [
          28800,
          "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
          "0x020082A7a9c2510e1921116001152DEE4da81985",
          1,
          30000
        ],
        "getStaticConfig": [
          "0x2D1708ff2a15adbE313eA8C6035aA24d0FBA1c77",
          "5009297550715157269",
          "15971525489660198786",
          "0xD44371bFDe87f2db3eA6Df242091351A06c2e181",
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "getSupportedTokens": [
          "0x88Fb150BDc53A65fe94Dea0c9BA0a6dAf8C6e196",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8"
        ],
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "getTransmitters": [
          "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
          "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
          "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
          "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
          "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
          "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
          "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
          "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
          "0xc333b76845bDF806369EF0F00134559988aa985C",
          "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
          "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
          "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
          "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
          "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
          "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
          "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8"
        ],
        "latestConfigDetails": [
          7,
          18631560,
          "0x0001b2e5a9113e36ae6a9e99cdb3af31ee3b1e07c2b928255ec2cab3d9b0c3d9"
        ],
        "latestConfigDigestAndEpoch": [
          true,
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.0.0"
      },
      "derivedName": "EVM2EVMOffRamp"
    },
    {
      "name": "Proxy",
      "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1682626979
    }
  ],
  "eoas": [
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000001",
    "0x00058e802800f23319E166Bc3Fa0003D5Ab6a055",
    "0x001E0d294383d5b4136476648aCc8D04a6461Ae3",
    "0x009439010074A20c2ec855439A9935f781Cbd11A",
    "0x010dA5FF62B6e45f89FA7B2d8CEd5a8b5754eC1b",
    "0x01430Aa44F14007c8d5Ddc011FA63dCcE7878dC8",
    "0x017f5d204Bff12fbf417e1031beB10421fe7f3B8",
    "0x037465bF6a4A8D7F552AE18046478C6A727178F3",
    "0x0669d4d05Fc5bCF261DBADc3b41854a6ee7E2E85",
    "0x0921E157b690c4F89F7C2a210cFd8bF3964F6776",
    "0x0Bf40b034872D0b364f3DCec04C7434a4Da1C8d9",
    "0x0F246651F1c2275B4E14d8ae166D1fd3Af05c405",
    "0x111f1B41f702c20707686769a4b7f25c56C533B2",
    "0x125C7562f84be4CfE1e6f4DBc1f1A1ddC4480914",
    "0x14f94049397C3F1807c45B6f854Cb5F36bC4393B",
    "0x15918ff7f6C44592C81d999B442956B07D26CC44",
    "0x161D61e30284A33Ab1ed227beDcac6014877B3DE",
    "0x162A8E51E69D72a4bA462220aE9A2E94e44d753F",
    "0x183A96629fF566e7AA8AfA38980Cd037EB40A59A",
    "0x190bcE84CF2d500B878966F4Cf98a50d78f2675E",
    "0x1c6460cfe32916196f6977b5442b0F98A826D880",
    "0x1C911EEc9B3016716c5E708B02d3B4f679807954",
    "0x1F5C65a8bBE108c67AF559863F4C6B57E17aAA02",
    "0x211BEd4bd65d4c01643377d95491B8c4B533EAAD",
    "0x2391878Ae8fB823c1Da3F7b240A77671ff7376cc",
    "0x26c59D687A0d61a86D2969C377c77B06005aA9D1",
    "0x27C96A8a2f70a8408aD6c620717a3bDaA54bb10b",
    "0x27f485b62C4A7E635F561A87560Adf5090239E93",
    "0x29DaCdF7cCaDf4eE67c923b4C22255A4B2494eD7",
    "0x2aE1a97bD5A37750e17aB9f0ac64B715fdcBa7A5",
    "0x316D2E43270ff4091Ca5d269c0E5cD8363524C91",
    "0x31e16F375531F8d77E027ff935e1114eD62D797b",
    "0x31eD28c2549e0195c4A405B71e4f18EfB935bE6f",
    "0x31F8F44196d57eA2bC9A4E6CAcbFcAF7868F55C6",
    "0x358a85e032aA9507a1303683b2B6A1d1cac3c252",
    "0x36Dd4C9151a3bb9aAcB18547Aa9743E2fFec3590",
    "0x3D3817270db2b89e9F68bA27297fb4672082f942",
    "0x3FB4600736d306Ee2A89EdF0356D4272fb095768",
    "0x4077088c452485179Ff8f1a17b13e7Ec42013908",
    "0x41eAdbc688797a02bfaBE48472995833489ce69D",
    "0x444a69854C78913c60560EB628Ef633a1D659728",
    "0x4564A9c6061f6f1F2Eadb954B1b3C241D2DC984e",
    "0x465Cb88B0Bf2A984a7C6c053262C8137D667bEaE",
    "0x47044eE2F23001F8a03FB2f7d2ce6645aDA4D12A",
    "0x47C7c921ADf8b09e24EfAc584E2064e34CBb1b6F",
    "0x4a3dF8cAe46765d33c2551ff5438a5C5FC44347c",
    "0x4aA5bF962852DcC59695F600d346D3F751B0D920",
    "0x4e0961e762A78b4b325476c167249C872E567A9c",
    "0x4fBefaf1BFf0130945C61603B97D38DD6e21f5Cf",
    "0x51aEa7355F6E9179B2982934025BE0DD915A3B66",
    "0x53482ACf424d4196b0F8EbdD6F8A15eb8516FB88",
    "0x53A26f48ED901336D7C165B85E6F43d9F8dBeAA7",
    "0x55183Db1d2aE0b63e4c92A64bEF2CBfc2032B127",
    "0x59cb21A5565082CAE08A66f4230b2d4CDfC154dd",
    "0x59eCf48345A221E0731E785ED79eD40d0A94E2A5",
    "0x5A5A8C7E8448484Cf3458d7f426876E79c529f41",
    "0x5aC189Db4351787516d2E6Fc628BF762ce684326",
    "0x603d50BAd151Da8becf405E51a8c4Abc8bA1c95E",
    "0x61a3F54F79c2b6D05944f2dE814E59c49a6EbDDe",
    "0x65cBcdbE95567A8F9519242f9C52F65E8067021B",
    "0x6a60CC0C310e4F99b32C60Eee4180eb6DED02eaE",
    "0x6A985273Db73f21D6a74Ee9f76725112819BD950",
    "0x6b0b72E63764101Fc4d5BD914B107987041578C4",
    "0x6dcAB4d155CFfa74E65056fdC94164732D611E85",
    "0x6Fa60A88b42AFb0aEe6488826A58864B192442ad",
    "0x7052cB84079905400ea52B635cAb6a275fDA8823",
    "0x7420879541250749544CF8180B664E617f3Fd49F",
    "0x745748bcFd8F9c2De519a71D789be8A63dd7d66C",
    "0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514",
    "0x77eeaf07C050a690f9B3C2E8e7642Cc3CBEcEEb4",
    "0x797de2909991C66C66D8e730C8385bbab8D18eA6",
    "0x7A0a06735E41dc59F90228686f44bf2E13CC1724",
    "0x7Ab003a9c7Cd3016e90a03A4A608975a6FAC40B4",
    "0x7AF3C2b54eE2f170b8104222eB4EDf2511f5d9d0",
    "0x817ae4109dC0f21E437b94c899962690514Ba09f",
    "0x88Fb150BDc53A65fe94Dea0c9BA0a6dAf8C6e196",
    "0x8958ca82F35933895Ba083E1dC8d6AB37ceF6686",
    "0x8a9A13A106cB89E15410B2AB4488135155032169",
    "0x8ebD04b2fbA00418Be00329146837dcE51F02c00",
    "0x8EfcE1B976AaE2eB3B6283A5b4CC2019F8250362",
    "0x8fA510072009E71CfD447169AB5A84cAc394f58A",
    "0x90302b41369796799A280313cE1b9917333dAAD1",
    "0x90f91a0fFDC93a11c045b3155F0b3cc0D9fB9ef6",
    "0x9479a56C7B00eafcDc3B9E7437ae5605Bb890B88",
    "0x95b1fF7fc76b8293Ea57e342b969fdd23B5dAC01",
    "0x96D16c491aDA31f609eC72Ae33018b8B7e80EB41",
    "0x96d1D86b1BEd64053410FdCc2E3585EB578DdE1f",
    "0x97E047AAc81449fE6E1A190Ca249c318f206CBaa",
    "0x982F264ce97365864181df65dF4931C593A515ad",
    "0x98dd9E9b8AE458225119Ab5B8c947A9d1cd0B648",
    "0x9986EE0C3Eea15DCf8642b56179652F9589B95dB",
    "0x9aDa42ed163bB45ea2FF11c06c59cF27d27E6cba",
    "0x9cCbFD17FA284f36c2ff503546160B256d1CD3D1",
    "0x9cf154D032feBE9463fb0Ec7b3319ad579E5beB9",
    "0x9D219125a0CE10241b4eC1280c2F880475f172f1",
    "0x9efa0A617C0552F1558c95993aA8b8A68b3e709C",
    "0xA043DCC2149A27f5Ae783721C90268031A3eEC75",
    "0xa06B89B08F038Aff4F81ce0A45c5aCb040477c3b",
    "0xA39B7c0f08e4727c8325b4ad043513AA5185a4E2",
    "0xa6C47D321bf4eB581a1654d1aca3A923CCA37b9F",
    "0xA7B67cD6B31b73772AE3C8ea784317207194A6f4",
    "0xa968cf59aB2BaE618f6eE0a80EcBd5b242ebE991",
    "0xAB35418fB9f8B13E3e6857c36A0769b9F94a87EC",
    "0xad1b1F2A6DD55627e3893B771A00Cd43F69DcE35",
    "0xAE0e486Fa6577188d586A8e4c12360FB82E2a386",
    "0xae559B5835c4F79f6bDDB64B04A7F651725A097D",
    "0xAe735fd5e74887064DFf99C637f291caE5485A75",
    "0xAF43958ad62389BE3E0B553dFd259Ec335814c1C",
    "0xAFa2c441a83bBCEDc2E8c5c6f66248aFD8b9af3d",
    "0xaFB2820316e7Bc5Ef78d295AB9b8Bb2257534576",
    "0xb0Ea8E1bE37F346C7EA7ec708834D0db18A17361",
    "0xB66364b66ebf3D33e48945bc87C41f4607fBa792",
    "0xB8C6E43f37E04A2411562a13c1C48B3ad5975cf4",
    "0xbD4dAf39E552C29648C9Ec78e2f671373b1347f2",
    "0xbD5F9C193a7fEF5D578C55Ddfe4d08d6BCc15648",
    "0xBd6934b2DF4B6926FA7161f72A7DC599b9A2E581",
    "0xBDB624CD1051F687f116bB0c642330B2aBdfcc06",
    "0xc12F6A2D93C0788366FC91aeBf21b33CCCb0c0d8",
    "0xc26d7EF337e01a5cC5498D3cc2ff0610761ae637",
    "0xc333b76845bDF806369EF0F00134559988aa985C",
    "0xC51Caf7ab90cf6b5cC03b81A37235054fA2d0000",
    "0xC51D3470693BC049809A1c515606124c7C75908d",
    "0xc809b0216B149cc301Cb203EDD84FCdB8F15C4ed",
    "0xcD5868dD3dEe0f0A31c38D088dd562F5d4ea2386",
    "0xCe11020D56e5FDbfE46D9FC3021641FfbBB5AdEE",
    "0xCEED45aD0f1c8E621eef28a4643B06AF04A6dEB0",
    "0xD0701FcC7818c31935331B02Eb21e91eC71a1704",
    "0xd086b29d92C8D15d187e8c65B79Ba0C44C8326c2",
    "0xD224b2b69CC45D5B85317D03729aC39aDb73b36B",
    "0xD44371bFDe87f2db3eA6Df242091351A06c2e181",
    "0xD4a2f6440C27B7C86997c7F52Fc092921753E15e",
    "0xd7d7f77069aCEF3116B6D0eDBEA48e45aCc3562e",
    "0xDA80050Ed4F50033949608208f79EE43Ab91dF55",
    "0xdc5fbe85b0b7d6c9980275f25b333e1F34538BF1",
    "0xdc956B7135AA7a99F8080e54dEf4148f8e54bCa4",
    "0xDEA286dc0E01Cb4755650A6CF8d1076b454eA1cb",
    "0xDF812B91D8bf6DF698BFD1D8047839479Ba63420",
    "0xE062e7D123AC8dF480C56147f911144F55C10f88",
    "0xE0a8ABcf65e6212abFd659d5D857CFbA62a14771",
    "0xE1B019F6A0423d29EA9d8f6F5F385BF5010CCccE",
    "0xE2fEfe09E74b921CbbFF229E7cD40009231501CA",
    "0xE336C8e4B6649c82A16a7c78577169A24Baa7fff",
    "0xE6F44fc46fB2bd8D93ae084D0b129351ff7fF436",
    "0xE98f781e89A5b108893244b03a7c8BC69625E756",
    "0xEAF6183bAb3eFD3bF856Ac5C058431C8592394d6",
    "0xef0F8397300189D680534dDe7276A379D8A7B19f",
    "0xF0A9c943b6229450c9e95a05b66811c2905F0EA1",
    "0xF3ae12C1e1Ce989A020EB056628d762be8dCC121",
    "0xf547696fF576aeA0D2C8e41D467daD4CeE904513",
    "0xf9A2375d501049E2c6f358548c34867216927ebF",
    "0xfB76F41bc20292E0bba9FB5c1B0aBD8174ad433e",
    "0xfb9Fed8cB962548A11fE7F6F282949061395c7F5",
    "0xfc038715c79Ebcf7F9ee5723E466454B21434157",
    "0xFc52B2196a94D08fc9614b8039821bcE03bF58E8",
    "0xFd77c53AA4eF0E3C01f5Ac012BF7Cc7A3ECf5168",
    "0xFdC770353dC0bFCE80a17Ab8a6a2E7d80590f1Ba"
  ],
  "abis": {
    "0x020082A7a9c2510e1921116001152DEE4da81985": [
      "constructor(address[] priceUpdaters, address[] feeTokens, uint32 stalenessThreshold)",
      "error ChainNotSupported(uint64 chain)",
      "error InvalidStalenessThreshold()",
      "error OnlyCallableByUpdaterOrOwner()",
      "error StaleGasPrice(uint64 destChainSelector, uint256 threshold, uint256 timePassed)",
      "error StaleTokenPrice(address token, uint256 threshold, uint256 timePassed)",
      "error TokenNotSupported(address token)",
      "event FeeTokenAdded(address indexed feeToken)",
      "event FeeTokenRemoved(address indexed feeToken)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PriceUpdaterRemoved(address indexed priceUpdater)",
      "event PriceUpdaterSet(address indexed priceUpdater)",
      "event UsdPerTokenUpdated(address indexed token, uint256 value, uint256 timestamp)",
      "event UsdPerUnitGasUpdated(uint64 indexed destChain, uint256 value, uint256 timestamp)",
      "function acceptOwnership()",
      "function applyFeeTokensUpdates(address[] feeTokensToAdd, address[] feeTokensToRemove)",
      "function applyPriceUpdatersUpdates(address[] priceUpdatersToAdd, address[] priceUpdatersToRemove)",
      "function convertTokenAmount(address fromToken, uint256 fromTokenAmount, address toToken) view returns (uint256)",
      "function getDestinationChainGasPrice(uint64 destChainSelector) view returns (tuple(uint192 value, uint64 timestamp))",
      "function getFeeTokens() view returns (address[])",
      "function getPriceUpdaters() view returns (address[])",
      "function getStalenessThreshold() view returns (uint128)",
      "function getTokenAndGasPrices(address token, uint64 destChainSelector) view returns (uint192 tokenPrice, uint192 gasPriceValue)",
      "function getTokenPrice(address token) view returns (tuple(uint192 value, uint64 timestamp))",
      "function getTokenPrices(address[] tokens) view returns (tuple(uint192 value, uint64 timestamp)[])",
      "function getValidatedTokenPrice(address token) view returns (uint192)",
      "function owner() view returns (address)",
      "function transferOwnership(address to)",
      "function updatePrices(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates)"
    ],
    "0x02063A0d7a222c16D5b63213262596B83b07150c": [
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidConfig()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error InvalidRouter()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event AnyMappingUpdated(tuple(address tokenAddress, address anyTokenAddress)[] mappings)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event MultichainInitialized()",
      "event MultichainRoutersUpdated(address[] routers, bool[] allowed)",
      "function initMultichain(address anyNative, address[] routers)",
      "function registerRouters(address[] routers, bool[] allowed)",
      "function startBridgeTokensViaMultichain(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address router) _multichainData) payable",
      "function swapAndStartBridgeTokensViaMultichain(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address router) _multichainData) payable",
      "function updateAddressMappings(tuple(address tokenAddress, address anyTokenAddress)[] mappings)"
    ],
    "0x02777053d6764996e594c3E88AF1D58D5363a2e6": [
      "constructor(address link, address linkEthFeed, address fastGasFeed, tuple(uint32 paymentPremiumPPB, uint32 flatFeeMicroLink, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, uint16 gasCeilingMultiplier, uint96 minUpkeepSpend, uint32 maxPerformGas, uint256 fallbackGasPrice, uint256 fallbackLinkPrice, address transcoder, address registrar) config)",
      "error ArrayHasNoEntries()",
      "error CannotCancel()",
      "error DuplicateEntry()",
      "error GasLimitCanOnlyIncrease()",
      "error GasLimitOutsideRange()",
      "error IndexOutOfRange()",
      "error InsufficientFunds()",
      "error InvalidDataLength()",
      "error InvalidPayee()",
      "error InvalidRecipient()",
      "error KeepersMustTakeTurns()",
      "error MigrationNotPermitted()",
      "error NotAContract()",
      "error OnlyActiveKeepers()",
      "error OnlyCallableByAdmin()",
      "error OnlyCallableByLINKToken()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrRegistrar()",
      "error OnlyCallableByPayee()",
      "error OnlyCallableByProposedPayee()",
      "error OnlySimulatedBackend()",
      "error ParameterLengthError()",
      "error PaymentGreaterThanAllLINK()",
      "error TargetCheckReverted(bytes reason)",
      "error TranscoderNotSet()",
      "error UpkeepNotActive()",
      "error UpkeepNotCanceled()",
      "error UpkeepNotNeeded()",
      "error ValueNotChanged()",
      "event ConfigSet(tuple(uint32 paymentPremiumPPB, uint32 flatFeeMicroLink, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, uint16 gasCeilingMultiplier, uint96 minUpkeepSpend, uint32 maxPerformGas, uint256 fallbackGasPrice, uint256 fallbackLinkPrice, address transcoder, address registrar) config)",
      "event FundsAdded(uint256 indexed id, address indexed from, uint96 amount)",
      "event FundsWithdrawn(uint256 indexed id, uint256 amount, address to)",
      "event KeepersUpdated(address[] keepers, address[] payees)",
      "event OwnerFundsWithdrawn(uint96 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event PayeeshipTransferRequested(address indexed keeper, address indexed from, address indexed to)",
      "event PayeeshipTransferred(address indexed keeper, address indexed from, address indexed to)",
      "event PaymentWithdrawn(address indexed keeper, uint256 indexed amount, address indexed to, address payee)",
      "event Unpaused(address account)",
      "event UpkeepCanceled(uint256 indexed id, uint64 indexed atBlockHeight)",
      "event UpkeepGasLimitSet(uint256 indexed id, uint96 gasLimit)",
      "event UpkeepMigrated(uint256 indexed id, uint256 remainingBalance, address destination)",
      "event UpkeepPerformed(uint256 indexed id, bool indexed success, address indexed from, uint96 payment, bytes performData)",
      "event UpkeepReceived(uint256 indexed id, uint256 startingBalance, address importedFrom)",
      "event UpkeepRegistered(uint256 indexed id, uint32 executeGas, address admin)",
      "function FAST_GAS_FEED() view returns (address)",
      "function LINK() view returns (address)",
      "function LINK_ETH_FEED() view returns (address)",
      "function acceptOwnership()",
      "function acceptPayeeship(address keeper)",
      "function addFunds(uint256 id, uint96 amount)",
      "function cancelUpkeep(uint256 id)",
      "function checkUpkeep(uint256 id, address from) returns (bytes performData, uint256 maxLinkPayment, uint256 gasLimit, uint256 adjustedGasWei, uint256 linkEth)",
      "function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) view returns (uint256[])",
      "function getKeeperInfo(address query) view returns (address payee, bool active, uint96 balance)",
      "function getMaxPaymentForGas(uint256 gasLimit) view returns (uint96 maxPayment)",
      "function getMinBalanceForUpkeep(uint256 id) view returns (uint96 minBalance)",
      "function getPeerRegistryMigrationPermission(address peer) view returns (uint8)",
      "function getState() view returns (tuple(uint32 nonce, uint96 ownerLinkBalance, uint256 expectedLinkBalance, uint256 numUpkeeps) state, tuple(uint32 paymentPremiumPPB, uint32 flatFeeMicroLink, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, uint16 gasCeilingMultiplier, uint96 minUpkeepSpend, uint32 maxPerformGas, uint256 fallbackGasPrice, uint256 fallbackLinkPrice, address transcoder, address registrar) config, address[] keepers)",
      "function getUpkeep(uint256 id) view returns (address target, uint32 executeGas, bytes checkData, uint96 balance, address lastKeeper, address admin, uint64 maxValidBlocknumber, uint96 amountSpent)",
      "function migrateUpkeeps(uint256[] ids, address destination)",
      "function onTokenTransfer(address sender, uint256 amount, bytes data)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function performUpkeep(uint256 id, bytes performData) returns (bool success)",
      "function receiveUpkeeps(bytes encodedUpkeeps)",
      "function recoverFunds()",
      "function registerUpkeep(address target, uint32 gasLimit, address admin, bytes checkData) returns (uint256 id)",
      "function setConfig(tuple(uint32 paymentPremiumPPB, uint32 flatFeeMicroLink, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, uint16 gasCeilingMultiplier, uint96 minUpkeepSpend, uint32 maxPerformGas, uint256 fallbackGasPrice, uint256 fallbackLinkPrice, address transcoder, address registrar) config)",
      "function setKeepers(address[] keepers, address[] payees)",
      "function setPeerRegistryMigrationPermission(address peer, uint8 permission)",
      "function setUpkeepGasLimit(uint256 id, uint32 gasLimit)",
      "function transferOwnership(address to)",
      "function transferPayeeship(address keeper, address proposed)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function upkeepTranscoderVersion() view returns (uint8)",
      "function withdrawFunds(uint256 id, address to)",
      "function withdrawOwnerFunds()",
      "function withdrawPayment(address from, address to)"
    ],
    "0x02FFdaCeb369b54255b6f20d640C5829F029061F": [
      "constructor(address _rewards)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function rewards() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function withdrawRewards()"
    ],
    "0x031D3F8Aa6D7dBC3d97050845eb776b17464E5E6": [
      "error InvalidChain(uint64 chainSelector)",
      "event ChainAdded(uint64 chainId, bytes description)",
      "event Initialized(uint8 version)",
      "event MessageSent(bytes32 messageId)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CONTRACT_ADMIN() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EVM_EXTRA_ARGS_V1_TAG() view returns (bytes4)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize()",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function s_chains(uint64) view returns (bytes)",
      "function sendDataPayFeeToken(uint64 destinationChainSelector, bytes receiver, bytes data) returns (bytes32 messageId)",
      "function sendDataPayFeeTokenWithGas(uint64 destinationChainSelector, bytes receiver, bytes data, uint256 gasLimit) returns (bytes32 messageId)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0x047204D42d93a6471F7c9Ec94292B4B00E8e0786": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x04ec553dC65312C85Cd914927B5f45112F8FE37C": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address _spender, uint256 _value) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function initialize()",
      "function mint(address account, uint256 amount) returns (bool)",
      "function minter() view returns (address)",
      "function name() view returns (string)",
      "function setMinter(address _minter)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address _to, uint256 _value) returns (bool)",
      "function transferFrom(address _from, address _to, uint256 _value) returns (bool)"
    ],
    "0x057152DB365B47851B0A0bd431644b8eE21fE1b4": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0x06f9817a91595E1B595F789Fb91529e8651da9B8": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x0779960d4DC3e594B40b531dB9496E4620ed6757": [
      "constructor(address router, address token)",
      "error FeeRefundFail()",
      "error InvalidData()",
      "error InvalidExtraArgs()",
      "error InvalidFeeToken()",
      "error InvalidGasLimit()",
      "error InvalidToken()",
      "error InvalidValue()",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32 messageId)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getRouter() view returns (address)",
      "function getToken() view returns (address)"
    ],
    "0x090e074bc934c4D8B84e168cb6597e87Da0C019b": [
      "constructor(address _gatewayRouter, address _inbox)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaArbitrumBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 maxSubmissionCost, uint256 maxGas, uint256 maxGasPrice) _arbitrumData) payable",
      "function swapAndStartBridgeTokensViaArbitrumBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 maxSubmissionCost, uint256 maxGas, uint256 maxGasPrice) _arbitrumData) payable"
    ],
    "0x0a992d191DEeC32aFe36203Ad87D7d289a738F81": [
      "constructor(uint32 _localDomain, address _attester, uint32 _maxMessageBodySize, uint32 _version)",
      "event AttesterDisabled(address indexed attester)",
      "event AttesterEnabled(address indexed attester)",
      "event AttesterManagerUpdated(address indexed previousAttesterManager, address indexed newAttesterManager)",
      "event MaxMessageBodySizeUpdated(uint256 newMaxMessageBodySize)",
      "event MessageReceived(address indexed caller, uint32 sourceDomain, uint64 indexed nonce, bytes32 sender, bytes messageBody)",
      "event MessageSent(bytes message)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Pause()",
      "event PauserChanged(address indexed newAddress)",
      "event RescuerChanged(address indexed newRescuer)",
      "event SignatureThresholdUpdated(uint256 oldSignatureThreshold, uint256 newSignatureThreshold)",
      "event Unpause()",
      "function acceptOwnership()",
      "function attesterManager() view returns (address)",
      "function disableAttester(address attester)",
      "function enableAttester(address newAttester)",
      "function getEnabledAttester(uint256 index) view returns (address)",
      "function getNumEnabledAttesters() view returns (uint256)",
      "function isEnabledAttester(address attester) view returns (bool)",
      "function localDomain() view returns (uint32)",
      "function maxMessageBodySize() view returns (uint256)",
      "function nextAvailableNonce() view returns (uint64)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pauser() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function receiveMessage(bytes message, bytes attestation) returns (bool success)",
      "function replaceMessage(bytes originalMessage, bytes originalAttestation, bytes newMessageBody, bytes32 newDestinationCaller)",
      "function rescueERC20(address tokenContract, address to, uint256 amount)",
      "function rescuer() view returns (address)",
      "function sendMessage(uint32 destinationDomain, bytes32 recipient, bytes messageBody) returns (uint64)",
      "function sendMessageWithCaller(uint32 destinationDomain, bytes32 recipient, bytes32 destinationCaller, bytes messageBody) returns (uint64)",
      "function setMaxMessageBodySize(uint256 newMaxMessageBodySize)",
      "function setSignatureThreshold(uint256 newSignatureThreshold)",
      "function signatureThreshold() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function updateAttesterManager(address newAttesterManager)",
      "function updatePauser(address _newPauser)",
      "function updateRescuer(address newRescuer)",
      "function usedNonces(bytes32) view returns (uint256)",
      "function version() view returns (uint32)"
    ],
    "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x0d954A23a3c32aea407dF052C29E14434a4BB9aa": [
      "constructor(address _singleton)"
    ],
    "0x0DAFed8dAF42040dB2c6227ca2AEB14D9C8B2602": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x0eF01249E2731082A078C0B3f408c2929c90Ac9c": [
      "constructor(address _xDaiBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidDestinationChain()",
      "error InvalidReceiver()",
      "error InvalidSendingToken()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaXDaiBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData)",
      "function swapAndStartBridgeTokensViaXDaiBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x0f27c8532457b66D6037141DEB0ed479Dad04B3c": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, address[] allowlist, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event AllowListAdd(address sender)",
      "event AllowListEnabledSet(bool enabled)",
      "event AllowListRemove(address sender)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint96 networkFeeAmountUSD, uint64 gasMultiplier, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFee, uint32 maxFee, uint16 ratio) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setAllowListEnabled(bool enabled)",
      "function setDynamicConfig(tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x111111125421cA6dc452d289314280a0f8842A65": [
      "constructor(address weth)",
      "error AdvanceEpochFailed()",
      "error ArbitraryStaticCallFailed()",
      "error BadCurveSwapSelector()",
      "error BadPool()",
      "error BadSignature()",
      "error BitInvalidatedOrder()",
      "error ETHTransferFailed()",
      "error ETHTransferFailed()",
      "error EnforcedPause()",
      "error EpochManagerAndBitInvalidatorsAreIncompatible()",
      "error EthDepositRejected()",
      "error ExpectedPause()",
      "error InsufficientBalance()",
      "error InvalidMsgValue()",
      "error InvalidMsgValue()",
      "error InvalidPermit2Transfer()",
      "error InvalidShortString()",
      "error InvalidatedOrder()",
      "error MakingAmountTooLow()",
      "error MismatchArraysLengths()",
      "error OrderExpired()",
      "error OrderIsNotSuitableForMassInvalidation()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error PartialFillNotAllowed()",
      "error Permit2TransferAmountTooHigh()",
      "error PredicateIsNotTrue()",
      "error PrivateOrder()",
      "error ReentrancyDetected()",
      "error RemainingInvalidatedOrder()",
      "error ReservesCallFailed()",
      "error ReturnAmountIsNotEnough(uint256 result, uint256 minReturn)",
      "error SafeTransferFailed()",
      "error SafeTransferFromFailed()",
      "error SimulationResults(bool success, bytes res)",
      "error StringTooLong(string str)",
      "error SwapWithZeroAmount()",
      "error TakingAmountExceeded()",
      "error TakingAmountTooHigh()",
      "error TransferFromMakerToTakerFailed()",
      "error TransferFromTakerToMakerFailed()",
      "error WrongSeriesNonce()",
      "error ZeroAddress()",
      "error ZeroMinReturn()",
      "event BitInvalidatorUpdated(address indexed maker, uint256 slotIndex, uint256 slotValue)",
      "event EIP712DomainChanged()",
      "event EpochIncreased(address indexed maker, uint256 series, uint256 newEpoch)",
      "event OrderCancelled(bytes32 orderHash)",
      "event OrderFilled(bytes32 orderHash, uint256 remainingAmount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function advanceEpoch(uint96 series, uint256 amount)",
      "function and(uint256 offsets, bytes data) view returns (bool)",
      "function arbitraryStaticCall(address target, bytes data) view returns (uint256)",
      "function bitInvalidatorForOrder(address maker, uint256 slot) view returns (uint256)",
      "function bitsInvalidateForOrder(uint256 makerTraits, uint256 additionalMask)",
      "function cancelOrder(uint256 makerTraits, bytes32 orderHash)",
      "function cancelOrders(uint256[] makerTraits, bytes32[] orderHashes)",
      "function checkPredicate(bytes predicate) view returns (bool)",
      "function clipperSwap(address clipperExchange, uint256 srcToken, address dstToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, bytes32 r, bytes32 vs) payable returns (uint256 returnAmount)",
      "function clipperSwapTo(address clipperExchange, address recipient, uint256 srcToken, address dstToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, bytes32 r, bytes32 vs) payable returns (uint256 returnAmount)",
      "function curveSwapCallback(address, address, address inCoin, uint256 dx, uint256)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function epoch(address maker, uint96 series) view returns (uint256)",
      "function epochEquals(address maker, uint256 series, uint256 makerEpoch) view returns (bool)",
      "function eq(uint256 value, bytes data) view returns (bool)",
      "function ethUnoswap(uint256 minReturn, uint256 dex) payable returns (uint256 returnAmount)",
      "function ethUnoswap2(uint256 minReturn, uint256 dex, uint256 dex2) payable returns (uint256 returnAmount)",
      "function ethUnoswap3(uint256 minReturn, uint256 dex, uint256 dex2, uint256 dex3) payable returns (uint256 returnAmount)",
      "function ethUnoswapTo(uint256 to, uint256 minReturn, uint256 dex) payable returns (uint256 returnAmount)",
      "function ethUnoswapTo2(uint256 to, uint256 minReturn, uint256 dex, uint256 dex2) payable returns (uint256 returnAmount)",
      "function ethUnoswapTo3(uint256 to, uint256 minReturn, uint256 dex, uint256 dex2, uint256 dex3) payable returns (uint256 returnAmount)",
      "function fillContractOrder(tuple(uint256 salt, uint256 maker, uint256 receiver, uint256 makerAsset, uint256 takerAsset, uint256 makingAmount, uint256 takingAmount, uint256 makerTraits) order, bytes signature, uint256 amount, uint256 takerTraits) returns (uint256, uint256, bytes32)",
      "function fillContractOrderArgs(tuple(uint256 salt, uint256 maker, uint256 receiver, uint256 makerAsset, uint256 takerAsset, uint256 makingAmount, uint256 takingAmount, uint256 makerTraits) order, bytes signature, uint256 amount, uint256 takerTraits, bytes args) returns (uint256, uint256, bytes32)",
      "function fillOrder(tuple(uint256 salt, uint256 maker, uint256 receiver, uint256 makerAsset, uint256 takerAsset, uint256 makingAmount, uint256 takingAmount, uint256 makerTraits) order, bytes32 r, bytes32 vs, uint256 amount, uint256 takerTraits) payable returns (uint256, uint256, bytes32)",
      "function fillOrderArgs(tuple(uint256 salt, uint256 maker, uint256 receiver, uint256 makerAsset, uint256 takerAsset, uint256 makingAmount, uint256 takingAmount, uint256 makerTraits) order, bytes32 r, bytes32 vs, uint256 amount, uint256 takerTraits, bytes args) payable returns (uint256, uint256, bytes32)",
      "function gt(uint256 value, bytes data) view returns (bool)",
      "function hashOrder(tuple(uint256 salt, uint256 maker, uint256 receiver, uint256 makerAsset, uint256 takerAsset, uint256 makingAmount, uint256 takingAmount, uint256 makerTraits) order) view returns (bytes32)",
      "function increaseEpoch(uint96 series)",
      "function lt(uint256 value, bytes data) view returns (bool)",
      "function not(bytes data) view returns (bool)",
      "function or(uint256 offsets, bytes data) view returns (bool)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function permitAndCall(bytes permit, bytes action) payable",
      "function rawRemainingInvalidatorForOrder(address maker, bytes32 orderHash) view returns (uint256)",
      "function remainingInvalidatorForOrder(address maker, bytes32 orderHash) view returns (uint256)",
      "function renounceOwnership()",
      "function rescueFunds(address token, uint256 amount)",
      "function simulate(address target, bytes data)",
      "function swap(address executor, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags) desc, bytes data) payable returns (uint256 returnAmount, uint256 spentAmount)",
      "function transferOwnership(address newOwner)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes)",
      "function unoswap(uint256 token, uint256 amount, uint256 minReturn, uint256 dex) returns (uint256 returnAmount)",
      "function unoswap2(uint256 token, uint256 amount, uint256 minReturn, uint256 dex, uint256 dex2) returns (uint256 returnAmount)",
      "function unoswap3(uint256 token, uint256 amount, uint256 minReturn, uint256 dex, uint256 dex2, uint256 dex3) returns (uint256 returnAmount)",
      "function unoswapTo(uint256 to, uint256 token, uint256 amount, uint256 minReturn, uint256 dex) returns (uint256 returnAmount)",
      "function unoswapTo2(uint256 to, uint256 token, uint256 amount, uint256 minReturn, uint256 dex, uint256 dex2) returns (uint256 returnAmount)",
      "function unoswapTo3(uint256 to, uint256 token, uint256 amount, uint256 minReturn, uint256 dex, uint256 dex2, uint256 dex3) returns (uint256 returnAmount)",
      "function unpause()"
    ],
    "0x1111111254EEB25477B68fb85Ed929f73A960582": [
      "constructor(address weth)",
      "error AccessDenied()",
      "error AdvanceNonceFailed()",
      "error AlreadyFilled()",
      "error ArbitraryStaticCallFailed()",
      "error BadPool()",
      "error BadSignature()",
      "error ETHTransferFailed()",
      "error ETHTransferFailed()",
      "error EmptyPools()",
      "error EthDepositRejected()",
      "error GetAmountCallFailed()",
      "error IncorrectDataLength()",
      "error InsufficientBalance()",
      "error InvalidMsgValue()",
      "error InvalidMsgValue()",
      "error InvalidatedOrder()",
      "error MakingAmountExceeded()",
      "error MakingAmountTooLow()",
      "error OnlyOneAmountShouldBeZero()",
      "error OrderExpired()",
      "error PermitLengthTooLow()",
      "error PredicateIsNotTrue()",
      "error PrivateOrder()",
      "error RFQBadSignature()",
      "error RFQPrivateOrder()",
      "error RFQSwapWithZeroAmount()",
      "error RFQZeroTargetIsForbidden()",
      "error ReentrancyDetected()",
      "error RemainingAmountIsZero()",
      "error ReservesCallFailed()",
      "error ReturnAmountIsNotEnough()",
      "error SafePermitBadLength()",
      "error SafeTransferFailed()",
      "error SafeTransferFromFailed()",
      "error SimulationResults(bool success, bytes res)",
      "error SwapAmountTooLarge()",
      "error SwapWithZeroAmount()",
      "error TakingAmountExceeded()",
      "error TakingAmountIncreased()",
      "error TakingAmountTooHigh()",
      "error TransferFromMakerToTakerFailed()",
      "error TransferFromTakerToMakerFailed()",
      "error UnknownOrder()",
      "error WrongAmount()",
      "error WrongGetter()",
      "error ZeroAddress()",
      "error ZeroMinReturn()",
      "error ZeroReturnAmount()",
      "error ZeroTargetIsForbidden()",
      "event NonceIncreased(address indexed maker, uint256 newNonce)",
      "event OrderCanceled(address indexed maker, bytes32 orderHash, uint256 remainingRaw)",
      "event OrderFilled(address indexed maker, bytes32 orderHash, uint256 remaining)",
      "event OrderFilledRFQ(bytes32 orderHash, uint256 makingAmount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function advanceNonce(uint8 amount)",
      "function and(uint256 offsets, bytes data) view returns (bool)",
      "function arbitraryStaticCall(address target, bytes data) view returns (uint256)",
      "function cancelOrder(tuple(uint256 salt, address makerAsset, address takerAsset, address maker, address receiver, address allowedSender, uint256 makingAmount, uint256 takingAmount, uint256 offsets, bytes interactions) order) returns (uint256 orderRemaining, bytes32 orderHash)",
      "function cancelOrderRFQ(uint256 orderInfo)",
      "function cancelOrderRFQ(uint256 orderInfo, uint256 additionalMask)",
      "function checkPredicate(tuple(uint256 salt, address makerAsset, address takerAsset, address maker, address receiver, address allowedSender, uint256 makingAmount, uint256 takingAmount, uint256 offsets, bytes interactions) order) view returns (bool)",
      "function clipperSwap(address clipperExchange, address srcToken, address dstToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, bytes32 r, bytes32 vs) payable returns (uint256 returnAmount)",
      "function clipperSwapTo(address clipperExchange, address recipient, address srcToken, address dstToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, bytes32 r, bytes32 vs) payable returns (uint256 returnAmount)",
      "function clipperSwapToWithPermit(address clipperExchange, address recipient, address srcToken, address dstToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, bytes32 r, bytes32 vs, bytes permit) returns (uint256 returnAmount)",
      "function destroy()",
      "function eq(uint256 value, bytes data) view returns (bool)",
      "function fillOrder(tuple(uint256 salt, address makerAsset, address takerAsset, address maker, address receiver, address allowedSender, uint256 makingAmount, uint256 takingAmount, uint256 offsets, bytes interactions) order, bytes signature, bytes interaction, uint256 makingAmount, uint256 takingAmount, uint256 skipPermitAndThresholdAmount) payable returns (uint256, uint256, bytes32)",
      "function fillOrderRFQ(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 flagsAndAmount) payable returns (uint256, uint256, bytes32)",
      "function fillOrderRFQCompact(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes32 r, bytes32 vs, uint256 flagsAndAmount) payable returns (uint256 filledMakingAmount, uint256 filledTakingAmount, bytes32 orderHash)",
      "function fillOrderRFQTo(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 flagsAndAmount, address target) payable returns (uint256 filledMakingAmount, uint256 filledTakingAmount, bytes32 orderHash)",
      "function fillOrderRFQToWithPermit(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 flagsAndAmount, address target, bytes permit) returns (uint256, uint256, bytes32)",
      "function fillOrderTo(tuple(uint256 salt, address makerAsset, address takerAsset, address maker, address receiver, address allowedSender, uint256 makingAmount, uint256 takingAmount, uint256 offsets, bytes interactions) order_, bytes signature, bytes interaction, uint256 makingAmount, uint256 takingAmount, uint256 skipPermitAndThresholdAmount, address target) payable returns (uint256 actualMakingAmount, uint256 actualTakingAmount, bytes32 orderHash)",
      "function fillOrderToWithPermit(tuple(uint256 salt, address makerAsset, address takerAsset, address maker, address receiver, address allowedSender, uint256 makingAmount, uint256 takingAmount, uint256 offsets, bytes interactions) order, bytes signature, bytes interaction, uint256 makingAmount, uint256 takingAmount, uint256 skipPermitAndThresholdAmount, address target, bytes permit) returns (uint256, uint256, bytes32)",
      "function gt(uint256 value, bytes data) view returns (bool)",
      "function hashOrder(tuple(uint256 salt, address makerAsset, address takerAsset, address maker, address receiver, address allowedSender, uint256 makingAmount, uint256 takingAmount, uint256 offsets, bytes interactions) order) view returns (bytes32)",
      "function increaseNonce()",
      "function invalidatorForOrderRFQ(address maker, uint256 slot) view returns (uint256)",
      "function lt(uint256 value, bytes data) view returns (bool)",
      "function nonce(address) view returns (uint256)",
      "function nonceEquals(address makerAddress, uint256 makerNonce) view returns (bool)",
      "function or(uint256 offsets, bytes data) view returns (bool)",
      "function owner() view returns (address)",
      "function remaining(bytes32 orderHash) view returns (uint256)",
      "function remainingRaw(bytes32 orderHash) view returns (uint256)",
      "function remainingsRaw(bytes32[] orderHashes) view returns (uint256[])",
      "function renounceOwnership()",
      "function rescueFunds(address token, uint256 amount)",
      "function simulate(address target, bytes data)",
      "function swap(address executor, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags) desc, bytes permit, bytes data) payable returns (uint256 returnAmount, uint256 spentAmount)",
      "function timestampBelow(uint256 time) view returns (bool)",
      "function timestampBelowAndNonceEquals(uint256 timeNonceAccount) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes)",
      "function uniswapV3SwapTo(address recipient, uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit) returns (uint256 returnAmount)",
      "function unoswap(address srcToken, uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function unoswapTo(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function unoswapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit) returns (uint256 returnAmount)"
    ],
    "0x1111111254fb6c44bAC0beD2854e76F90643097d": [
      "constructor(address weth, address _clipperExchange)",
      "event OrderFilledRFQ(bytes32 orderHash, uint256 makingAmount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function LIMIT_ORDER_RFQ_TYPEHASH() view returns (bytes32)",
      "function cancelOrderRFQ(uint256 orderInfo)",
      "function clipperSwap(address srcToken, address dstToken, uint256 amount, uint256 minReturn) payable returns (uint256 returnAmount)",
      "function clipperSwapTo(address recipient, address srcToken, address dstToken, uint256 amount, uint256 minReturn) payable returns (uint256 returnAmount)",
      "function clipperSwapToWithPermit(address recipient, address srcToken, address dstToken, uint256 amount, uint256 minReturn, bytes permit) returns (uint256 returnAmount)",
      "function destroy()",
      "function fillOrderRFQ(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount) payable returns (uint256, uint256)",
      "function fillOrderRFQTo(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount, address target) payable returns (uint256, uint256)",
      "function fillOrderRFQToWithPermit(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount, address target, bytes permit) returns (uint256, uint256)",
      "function invalidatorForOrderRFQ(address maker, uint256 slot) view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function rescueFunds(address token, uint256 amount)",
      "function swap(address caller, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes data) payable returns (uint256 returnAmount, uint256 spentAmount, uint256 gasLeft)",
      "function transferOwnership(address newOwner)",
      "function uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes)",
      "function uniswapV3SwapTo(address recipient, uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit) returns (uint256 returnAmount)",
      "function unoswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools) payable returns (uint256 returnAmount)",
      "function unoswapWithPermit(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools, bytes permit) returns (uint256 returnAmount)"
    ],
    "0x1175E4CFd6a73A4c1F1f2c1400a08D88554FA62e": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x118DFD5418890c0332042ab05173Db4A2C1d283c": [
      "event SetTrustedRemote(uint256 originChainId, address originForwarder)",
      "function forwardMessage(address, uint256, uint256 destinationChainId, bytes message) returns (address, uint256)",
      "function getTrustedRemoteByChainId(uint256) pure returns (address)",
      "function infraToNativeChainId(uint256 infraChainId) view returns (uint256)",
      "function nativeToInfraChainId(uint256 nativeChainId) view returns (uint256)",
      "function setupPayments()"
    ],
    "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE": [
      "constructor(address _contractOwner, address _diamondCutFacet) payable",
      "error CalldataEmptyButInitNotZero()",
      "error FacetAddressIsNotZero()",
      "error FacetAddressIsZero()",
      "error FacetContainsNoCode()",
      "error FunctionAlreadyExists()",
      "error FunctionDoesNotExist()",
      "error FunctionIsImmutable()",
      "error IncorrectFacetCutAction()",
      "error InitReverted()",
      "error InitZeroButCalldataNotEmpty()",
      "error NoSelectorsInFace()"
    ],
    "0x123ed44f3B863a684437Ebf18F8a744c250Ee5cA": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0x14B4e2e2e3422DeC6F8bF3DcDc0BF3566F37197D": [
      "constructor(address _mayan)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "error UnsupportedChainId(uint256 chainId)",
      "event BridgeToNonEVMChain(bytes32 indexed transactionId, uint256 indexed destinationChainId, bytes32 receiver)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event MayanChainIdMapped(uint256 indexed lifiChainId, uint256 indexed wormholeChainId)",
      "event MayanInitialized(tuple(uint256 chainId, uint16 wormholeChainId)[] configs)",
      "function initMayan(tuple(uint256 chainId, uint16 wormholeChainId)[] configs)",
      "function mayan() view returns (address)",
      "function setMayanChainIdMapping(uint256 _lifiChainId, uint16 _wormholeChainId)",
      "function startBridgeTokensViaMayan(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(bytes32 mayanAddr, bytes32 referrer, bytes32 tokenOutAddr, bytes32 receiver, uint64 swapFee, uint64 redeemFee, uint64 refundFee, uint256 transferDeadline, uint64 swapDeadline, uint64 amountOutMin, bool unwrap, uint64 gasDrop) _mayanData) payable",
      "function swapAndStartBridgeTokensViaMayan(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(bytes32 mayanAddr, bytes32 referrer, bytes32 tokenOutAddr, bytes32 receiver, uint64 swapFee, uint64 redeemFee, uint64 refundFee, uint256 transferDeadline, uint64 swapDeadline, uint64 amountOutMin, bool unwrap, uint64 gasDrop) _mayanData) payable"
    ],
    "0x1580C7d4754f5671626e42f0372D56104B092CFA": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x17483FC75528C53d21Ca7465484aee081BFf39Bd": [
      "constructor(address _sourceRouter, uint64 _thisChainSelector, uint64 _relayerChainSelector, address _owner, uint256 _feePercentage)",
      "error InvalidRouter(address router)",
      "event Execute(address indexed caller, address indexed gatewayWallet, address indexed destination, bool status, address contractDeployed, bytes32 extraData)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ReceiveRTC(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address caller, address targetContract, bytes32 extraData)",
      "event SendRTC(bytes32 indexed messageId, address indexed caller, uint64 destinationChainSelector, uint64 execChainSelector, address targetContract, bytes32 extraData, address feeToken, uint256 ccipfees, uint256 totalFees)",
      "event WalletDeploy(address indexed owner, address gatewayWallet)",
      "function batchExecute(uint64[][] execChainSelectors, string[] salt, address[] destination, uint256[] value, bytes[] data, uint256[] gasLimit, bytes32[] extraData) payable returns (bool[] success, address[] contractDeployed, bytes32[] messageId)",
      "function calculateAddress(address owner, string salt) view returns (address)",
      "function calculateBatchExecuteFee(address caller, uint64[][] execChainSelectors, string[] salt, address[] destination, uint256[] value, bytes[] data, uint256[] gasLimit, bytes32[] extraData) view returns (uint256 totalFee)",
      "function calculateCreate2Address(address owner, string salt, bytes byteCode, bytes32 create2Salt) view returns (address)",
      "function calculateExecuteFee(address caller, uint64[] execChainSelectors, string salt, address destination, uint256 value, bytes data, uint256 gasLimit, bytes32 extraData) view returns (uint256 totalFee)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function deploy(string salt) returns (address)",
      "function deployed(address) view returns (bool)",
      "function execute(uint64[] execChainSelectors, string salt, address destination, uint256 value, bytes data, uint256 gasLimit, bytes32 extraData) payable returns (bool success, address contractDeployed, bytes32 messageId)",
      "function feePercentage() view returns (uint256)",
      "function getDeployedWallets(address owner) view returns (address[])",
      "function getRouter() view returns (address)",
      "function instances(address, uint256) view returns (address)",
      "function owner() view returns (address)",
      "function relayerChainSelector() view returns (uint64)",
      "function renounceOwnership()",
      "function salts(address) view returns (string)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function thisChainSelector() view returns (uint64)",
      "function transferOwnership(address newOwner)",
      "function updateFee(uint256 _feePercentage)",
      "function withdraw(uint256 amount)"
    ],
    "0x175E7799DA0CD40E641352EaB90D8e39e02a4Ca9": [
      "error FunctionDoesNotExist()",
      "function standardizedBridgeCall(bytes callData) payable",
      "function standardizedCall(bytes callData) payable",
      "function standardizedSwapAndBridgeCall(bytes callData) payable",
      "function standardizedSwapCall(bytes callData) payable"
    ],
    "0x183015a9bA6fF60230fdEaDc3F43b3D788b13e21": [
      "constructor(address positionManager_, address feeRecipient_)",
      "error CallerIsNotPositionManager(address caller)",
      "error FlashFeePercentageTooBig(uint256 feePercentage)",
      "error InvalidFeeRecipient()",
      "error PositionManagerCannotBeZero()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event FeeRecipientChanged(address feeRecipient)",
      "event FlashMintFeePercentageChanged(uint256 flashMintFeePercentage)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RDeployed(address positionManager, address flashMintFeeRecipient)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function MAX_FLASH_MINT_FEE_PERCENTAGE() view returns (uint256)",
      "function PERCENTAGE_BASE() view returns (uint256)",
      "function acceptOwnership()",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(address from, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function feeRecipient() view returns (address)",
      "function flashFee(address token, uint256 amount) view returns (uint256)",
      "function flashLoan(address receiver, address token, uint256 amount, bytes data) returns (bool)",
      "function flashMintFeePercentage() view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function maxFlashLoan(address token) view returns (uint256)",
      "function mint(address to, uint256 amount)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function positionManager() view returns (address)",
      "function renounceOwnership()",
      "function setFeeRecipient(address newFeeRecipient)",
      "function setFlashMintFeePercentage(uint256 feePercentage)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0x1855c918eE5371FB4a46bac68aD49315d671a930": [
      "event Abstained(uint256 indexed tokenId, address indexed pool, int256 weight)",
      "event Attach(address indexed owner, address indexed gauge, uint256 tokenId)",
      "event Blacklisted(address indexed blacklister, address indexed token)",
      "event Deposit(address indexed lp, address indexed gauge, uint256 tokenId, uint256 amount)",
      "event Detach(address indexed owner, address indexed gauge, uint256 tokenId)",
      "event DistributeReward(address indexed sender, address indexed pool, uint256 amount)",
      "event GaugeCreated(address indexed gauge, address creator, address indexed bribe, address indexed pool)",
      "event NotifyReward(address indexed sender, address indexed reward, uint256 amount)",
      "event RewardsDistributorChanged(address newRewardsDistributor)",
      "event Voted(address indexed voter, uint256 indexed tokenId, address indexed pool, int256 weight)",
      "event Whitelisted(address indexed whitelister, address indexed token)",
      "event Withdraw(address indexed lp, address indexed gauge, uint256 tokenId, uint256 amount)",
      "function _ve() view returns (address)",
      "function activePeriod() view returns (uint256)",
      "function attachTokenToGauge(uint256 tokenId, address account)",
      "function bribeFactory() view returns (address)",
      "function bribes(address) view returns (address)",
      "function claimBribes(address[] _bribes, address[][] _tokens, uint256 _tokenId)",
      "function claimFees(address[] _fees, address[][] _tokens, uint256 _tokenId)",
      "function claimRewards(address[] _gauges, address[][] _tokens)",
      "function claimable(address) view returns (uint256)",
      "function createGauge(address _pool) returns (address)",
      "function detachTokenFromGauge(uint256 tokenId, address account)",
      "function distribute(address _pool)",
      "function distribute(uint256 start, uint256 finish)",
      "function distribute(address _pool, uint256 _activePeriod)",
      "function distributeFees(address[] _gauges)",
      "function distributeMany(address[] _pools)",
      "function emitDeposit(uint256 tokenId, address account, uint256 amount)",
      "function emitWithdraw(uint256 tokenId, address account, uint256 amount)",
      "function factory() view returns (address)",
      "function feeDistFactory() view returns (address)",
      "function feeDists(address) view returns (address)",
      "function gaugeFactory() view returns (address)",
      "function gauges(address) view returns (address)",
      "function generalFees() view returns (address)",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceBlacklist(address[] _tokens)",
      "function governanceWhitelist(address[] _tokens)",
      "function initialize(address __ve, address _factory, address _gaugesFactory, address _bribesFactory, address _feeDistFactory, address _generalFees, address _minter)",
      "function isBlacklisted(address) view returns (bool)",
      "function isGauge(address) view returns (bool)",
      "function isWhitelisted(address) view returns (bool)",
      "function length() view returns (uint256)",
      "function listingFeeRatio() view returns (uint256)",
      "function listing_fee() view returns (uint256)",
      "function minter() view returns (address)",
      "function notifyRewardAmount(uint256 amount)",
      "function periodPoolVote(uint256, uint256, uint256) view returns (address)",
      "function periodTotalWeight(uint256) view returns (uint256)",
      "function periodUpdated(address, uint256) view returns (bool)",
      "function periodUsedWeights(uint256, uint256) view returns (uint256)",
      "function periodVotes(uint256, uint256, address) view returns (int256)",
      "function periodWeights(address, uint256) view returns (int256)",
      "function poolForGauge(address) view returns (address)",
      "function poolVote(uint256 tokenId) view returns (address[])",
      "function poolVote(uint256 tokenId, uint256 index) view returns (address)",
      "function pools(uint256) view returns (address)",
      "function reset(uint256 _tokenId)",
      "function rewards(uint256) view returns (uint256)",
      "function rewardsDistributor() view returns (address)",
      "function setListingFeeRatio(uint256 _listingFeeRatio)",
      "function setRewardsDistributor(address _rewardsDistributor)",
      "function setTrainingWheels(bool _status)",
      "function syncActivePeriod() returns (uint256)",
      "function totalWeight() view returns (uint256)",
      "function trainingWheels() view returns (bool)",
      "function updateAll()",
      "function updateFor(address[] _gauges)",
      "function updateForRange(uint256 start, uint256 end)",
      "function updateGauge(address _gauge)",
      "function updateGauge(address _gauge, uint256 _activePeriod)",
      "function usedWeights(uint256 tokenId) view returns (uint256)",
      "function vote(uint256 tokenId, address[] _poolVote, int256[] _weights)",
      "function votes(uint256 tokenId, address pool) view returns (int256)",
      "function weights(address pool) view returns (int256)",
      "function whitelist(address _token, uint256 _tokenId)"
    ],
    "0x1C207dabc46902dF9028b27D6d301c3849b2D12c": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitError(bytes error)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0": [
      "constructor(address logic, address admin_, bytes data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x1e28DD4b559a7fF546b1e84691129508b2C9C3D3": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x1F98431c8aD98523631AE4a59f267346ea31F984": [
      "constructor()",
      "event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing)",
      "event OwnerChanged(address indexed oldOwner, address indexed newOwner)",
      "event PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool)",
      "function createPool(address tokenA, address tokenB, uint24 fee) returns (address pool)",
      "function enableFeeAmount(uint24 fee, int24 tickSpacing)",
      "function feeAmountTickSpacing(uint24) view returns (int24)",
      "function getPool(address, address, uint24) view returns (address)",
      "function owner() view returns (address)",
      "function parameters() view returns (address factory, address token0, address token1, uint24 fee, int24 tickSpacing)",
      "function setOwner(address _owner)"
    ],
    "0x20718EfbC25Dba60FD51c2c81362b83f7C411A6D": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x21377fe476Fb8587CbAFd47155093597Fa4df45E": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x216B4B4Ba9F3e719726886d34a177484278Bfcae": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferFrom(address token, address from, address to, uint256 amount)",
      "function transferOwnership(address newOwner)"
    ],
    "0x22F1fc71A505c0b2bf4D5075801cc5E0ec84B09e": [
      "error HeaderOutOfRange(address emitter, uint256 blockNumber)",
      "event HeaderStored(uint256 indexed blockNumber, bytes32 indexed blockHeader)",
      "function headers(uint256) view returns (bytes32)",
      "function storeBlockHeader(uint256 blockNumber) returns (bytes32 blockHeader)",
      "function storeBlockHeaders(uint256[] blockNumbers) returns (bytes32[])"
    ],
    "0x2764910B500689BbC9DB16c7AD61c6DD32FDE73B": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x27E843260c71443b4CC8cB6bF226C3f77b9695AF": [
      "constructor(address _masterCopy)"
    ],
    "0x28559c2F4B038b1E836fA419DCcDe7454d8Fe215": [
      "error SafeERC20FailedOperation(address token)",
      "event BridgeAdapterUpdated(uint256 indexed destinationChainId, address indexed bridgeAdapter, address destinationBridgeAdapter, bool indexed allowed)",
      "event ConfirmationsUpdated(uint8 newConfirmations, uint256 indexed chainId)",
      "event ERC20Rescued(address indexed caller, address indexed token, address indexed to, uint256 amount)",
      "event EnvelopeDeliveryAttempted(bytes32 envelopeId, tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope, bool isDelivered)",
      "event EnvelopeRegistered(bytes32 indexed envelopeId, tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope)",
      "event GuardianUpdated(address oldGuardian, address newGuardian)",
      "event Initialized(uint8 version)",
      "event NativeTokensRescued(address indexed caller, address indexed to, uint256 amount)",
      "event NewInvalidation(uint256 invalidTimestamp, uint256 indexed chainId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ReceiverBridgeAdaptersUpdated(address indexed bridgeAdapter, bool indexed allowed, uint256 indexed chainId)",
      "event SenderUpdated(address indexed sender, bool indexed isApproved)",
      "event TransactionForwardingAttempted(bytes32 transactionId, bytes32 indexed envelopeId, bytes encodedTransaction, uint256 destinationChainId, address indexed bridgeAdapter, address destinationBridgeAdapter, bool indexed adapterSuccessful, bytes returnData)",
      "event TransactionReceived(bytes32 transactionId, bytes32 indexed envelopeId, uint256 indexed originChainId, tuple(uint256 nonce, bytes encodedEnvelope) transaction, address indexed bridgeAdapter, uint8 confirmations)",
      "function allowReceiverBridgeAdapters(tuple(address bridgeAdapter, uint256[] chainIds)[] bridgeAdaptersInput)",
      "function approveSenders(address[] senders)",
      "function deliverEnvelope(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope)",
      "function disableBridgeAdapters(tuple(address bridgeAdapter, uint256[] chainIds)[] bridgeAdapters)",
      "function disallowReceiverBridgeAdapters(tuple(address bridgeAdapter, uint256[] chainIds)[] bridgeAdapters)",
      "function emergencyEtherTransfer(address to, uint256 amount)",
      "function emergencyTokenTransfer(address erc20Token, address to, uint256 amount)",
      "function enableBridgeAdapters(tuple(address currentChainBridgeAdapter, address destinationBridgeAdapter, uint256 destinationChainId)[] bridgeAdapters)",
      "function forwardMessage(uint256 destinationChainId, address destination, uint256 gasLimit, bytes message) returns (bytes32, bytes32)",
      "function getConfigurationByChain(uint256 chainId) view returns (tuple(uint8 requiredConfirmation, uint120 validityTimestamp))",
      "function getCurrentEnvelopeNonce() view returns (uint256)",
      "function getCurrentTransactionNonce() view returns (uint256)",
      "function getEnvelopeState(bytes32 envelopeId) view returns (uint8)",
      "function getEnvelopeState(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope) view returns (uint8)",
      "function getForwarderBridgeAdaptersByChain(uint256 chainId) view returns (tuple(address destinationBridgeAdapter, address currentChainBridgeAdapter)[])",
      "function getReceiverBridgeAdaptersByChain(uint256 chainId) view returns (address[])",
      "function getSupportedChains() view returns (uint256[])",
      "function getTransactionState(tuple(uint256 nonce, bytes encodedEnvelope) transaction) view returns (tuple(uint8 confirmations, uint120 firstBridgedAt))",
      "function getTransactionState(bytes32 transactionId) view returns (tuple(uint8 confirmations, uint120 firstBridgedAt))",
      "function guardian() view returns (address)",
      "function initialize(address owner, address guardian, tuple(uint256 chainId, uint8 requiredConfirmations)[] initialRequiredConfirmations, tuple(address bridgeAdapter, uint256[] chainIds)[] receiverBridgeAdaptersToAllow, tuple(address currentChainBridgeAdapter, address destinationBridgeAdapter, uint256 destinationChainId)[] forwarderBridgeAdaptersToEnable, address[] sendersToApprove)",
      "function initializeRevision()",
      "function isEnvelopeRegistered(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope) view returns (bool)",
      "function isEnvelopeRegistered(bytes32 envelopeId) view returns (bool)",
      "function isReceiverBridgeAdapterAllowed(address bridgeAdapter, uint256 chainId) view returns (bool)",
      "function isSenderApproved(address sender) view returns (bool)",
      "function isTransactionForwarded(bytes32 transactionId) view returns (bool)",
      "function isTransactionForwarded(tuple(uint256 nonce, bytes encodedEnvelope) transaction) view returns (bool)",
      "function isTransactionReceivedByAdapter(bytes32 transactionId, address bridgeAdapter) view returns (bool)",
      "function owner() view returns (address)",
      "function receiveCrossChainMessage(bytes encodedTransaction, uint256 originChainId)",
      "function removeSenders(address[] senders)",
      "function renounceOwnership()",
      "function retryEnvelope(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope, uint256 gasLimit) returns (bytes32)",
      "function retryTransaction(bytes encodedTransaction, uint256 gasLimit, address[] bridgeAdaptersToRetry)",
      "function transferOwnership(address newOwner)",
      "function updateConfirmations(tuple(uint256 chainId, uint8 requiredConfirmations)[] newConfirmations)",
      "function updateGuardian(address newGuardian)",
      "function updateMessagesValidityTimestamp(tuple(uint256 chainId, uint120 validityTimestamp)[] newValidityTimestamp)",
      "function whoCanRescue() view returns (address)"
    ],
    "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x2b7D2C78bd801Cc06DDCF91DeE2e8fAE22814f7e": [
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function swapTokensGeneric(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable",
      "function swapTokensSingleERC20ToERC20(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit) _swapData) payable",
      "function swapTokensSingleERC20ToNative(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit) _swapData) payable",
      "function swapTokensSingleNativeToERC20(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit) _swapData) payable"
    ],
    "0x2D1708ff2a15adbE313eA8C6035aA24d0FBA1c77": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x2dd317E7e36544C5222818F228d607c209517470": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0x2EfC66F1ff37fc5277De5526Ab5CB7650f2DD518": [
      "error OnlyContractOwner()",
      "event PeripheryContractRegistered(string name, address contractAddress)",
      "function getPeripheryContract(string _name) view returns (address)",
      "function registerPeripheryContract(string _name, address _contractAddress)"
    ],
    "0x2F23357ce83cb17C5B0F78CCD18330858BC3cA6f": [
      "constructor(address initialOwner, address _royaltyRecipient, uint256 _unitPrice, uint256 mintMinId, uint256 mintMaxId, string _unrevealedPath)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator)",
      "error ERC2981InvalidDefaultRoyaltyReceiver(address receiver)",
      "error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator)",
      "error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver)",
      "error ERC721EnumerableForbiddenBatchMint()",
      "error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner)",
      "error ERC721InsufficientApproval(address operator, uint256 tokenId)",
      "error ERC721InvalidApprover(address approver)",
      "error ERC721InvalidOperator(address operator)",
      "error ERC721InvalidOwner(address owner)",
      "error ERC721InvalidReceiver(address receiver)",
      "error ERC721InvalidSender(address sender)",
      "error ERC721NonexistentToken(uint256 tokenId)",
      "error ERC721OutOfBoundsIndex(address owner, uint256 index)",
      "error FailedToWithdrawEth(address owner, address target, uint256 value)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event AutoRevealed(uint256 timestamp, address sender, uint256 tokenId, uint256 id)",
      "event Minted(uint256 timestamp, address sender, uint256 tokenId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ReceivedCrossChain(uint256 timestamp, address sender, uint256[] tokenIds, uint256[] ids, uint256 fromChainId)",
      "event Revealed(uint256 timestamp, address sender, uint256 tokenId, uint256 id)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SentCrossChain(uint256 timestamp, address sender, uint256[] tokenIds, uint256 destChainId)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function CROSS_CHAIN_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MAX_BATCH_MINT() view returns (uint96)",
      "function ROYALTIES_VALUE() view returns (uint96)",
      "function approve(address to, uint256 tokenId)",
      "function autoReveal(uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function baseURI() view returns (string)",
      "function burn(uint256 tokenId)",
      "function currentSupply() view returns (uint256)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function getPrice(uint256 amount) view returns (uint256 price)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function isMintOpen() view returns (bool)",
      "function maxSupply() view returns (uint256)",
      "function mint(uint256 amount, address to)",
      "function mintFromCrossChainTransfer(uint256[] tokenIds, uint256[] ids, address to, uint256 fromChainId)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function paidMint(uint256 amount) payable",
      "function renounceOwnership()",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function reveal(uint256 tokenId)",
      "function revealedTokenIds(uint256) view returns (bool)",
      "function revokeRole(bytes32 role, address account)",
      "function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns (address, uint256)",
      "function royaltyRecipient() view returns (address)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
      "function setApprovalForAll(address operator, bool approved)",
      "function setBaseUri(string _baseUri)",
      "function setMintOpen(bool _isMintOpen)",
      "function setRoyaltyRecipient(address _royaltyRecipient)",
      "function setUnitPrice(uint256 _unitPrice)",
      "function setUnrevealedPath(string _unrevealedPath)",
      "function supplyLeft() view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function transferOwnership(address newOwner)",
      "function unitPrice() view returns (uint256)",
      "function unrevealedPath() view returns (string)",
      "function withdraw(address beneficiary)",
      "function withdrawERC721(address erc721)",
      "function withdrawToken(address beneficiary, address token)"
    ],
    "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B": [
      "error CallReverted(bytes error)",
      "error GroupTreeNotWellFormed()",
      "error InsufficientSigners()",
      "error InvalidSigner()",
      "error MissingConfig()",
      "error OutOfBoundsGroup()",
      "error OutOfBoundsGroupQuorum()",
      "error OutOfBoundsNumOfSigners()",
      "error PendingOps()",
      "error PostOpCountReached()",
      "error ProofCannotBeVerified()",
      "error RootExpired()",
      "error SignedHashAlreadySeen()",
      "error SignerGroupsLengthMismatch()",
      "error SignerInDisabledGroup()",
      "error SignersAddressesMustBeStrictlyIncreasing()",
      "error ValidUntilHasAlreadyPassed()",
      "error WrongChainId()",
      "error WrongMultiSig()",
      "error WrongNonce()",
      "error WrongPostOpCount()",
      "error WrongPreOpCount()",
      "event ConfigSet(tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents) config, bool isRootCleared)",
      "event NewRoot(bytes32 indexed root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata)",
      "event OpExecuted(uint40 indexed nonce, address to, bytes data, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAX_NUM_SIGNERS() view returns (uint8)",
      "function NUM_GROUPS() view returns (uint8)",
      "function acceptOwnership()",
      "function execute(tuple(uint256 chainId, address multiSig, uint40 nonce, address to, uint256 value, bytes data) op, bytes32[] proof)",
      "function getConfig() view returns (tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents))",
      "function getOpCount() view returns (uint40)",
      "function getRoot() view returns (bytes32 root, uint32 validUntil)",
      "function getRootMetadata() view returns (tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot))",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address[] signerAddresses, uint8[] signerGroups, uint8[32] groupQuorums, uint8[32] groupParents, bool clearRoot)",
      "function setRoot(bytes32 root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata, bytes32[] metadataProof, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures)",
      "function transferOwnership(address newOwner)"
    ],
    "0x2fF4484bcaEf13e4a1Db84E6af882c9d66c97e3F": [
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function swapTokensGeneric(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmount, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x300648a601c584E6379fa0D6a31CbBFCcA6177e4": [
      "constructor(address _token)",
      "event AddShares(address indexed user, uint256 amount)",
      "event ClaimReward(address user)",
      "event DepositRewards(address indexed user, uint256 amountTokens)",
      "event DistributeReward(address indexed user, uint256 amount)",
      "event RemoveShares(address indexed user, uint256 amount)",
      "function beginningOfMonth(uint256 _timestamp) view returns (uint256)",
      "function claimReward()",
      "function depositRewards() payable",
      "function getShares(address user) view returns (uint256)",
      "function getUnpaid(address shareholder) view returns (uint256)",
      "function monthlyRewards(uint256) view returns (uint256)",
      "function rewards(address) view returns (uint256 totalExcluded, uint256 totalRealized)",
      "function rewardsPerShare() view returns (uint256)",
      "function setShare(address shareholder, uint256 balanceUpdate, bool isRemoving)",
      "function token() view returns (address)",
      "function totalDistributed() view returns (uint256)",
      "function totalRewards() view returns (uint256)",
      "function totalSharesDeposited() view returns (uint256)",
      "function totalStakedUsers() view returns (uint256)"
    ],
    "0x306Dd1d3D2637c13CC59686889C0B9550C13c8bB": [
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event Delegate(address indexed owner, address indexed delegate, uint256 indexed tokenId)",
      "event DelegateForAll(address indexed owner, address indexed delegate, bool approved)",
      "event Deposit(address indexed provider, uint256 tokenId, uint256 value, uint256 indexed locktime, uint8 deposit_type, uint256 ts)",
      "event Supply(uint256 prevSupply, uint256 supply)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "event Withdraw(address indexed provider, uint256 tokenId, uint256 value, uint256 ts)",
      "function approve(address _approved, uint256 _tokenId)",
      "function attach(uint256 _tokenId)",
      "function attachments(uint256) view returns (uint256)",
      "function balanceOf(address _owner) view returns (uint256)",
      "function balanceOfAtNFT(uint256 _tokenId, uint256 _block) view returns (uint256)",
      "function balanceOfNFT(uint256 _tokenId) view returns (uint256)",
      "function balanceOfNFTAt(uint256 _tokenId, uint256 _t) view returns (uint256)",
      "function batchMergedInto(uint256 _tokenId, uint256 maxRuns)",
      "function block_number() view returns (uint256)",
      "function checkpoint()",
      "function create_lock(uint256 _value, uint256 _lock_duration) returns (uint256)",
      "function create_lock_for(uint256 _value, uint256 _lock_duration, address _to) returns (uint256)",
      "function decimals() view returns (uint8)",
      "function delegate(address _delegate, uint256 _tokenId)",
      "function deposit_for(uint256 _tokenId, uint256 _value)",
      "function detach(uint256 _tokenId)",
      "function epoch() view returns (uint256)",
      "function getApproved(uint256 _tokenId) view returns (address)",
      "function getDelegate(uint256 _tokenId) view returns (address)",
      "function get_last_user_slope(uint256 _tokenId) view returns (int128)",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function increase_amount(uint256 _tokenId, uint256 _value)",
      "function increase_unlock_time(uint256 _tokenId, uint256 _lock_duration)",
      "function initialize(address token_addr)",
      "function isApprovedForAll(address _owner, address _operator) view returns (bool)",
      "function isApprovedOrOwner(address _spender, uint256 _tokenId) view returns (bool)",
      "function isDelegateForAll(address _owner, address _operator) view returns (bool)",
      "function isDelegateOrOwner(address _voter, uint256 _tokenId) view returns (bool)",
      "function locked(uint256) view returns (int128 amount, uint256 end)",
      "function locked__end(uint256 _tokenId) view returns (uint256)",
      "function merge(uint256 _from, uint256 _to)",
      "function mergedInto(uint256) view returns (uint256)",
      "function name() view returns (string)",
      "function ownerOf(uint256 _tokenId) view returns (address)",
      "function ownership_change(uint256) view returns (uint256)",
      "function point_history(uint256) view returns (int128 bias, int128 slope, uint256 ts, uint256 blk)",
      "function safeTransferFrom(address _from, address _to, uint256 _tokenId)",
      "function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data)",
      "function setApprovalForAll(address _operator, bool _approved)",
      "function setDelegateForAll(address _delegate, bool _status)",
      "function setVoter(address _voter)",
      "function slope_changes(uint256) view returns (int128)",
      "function split(uint256 _from, uint256 _amount) returns (uint256)",
      "function supply() view returns (uint256)",
      "function supportsInterface(bytes4 _interfaceID) view returns (bool)",
      "function symbol() view returns (string)",
      "function token() view returns (address)",
      "function tokenOfOwnerByIndex(address _owner, uint256 _tokenIndex) view returns (uint256)",
      "function tokenURI(uint256 _tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function totalSupplyAt(uint256 _block) view returns (uint256)",
      "function totalSupplyAtT(uint256 t) view returns (uint256)",
      "function transferFrom(address _from, address _to, uint256 _tokenId)",
      "function user_point_epoch(uint256) view returns (uint256)",
      "function user_point_history(uint256, uint256) view returns (int128 bias, int128 slope, uint256 ts, uint256 blk)",
      "function user_point_history__ts(uint256 _tokenId, uint256 _idx) view returns (uint256)",
      "function version() view returns (string)",
      "function voted(uint256 _tokenId) view returns (bool isVoted)",
      "function voter() view returns (address)",
      "function withdraw(uint256 _tokenId)"
    ],
    "0x31a9b1835864706Af10103b31Ea2b79bdb995F5F": [
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error NativeAssetTransferFailed()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function swapTokensMultipleV3ERC20ToERC20(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData)",
      "function swapTokensMultipleV3ERC20ToNative(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData)",
      "function swapTokensMultipleV3NativeToERC20(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable",
      "function swapTokensSingleV3ERC20ToERC20(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit) _swapData)",
      "function swapTokensSingleV3ERC20ToNative(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit) _swapData)",
      "function swapTokensSingleV3NativeToERC20(bytes32 _transactionId, string _integrator, string _referrer, address _receiver, uint256 _minAmountOut, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit) _swapData) payable"
    ],
    "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x333f976915195ba9044fD0cd603cEcE936f6264e": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, address[] allowlist, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event AllowListAdd(address sender)",
      "event AllowListEnabledSet(bool enabled)",
      "event AllowListRemove(address sender)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint96 networkFeeAmountUSD, uint64 gasMultiplier, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFee, uint32 maxFee, uint16 ratio) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setAllowListEnabled(bool enabled)",
      "function setDynamicConfig(tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x335aC99bb3E51BDbF22025f092Ebc1Cf2c5cC619": [
      "constructor(address dodoApporve)",
      "event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function _DODO_APPROVE_() view returns (address)",
      "function _IS_ALLOWED_PROXY_(address) view returns (bool)",
      "function _NEW_OWNER_() view returns (address)",
      "function _OWNER_() view returns (address)",
      "function _PENDING_ADD_DODO_PROXY_() view returns (address)",
      "function _TIMELOCK_() view returns (uint256)",
      "function addDODOProxy()",
      "function claimOwnership()",
      "function claimTokens(address token, address who, address dest, uint256 amount)",
      "function init(address owner, address[] proxies)",
      "function initOwner(address newOwner)",
      "function isAllowedProxy(address _proxy) view returns (bool)",
      "function lockAddProxy()",
      "function removeDODOProxy(address oldDodoProxy)",
      "function transferOwnership(address newOwner)",
      "function unlockAddProxy(address newDodoProxy)"
    ],
    "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedMasterCopy(address masterCopy)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function NAME() view returns (string)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeMasterCopy(address _masterCopy)",
      "function changeThreshold(uint256 _threshold)",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getMessageHash(bytes message) view returns (bytes32)",
      "function getModules() view returns (address[])",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isOwner(address owner) view returns (bool)",
      "function isValidSignature(bytes _data, bytes _signature) returns (bytes4)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signMessage(bytes _data)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x34fEf5DA92c59d6aC21d0A75ce90B351D0Fb6CE6": [
      "constructor(address _singleton)"
    ],
    "0x353a5303dD2a39aB59aEd09fb971D359b94658C7": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesCollected(address indexed _token, address indexed _integrator, uint256 _integratorFee, uint256 _lifiFee)",
      "event FeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event LiFiFeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawIntegratorFees(address[] tokenAddresses)",
      "function batchWithdrawLifiFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeFees(uint256 integratorFee, uint256 lifiFee, address integratorAddress) payable",
      "function collectTokenFees(address tokenAddress, uint256 integratorFee, uint256 lifiFee, address integratorAddress)",
      "function confirmOwnershipTransfer()",
      "function getLifiTokenBalance(address tokenAddress) view returns (uint256)",
      "function getTokenBalance(address integratorAddress, address tokenAddress) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawIntegratorFees(address tokenAddress)",
      "function withdrawLifiFees(address tokenAddress)"
    ],
    "0x3596fB4e61dE7d5Cca41Ae5a3fFFcCdedE313a4e": [
      "constructor(address _router, address _admin, address _cozyPenguinNft, uint64 _destinationChainSelector, bool _travelLock)",
      "error EmergencyPaused()",
      "error ExceededMaxAmountOfNfts()",
      "error FailedToWithdrawEth(address admin, address target, uint256 value)",
      "error InvalidRouter(address router)",
      "error MigrationNotProposed()",
      "error NotAdmin(address caller)",
      "error NotConfirmedSourceAddress(address sourceAddress)",
      "error NotConfirmedSourceChain(uint64 sourceChainSelector)",
      "error NotEOA()",
      "error NotEnoughFees(uint256 calculatedFees, uint256 sentFees)",
      "error NotOwner(address caller, uint256 tokenId)",
      "error NotSortedTokenIds()",
      "error TimestampNotPassed(uint256 blockTimestamp, uint256 allowedTimestamp)",
      "error TravelLocked()",
      "event AdminSet(address admin)",
      "event GasLimitSet(uint256 gasLimit)",
      "event MaxAmountOfNftsSet(uint16)",
      "event MessageReceived(bytes32 messageId)",
      "event MessageSent(bytes32 messageId)",
      "event MigrationCanceled()",
      "event MigrationExecuted(address indexed migrateTo, uint256[] tokenIds)",
      "event MigrationQueued()",
      "event PenguinsUnlocked(address owner, uint256[] tokenIds)",
      "event SourceAddressSet(address sourceAddress)",
      "function MIGRATION_DELAY_DAYS() view returns (uint256)",
      "function _buildCCIPMessage(uint256[] _tokenIds) view returns (tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs))",
      "function cancelMigration()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function cozyPenguin() view returns (address)",
      "function destinationChainSelector() view returns (uint64)",
      "function emergencyPause() view returns (bool)",
      "function gasLimit() view returns (uint256)",
      "function getRouter() view returns (address)",
      "function lockTravel(bool _lock)",
      "function maxAmountOfNfts() view returns (uint16)",
      "function migrate(uint256[] tokenIds)",
      "function migrationAddress() view returns (address)",
      "function migrationAllowedTimestamp() view returns (uint256)",
      "function proposeMigration(address _migrateTo)",
      "function router() view returns (address)",
      "function setAdmin(address _admin)",
      "function setEmergencyPause(bool _pause)",
      "function setGasLimit(uint256 _gasLimit)",
      "function setMaxAmountOfNfts(uint16 _maxAmountOfNfts)",
      "function setSourceAddress(address _sourceAddress)",
      "function setTargetAddress(address _targetAddress)",
      "function sourceAddress() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function targetAddress() view returns (address)",
      "function travel(uint256[] _tokenIds) payable returns (bytes32 messageId)",
      "function travelLock() view returns (bool)",
      "function travelRequest(uint256[] _tokenIds) view returns (uint256 fees)",
      "function withdraw(address beneficiary)"
    ],
    "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x37347dD595C49212C5FC2D95EA10d1085896f51E": [
      "constructor(address _singleton)"
    ],
    "0x38147794FF247e5Fc179eDbAE6C37fff88f68C52": [
      "error ExecutionFailed(uint256 command_index, address target, string message)",
      "error OnlyDelegateCall()",
      "event ShortcutExecuted(bytes32 shortcutId)",
      "function executeShortcut(bytes32 shortcutId, bytes32[] commands, bytes[] state) payable returns (bytes[] returnData)"
    ],
    "0x3960f6c882d11B797bd3f574D77E339516813B5A": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EIP712DomainChanged()",
      "event Initialized(uint8 version)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(address _treasury)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
    ],
    "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x3Aee3e96c9E340cBe0fFFC5224Db9e97949f3899": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x3B2faF664d6cCA5248CD7f44a6538A1fFdCcF7F0": [
      "constructor(string _name, string _symbol, address _factory)",
      "error IXERC20_NotFactory()",
      "error IXERC20_NotHighEnoughLimits()",
      "error InvalidShortString()",
      "error StringTooLong(string str)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event BridgeLimitsSet(uint256 _mintingLimit, uint256 _burningLimit, address indexed _bridge)",
      "event EIP712DomainChanged()",
      "event LockboxSet(address _lockbox)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function FACTORY() view returns (address)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function bridges(address) view returns (tuple(uint256 timestamp, uint256 ratePerSecond, uint256 maxLimit, uint256 currentLimit) minterParams, tuple(uint256 timestamp, uint256 ratePerSecond, uint256 maxLimit, uint256 currentLimit) burnerParams)",
      "function burn(address _user, uint256 _amount)",
      "function burningCurrentLimitOf(address _bridge) view returns (uint256 _limit)",
      "function burningMaxLimitOf(address _bridge) view returns (uint256 _limit)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function lockbox() view returns (address)",
      "function mint(address _user, uint256 _amount)",
      "function mintingCurrentLimitOf(address _bridge) view returns (uint256 _limit)",
      "function mintingMaxLimitOf(address _bridge) view returns (uint256 _limit)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function renounceOwnership()",
      "function setLimits(address _bridge, uint256 _mintingLimit, uint256 _burningLimit)",
      "function setLockbox(address _lockbox)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0x3b70Eb33948Fbfdc3f2F2491b96DFB1Aa18054E0": [
      "constructor(address _cBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error ExternalCallFailed()",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "error UnAuthorized()",
      "event CBridgeRefund(address indexed _assetAddress, address indexed _to, uint256 amount)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaCBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint32 maxSlippage, uint64 nonce) _cBridgeData) payable",
      "function swapAndStartBridgeTokensViaCBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint32 maxSlippage, uint64 nonce) _cBridgeData) payable",
      "function triggerRefund(address _callTo, bytes _callData, address _assetAddress, address _to, uint256 _amount)"
    ],
    "0x3C826D17B47DB69E1a9C1e32E10768d3709f1b9A": [
      "constructor(address _foreignOmniBridge, address _wethOmniBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaOmniBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaOmniBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x3d3467e1036Ee25F6F4aa15e3Abf77443A23144C": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x3e26021C77799f8Dc7fa64957D8f324c971035Fb": [
      "error InvalidPayment(uint256 want, uint256 have)",
      "error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees)",
      "event NewFish(address indexed sender, bytes32 messageId, bytes payload)",
      "function fish() payable"
    ],
    "0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD": [
      "constructor(tuple(address permit2, address weth9, address seaportV1_5, address seaportV1_4, address openseaConduit, address nftxZap, address x2y2, address foundation, address sudoswap, address elementMarket, address nft20Zap, address cryptopunks, address looksRareV2, address routerRewardsDistributor, address looksRareRewardsDistributor, address looksRareToken, address v2Factory, address v3Factory, bytes32 pairInitCodeHash, bytes32 poolInitCodeHash) params)",
      "error BalanceTooLow()",
      "error BuyPunkFailed()",
      "error ContractLocked()",
      "error ETHNotAccepted()",
      "error ExecutionFailed(uint256 commandIndex, bytes message)",
      "error FromAddressIsNotOwner()",
      "error InsufficientETH()",
      "error InsufficientToken()",
      "error InvalidBips()",
      "error InvalidCommandType(uint256 commandType)",
      "error InvalidOwnerERC1155()",
      "error InvalidOwnerERC721()",
      "error InvalidPath()",
      "error InvalidReserves()",
      "error InvalidSpender()",
      "error LengthMismatch()",
      "error SliceOutOfBounds()",
      "error TransactionDeadlinePassed()",
      "error UnableToClaim()",
      "error UnsafeCast()",
      "error V2InvalidPath()",
      "error V2TooLittleReceived()",
      "error V2TooMuchRequested()",
      "error V3InvalidAmountOut()",
      "error V3InvalidCaller()",
      "error V3InvalidSwap()",
      "error V3TooLittleReceived()",
      "error V3TooMuchRequested()",
      "event RewardsSent(uint256 amount)",
      "function collectRewards(bytes looksRareClaim)",
      "function execute(bytes commands, bytes[] inputs) payable",
      "function execute(bytes commands, bytes[] inputs, uint256 deadline) payable",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) pure returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) pure returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) pure returns (bytes4)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)"
    ],
    "0x40c558575093eC1099CC21B020d9b8D13c74417F": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x411C71E1A08B5c3831caFE68a808F00b8ED03188": [
      "constructor(address router)",
      "error FailedToWithdrawEth(address owner, address target, uint256 value)",
      "event MessageSent(bytes32 messageId)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function acceptOwnership()",
      "function getNativeFee(uint64 destinationChainSelector, address receiver, address token, uint256 amount) view returns (uint256)",
      "function getSupportedTokens(uint64 chainSelector) view returns (address[] tokens)",
      "function owner() view returns (address)",
      "function send(uint64 destinationChainSelector, address receiver, tuple(address token, uint256 amount)[] tokensToSendDetails) returns (bytes32, uint256)",
      "function sendToken(uint64 destinationChainSelector, address receiver, address token, uint256 amount) payable",
      "function transferOwnership(address to)",
      "function withdraw(address beneficiary)",
      "function withdrawToken(address beneficiary, address token)"
    ],
    "0x411dE17f12D1A34ecC7F45f49844626267c75e81": [
      "constructor(address arm)",
      "error ZeroAddressNotAllowed()",
      "event ARMSet(address arm)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function acceptOwnership()",
      "function getARM() view returns (address)",
      "function owner() view returns (address)",
      "function setARM(address arm)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x411F81f16FF40984ac8a4546f2Ad19e22704693F": [
      "constructor(address _connextHandler)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetNotSupported()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaAmarok(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(bytes callData, address callTo, uint256 relayerFee, uint256 slippageTol, address delegate, uint32 destChainDomainId, bool payFeeWithSendingAsset) _amarokData) payable",
      "function swapAndStartBridgeTokensViaAmarok(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(bytes callData, address callTo, uint256 relayerFee, uint256 slippageTol, address delegate, uint32 destChainDomainId, bool payFeeWithSendingAsset) _amarokData) payable"
    ],
    "0x41627a90f2c6238f2BADAB72D5aB050B857fdAb5": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitError(bytes error)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x426c7fCd001A4EDD242A2bdcc7a2027de892500c": [
      "constructor(address _router, address _link, address _addrNFT)",
      "error InvalidRouter(address router)",
      "error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees)",
      "event MessageReceived(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text)",
      "event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address receiver, uint256[] idNFT, address feeToken, uint256 fees)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function LINK() view returns (address)",
      "function NFT() view returns (address)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function gas() view returns (uint256)",
      "function getLastReceivedMessageDetails() view returns (bytes32 messageId, string text)",
      "function getRouter() view returns (address)",
      "function maxCountTransfer() view returns (uint256)",
      "function owner() view returns (address)",
      "function priceTransfer() view returns (uint256)",
      "function senderPolygon() view returns (address)",
      "function setContracts(address _addrNFT, address _router, address _link, address _linkForWithdraw, address _senderPolygon)",
      "function setGas(uint256 _gas)",
      "function setMaxTransfer(uint256 _max)",
      "function setPrice(uint256 _price)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function transferToPolygon(uint64 destinationChainSelector, address receiver, uint256[] idNFT) payable returns (bytes32 messageId)",
      "function withdrawLink(uint256 _amount)",
      "function withdrawNFT(uint256 _id, address _addr)"
    ],
    "0x428C4abf8BB3ECc893bD3E0Be12b0f363c6e81aA": [
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error NativeAssetTransferFailed()",
      "error NoTransferToNullAddress()",
      "error NotAContract()",
      "error NullAddrIsNotAnERC20Token()",
      "error UnAuthorized()",
      "error WithdrawFailed()",
      "event LogWithdraw(address indexed _assetAddress, address _to, uint256 amount)",
      "function executeCallAndWithdraw(address _callTo, bytes _callData, address _assetAddress, address _to, uint256 _amount)",
      "function withdraw(address _assetAddress, address _to, uint256 _amount)"
    ],
    "0x44622f4604353E4815A4212d5a3dD137A1C7FF14": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449": [
      "constructor(uint256 minDelay, address admin, address[] proposers, address[] executors, address[] cancellers, address[] bypassers)",
      "event BypasserCallExecuted(uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "event Cancelled(bytes32 indexed id)",
      "event FunctionSelectorBlocked(bytes4 indexed selector)",
      "event FunctionSelectorUnblocked(bytes4 indexed selector)",
      "event MinDelayChange(uint256 oldDuration, uint256 newDuration)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function BYPASSER_ROLE() view returns (bytes32)",
      "function CANCELLER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function PROPOSER_ROLE() view returns (bytes32)",
      "function blockFunctionSelector(bytes4 selector)",
      "function bypasserExecuteBatch(tuple(address target, uint256 value, bytes data)[] calls) payable",
      "function cancel(bytes32 id)",
      "function executeBatch(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) payable",
      "function getBlockedFunctionSelectorAt(uint256 index) view returns (bytes4)",
      "function getBlockedFunctionSelectorCount() view returns (uint256)",
      "function getMinDelay() view returns (uint256 duration)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getTimestamp(bytes32 id) view returns (uint256 timestamp)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashOperationBatch(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function isOperation(bytes32 id) view returns (bool registered)",
      "function isOperationDone(bytes32 id) view returns (bool done)",
      "function isOperationPending(bytes32 id) view returns (bool pending)",
      "function isOperationReady(bytes32 id) view returns (bool ready)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function scheduleBatch(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unblockFunctionSelector(bytes4 selector)",
      "function updateDelay(uint256 newDelay)"
    ],
    "0x44beA2Ab010d1CedC4E60E97DA8F88b8840951B0": [
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NotPendingOwner()",
      "error OnlyContractOwner()",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address owner_)",
      "function transferOwnership(address _newOwner)"
    ],
    "0x45196c7C4bdFC0d2327d5fb034C27D1acCBa0606": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x48d2Ae51E665298000A42f924E7Ad09914f21821": [
      "constructor(address router, address token)",
      "error GasShouldBeZero()",
      "error InvalidToken()",
      "error NoDataAllowed()",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function acceptOwnership()",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32 messageId)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getRouter() view returns (address)",
      "function getToken() view returns (address)",
      "function owner() view returns (address)",
      "function transferOwnership(address to)"
    ],
    "0x49d195D3138D4E0E2b4ea88484C54AEE45B04B9F": [
      "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
      "function facetAddresses() view returns (address[] facetAddresses_)",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
      "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)"
    ],
    "0x4af4B497c998007eF83ad130318eB2b925a79dc8": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x4b0B89b90fF83247aEa12469CeA9A6222e09d54c": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesWithdrawn(address indexed token, address indexed to, uint256 amount)",
      "event GasFeesCollected(address indexed token, uint256 indexed chainId, address indexed receiver, uint256 feeAmount)",
      "event InsuranceFeesCollected(address indexed token, address indexed receiver, uint256 feeAmount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeGasFees(uint256 chainId, address receiver) payable",
      "function collectNativeInsuranceFees(address receiver) payable",
      "function collectTokenGasFees(address tokenAddress, uint256 feeAmount, uint256 chainId, address receiver)",
      "function collectTokenInsuranceFees(address tokenAddress, uint256 feeAmount, address receiver)",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawFees(address tokenAddress)"
    ],
    "0x4bEAa5D26300e81cd17e0981fc15494Bb4B10959": [
      "error CannotAuthoriseSelf()",
      "error InvalidContract()",
      "error UnAuthorized()",
      "event DexAdded(address indexed dexAddress)",
      "event DexRemoved(address indexed dexAddress)",
      "event FunctionSignatureApprovalChanged(bytes4 indexed functionSignature, bool indexed approved)",
      "function addDex(address _dex)",
      "function approvedDexs() view returns (address[] addresses)",
      "function batchAddDex(address[] _dexs)",
      "function batchRemoveDex(address[] _dexs)",
      "function batchSetFunctionApprovalBySignature(bytes4[] _signatures, bool _approval)",
      "function isFunctionApproved(bytes4 _signature) view returns (bool approved)",
      "function removeDex(address _dex)",
      "function setFunctionApprovalBySignature(bytes4 _signature, bool _approval)"
    ],
    "0x4C3aEe10334461F1f33c0A8843424de3F8fb7709": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x4C96324a3cb342aa51fA6ABa0ac4C838Df427464": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x50f6631B377be52E132DF35a2F05eA54fda882ac": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0x50f9bDe1c76bba997a5d6e7FEFff695ec8536194": [
      "constructor(address weth, address dodoApproveProxy, address feeReceiver)",
      "event OrderHistory(address fromToken, address toToken, address sender, uint256 fromAmount, uint256 returnAmount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function _DODO_APPROVE_PROXY_() view returns (address)",
      "function _WETH_() view returns (address)",
      "function addApproveWhiteList(address contractAddr)",
      "function addWhiteList(address contractAddr)",
      "function changeRouteFeeRate(uint256 newFeeRate)",
      "function changeRouteFeeReceiver(address newFeeReceiver)",
      "function changeTotalWeight(uint256 newTotalWeight)",
      "function dodoMutliSwap(uint256 fromTokenAmount, uint256 minReturnAmount, uint256[] splitNumber, address[] midToken, address[] assetFrom, bytes[] sequence, bytes feeData, uint256 deadLine) payable returns (uint256 receiveAmount)",
      "function externalSwap(address fromToken, address toToken, address approveTarget, address swapTarget, uint256 fromTokenAmount, uint256 minReturnAmount, bytes feeData, bytes callDataConcat, uint256 deadLine) payable returns (uint256 receiveAmount)",
      "function isApproveWhiteListedContract(address) view returns (bool)",
      "function isWhiteListedContract(address) view returns (bool)",
      "function mixSwap(address fromToken, address toToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] mixAdapters, address[] mixPairs, address[] assetTo, uint256 directions, bytes[] moreInfos, bytes feeData, uint256 deadLine) payable returns (uint256 receiveAmount)",
      "function owner() view returns (address)",
      "function removeApproveWhiteList(address contractAddr)",
      "function removeWhiteList(address contractAddr)",
      "function renounceOwnership()",
      "function routeFeeRate() view returns (uint256)",
      "function routeFeeReceiver() view returns (address)",
      "function superWithdraw(address token)",
      "function totalWeight() view returns (uint256)",
      "function transferOwnership(address newOwner)"
    ],
    "0x514910771AF9Ca656af840dff83E8264EcF986CA": [
      "function name() view returns (string)",
      "function approve(address _spender, uint256 _value) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address _from, address _to, uint256 _value) returns (bool)",
      "function decimals() view returns (uint8)",
      "function transferAndCall(address _to, uint256 _value, bytes _data) returns (bool success)",
      "function decreaseApproval(address _spender, uint256 _subtractedValue) returns (bool success)",
      "function balanceOf(address _owner) view returns (uint256 balance)",
      "function symbol() view returns (string)",
      "function transfer(address _to, uint256 _value) returns (bool success)",
      "function increaseApproval(address _spender, uint256 _addedValue) returns (bool success)",
      "function allowance(address _owner, address _spender) view returns (uint256 remaining)",
      "constructor()",
      "event Transfer(address indexed from, address indexed to, uint256 value, bytes data)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)"
    ],
    "0x51a00F38CB1c055EbbBE380D3bA3D27CAE5d9e61": [
      "event Transmission(bytes32 message_id)",
      "event TransferOwnership(address indexed owner)",
      "event SetGasLimit(uint256 gas_limit)",
      "event SetRouter(address router)",
      "event SetReceiver(uint64 indexed destination_chain_selector, address receiver)",
      "constructor(address _ccip_router, uint256 _gas_limit)",
      "function transmit(uint64 _destination_chain_selector, uint256 _block_number) payable",
      "function quote(uint64 _destination_chain_selector) view returns (uint256)",
      "function set_gas_limit(uint256 _gas_limit)",
      "function set_receiver(uint64 _destination_chain_selector, address _receiver)",
      "function set_router(address _ccip_router)",
      "function commit_transfer_ownership(address _future_owner)",
      "function accept_transfer_ownership()",
      "function router() view returns (address)",
      "function selector_to_receiver(uint64 arg0) view returns (address)",
      "function gas_limit() view returns (uint256)",
      "function owner() view returns (address)",
      "function future_owner() view returns (address)"
    ],
    "0x5215E9fd223BC909083fbdB2860213873046e45d": [
      "constructor(address _wrappedToken)",
      "error WithdrawFailure()",
      "function deposit() payable",
      "function withdraw()",
      "function wrappedToken() view returns (address)"
    ],
    "0x5292ef25cF25a1e28A8B44e6443088c332FEB48c": [
      "constructor()",
      "function ejectStETH()"
    ],
    "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A": [
      "event ExecutedAction(address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall, bytes resultData)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, bool withDelegatecall) payable returns (bytes)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x532C1f04E76C2AA6e146dfFa59a0cb0f68DAF21D": [
      "constructor(address _singleton)"
    ],
    "0x55562A08104837FF55E3A66c49A1419b6311c1E6": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0x55AB744a77f8b1daCa1B7D22d5112165Bcc77d4c": [
      "constructor(address _singleton)"
    ],
    "0x569940e02D4425eac61A7601632eC00d69f75c17": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x57D3bb46aF4A9b210FAE046796013090D428475F": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0x57F98A94AC66e197AF6776D5c094FF0da2C0B198": [
      "constructor(address _synapseRouter)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaSynapseBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(tuple(address swapAdapter, address tokenOut, uint256 minAmountOut, uint256 deadline, bytes rawParams) originQuery, tuple(address swapAdapter, address tokenOut, uint256 minAmountOut, uint256 deadline, bytes rawParams) destQuery) _synapseData) payable",
      "function swapAndStartBridgeTokensViaSynapseBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(tuple(address swapAdapter, address tokenOut, uint256 minAmountOut, uint256 deadline, bytes rawParams) originQuery, tuple(address swapAdapter, address tokenOut, uint256 minAmountOut, uint256 deadline, bytes rawParams) destQuery) _synapseData) payable"
    ],
    "0x5C2C3F56e33F45389aa4e1DA4D3a807A532a910c": [
      "constructor(address _squidRouter)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error InvalidRouteType()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaSquid(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint8 routeType, string destinationChain, string destinationAddress, string bridgedTokenSymbol, address depositAssetId, tuple(uint8 callType, address target, uint256 value, bytes callData, bytes payload)[] sourceCalls, bytes payload, uint256 fee, bool enableExpress) _squidData) payable",
      "function swapAndStartBridgeTokensViaSquid(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint8 routeType, string destinationChain, string destinationAddress, string bridgedTokenSymbol, address depositAssetId, tuple(uint8 callType, address target, uint256 value, bytes callData, bytes payload)[] sourceCalls, bytes payload, uint256 fee, bool enableExpress) _squidData) payable"
    ],
    "0x5e6aE74195111dA086dDF658A5110A687e5DBCdc": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587": [
      "constructor(address _factory, address _WETH)",
      "function WETH() view returns (address)",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function factory() view returns (address)",
      "function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountIn)",
      "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountOut)",
      "function getAmountsIn(uint256 amountOut, address[] path) view returns (uint256[] amounts)",
      "function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)",
      "function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)",
      "function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)",
      "function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountETH)",
      "function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountETH)",
      "function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountA, uint256 amountB)",
      "function swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable",
      "function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)"
    ],
    "0x5fda594b67d38E05fb4C9A1a4Cf3B22f48c8de4E": [
      "constructor(address _xDaiBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidDestinationChain()",
      "error InvalidReceiver()",
      "error InvalidSendingToken()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaXDaiBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData)",
      "function swapAndStartBridgeTokensViaXDaiBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x61135E701a2214C170c5F596D0067798FEfbaaE4": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitError(bytes error)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5": [
      "constructor(address _WETH)",
      "event ClientData(bytes clientData)",
      "event Error(string reason)",
      "event Exchange(address pair, uint256 amountOut, address output)",
      "event Fee(address token, uint256 totalAmount, uint256 totalFee, address[] recipients, uint256[] amounts, bool isBps)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Swapped(address sender, address srcToken, address dstToken, address dstReceiver, uint256 spentAmount, uint256 returnAmount)",
      "function WETH() view returns (address)",
      "function isWhitelist(address) view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function rescueFunds(address token, uint256 amount)",
      "function swap(tuple(address callTarget, address approveTarget, bytes targetData, tuple(address srcToken, address dstToken, address[] srcReceivers, uint256[] srcAmounts, address[] feeReceivers, uint256[] feeAmounts, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes clientData) execution) payable returns (uint256 returnAmount, uint256 gasUsed)",
      "function swapGeneric(tuple(address callTarget, address approveTarget, bytes targetData, tuple(address srcToken, address dstToken, address[] srcReceivers, uint256[] srcAmounts, address[] feeReceivers, uint256[] feeAmounts, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes clientData) execution) payable returns (uint256 returnAmount, uint256 gasUsed)",
      "function swapSimpleMode(address caller, tuple(address srcToken, address dstToken, address[] srcReceivers, uint256[] srcAmounts, address[] feeReceivers, uint256[] feeAmounts, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes executorData, bytes clientData) returns (uint256 returnAmount, uint256 gasUsed)",
      "function transferOwnership(address newOwner)",
      "function updateWhitelist(address[] addr, bool[] value)"
    ],
    "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64": [
      "constructor(address logic, address admin, bytes data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x63d48Ed3f50aBA950c17e37CA03356CCd6b6a280": [
      "constructor(uint256 _maxPhase, uint256 _maxTokens, uint256 _maxTokensPerUser, address _vrfCoordinator, address _link, bytes32 _vrfKeyHash, uint256 _vrfFee)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PhaseUpdated(uint256 phase)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function generateRandomOffset()",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function getNumClaimedByUser(address user) view returns (uint256)",
      "function imageBaseUri() view returns (string)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function isValidProof(bytes32[] _proof, uint256 _userPhase, uint256 _userMaxTokens) view returns (bool)",
      "function linkAddress() view returns (address)",
      "function lock()",
      "function locked() view returns (bool)",
      "function maxPhase() view returns (uint256)",
      "function maxTokens() view returns (uint256)",
      "function maxTokensPerUser() view returns (uint256)",
      "function merkleRoot() view returns (bytes32)",
      "function metadataBaseUri() view returns (string)",
      "function mint(uint256 numberOfTokens)",
      "function mintPresale(uint256 numberOfTokens, uint256 userPhase, uint256 userMaxTokens, bytes32[] proof)",
      "function name() view returns (string)",
      "function numClaimedByUser(address) view returns (uint256)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function phase() view returns (uint256)",
      "function randomOffset() view returns (uint256)",
      "function randomized() view returns (bool)",
      "function rawFulfillRandomness(bytes32 requestId, uint256 randomness)",
      "function renounceOwnership()",
      "function revealed() view returns (bool)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
      "function setApprovalForAll(address operator, bool approved)",
      "function setImageBaseUri(string uri)",
      "function setMaxPhase(uint256 _maxPhase)",
      "function setMaxTokensPerUser(uint256 _maxTokensPerUser)",
      "function setMerkleRoot(bytes32 root)",
      "function setMetadataBaseUri(string uri)",
      "function setPhase(uint256 _phase)",
      "function setRevealed(bool _revealed)",
      "function setUnknownTokenUri(string uri)",
      "function setVrfSettings(bytes32 _vrfKeyHash, uint256 _vrfFee)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function tokensOfOwnerInRange(address owner, uint256 start, uint256 end) view returns (tuple(uint256 lastIndex, uint256 foundCount, uint256[100] tokenIds) result)",
      "function totalSupply() view returns (uint256)",
      "function totalTokenSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function transferOwnership(address newOwner)",
      "function unknownTokenUri() view returns (string)",
      "function vrfCoordinatorAddress() view returns (address)",
      "function vrfFee() view returns (uint256)",
      "function vrfKeyHash() view returns (bytes32)",
      "function withdrawLink(address _link)"
    ],
    "0x64D41a7B52CA910f4995b1df33ea68471138374b": [
      "error CannotAuthoriseSelf()",
      "error InvalidContract()",
      "error UnAuthorized()",
      "event DexAdded(address indexed dexAddress)",
      "event DexRemoved(address indexed dexAddress)",
      "event FunctionSignatureApprovalChanged(bytes4 indexed functionSignature, bool indexed approved)",
      "function addDex(address _dex)",
      "function approvedDexs() view returns (address[] addresses)",
      "function batchAddDex(address[] _dexs)",
      "function batchRemoveDex(address[] _dexs)",
      "function batchSetFunctionApprovalBySignature(bytes4[] _signatures, bool _approval)",
      "function isFunctionApproved(bytes4 _signature) view returns (bool approved)",
      "function removeDex(address _dex)",
      "function setFunctionApprovalBySignature(bytes4 _signature, bool _approval)"
    ],
    "0x66598216D8E4d9AFE0F06d525B335b762229842f": [
      "constructor(address router)",
      "error GasLimitTooLow(uint256 minLimit, uint256 gotLimit)",
      "error InsufficientFee(uint256 gotFee, uint256 fee)",
      "error InsufficientMsgValue(uint256 gotAmount, uint256 msgValue)",
      "error InvalidRouter(address router)",
      "error InvalidToken(address gotToken, address expectedToken)",
      "error InvalidTokenAmounts(uint256 gotAmounts)",
      "error TokenAmountNotEqualToMsgValue(uint256 gotAmount, uint256 msgValue)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getRouter() view returns (address)",
      "function i_weth() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x66861f292099cAF644F4A8b6091De49BEC5E8a15": [
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaLIFuel(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaLIFuel(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x66F806aB43AB8a9bdd4Db54899179aC5A3EB6F51": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x6731C946747bA54c78e7a65d416Cde39E478ECeb": [
      "constructor(address _circleBridgeProxy, address _usdc)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error InvalidSendingToken()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaCelerCircleBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData)",
      "function swapAndStartBridgeTokensViaCelerCircleBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x69187eEC9b2593fAD2D646eD8815107bf618302e": [
      "constructor()",
      "error ApprovalCallerNotOwnerNorApproved()",
      "error ApprovalQueryForNonexistentToken()",
      "error ApprovalToCurrentOwner()",
      "error ApproveToCaller()",
      "error BalanceQueryForZeroAddress()",
      "error MintToZeroAddress()",
      "error MintZeroQuantity()",
      "error OperatorNotAllowed(address operator)",
      "error OwnerQueryForNonexistentToken()",
      "error TransferCallerNotOwnerNorApproved()",
      "error TransferFromIncorrectOwner()",
      "error TransferToNonERC721ReceiverImplementer()",
      "error TransferToZeroAddress()",
      "error URIQueryForNonexistentToken()",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function blockDate() view returns (uint256)",
      "function blockedTransfer() view returns (bool)",
      "function calculate(uint256 amount, uint256 bps) pure returns (uint256)",
      "function discontMaxMintCount(address) view returns (uint256)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function groupAddress(address) view returns (uint256)",
      "function groupDiscont(uint256) view returns (uint256)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function maxMintOneAddress() view returns (uint256)",
      "function mint(uint256 quantity) payable",
      "function mintAdmin(address _address, uint256 quantity)",
      "function myMintedNft(address) view returns (uint256)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function price() view returns (uint256)",
      "function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns (address, uint256)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
      "function setApprovalForAll(address operator, bool approved)",
      "function setBlockDate(uint256 _blockDate, bool _enable)",
      "function setDiscountForGroup(uint256 _group, uint256 _discount)",
      "function setMaxMintOneAddress(uint256 _maxMintOneAddress)",
      "function setPrice(uint256 _price)",
      "function setRoyaltyInfo(address _receiver, uint96 _royaltyFeesInBips)",
      "function setStepMaxMint(uint256 _stepMaxMint)",
      "function setWhiteListGroup(address[] _address, uint256 _group, uint256 _maxMintCount)",
      "function stepMaxMint() view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function transferOwnership(address newOwner)",
      "function withdrawFromContract(uint256 amount)"
    ],
    "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x69cb467EfD8044ac9eDB88F363309ab1cbFA0A15": [
      "error OnlyContractOwner()",
      "event PeripheryContractRegistered(string name, address contractAddress)",
      "function getPeripheryContract(string _name) view returns (address)",
      "function registerPeripheryContract(string _name, address _contractAddress)"
    ],
    "0x6a8b11bF29C0546991DEcD6E0Db8cC7Fda22bA97": [
      "constructor(address _cBridgeMessageBusAddress, address _owner, address _diamondAddress)",
      "error ContractCallNotAllowed()",
      "error ExternalCallFailed()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidConfig()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error UnAuthorized()",
      "error WithdrawFailed()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event LogWithdraw(address indexed _assetAddress, address indexed _to, uint256 amount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function cBridgeMessageBus() view returns (address)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function diamondAddress() view returns (address)",
      "function executeMessageWithTransfer(address, address _token, uint256 _amount, uint64, bytes _message, address) payable returns (uint8)",
      "function executeMessageWithTransferRefund(address _token, uint256 _amount, bytes _message, address) payable returns (uint8)",
      "function forwardSendMessageWithTransfer(address _receiver, uint256 _dstChainId, address _srcBridge, bytes32 _srcTransferId, bytes _message) payable",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function sendTokenTransfer(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint32 maxSlippage, uint64 nonce, bytes callTo, bytes callData, uint256 messageBusFee, uint8 bridgeType) _celerIMData) payable returns (bytes32 transferId, address bridgeAddress)",
      "function transferOwnership(address _newOwner)",
      "function triggerRefund(address _callTo, bytes _callData, address _assetAddress, address _to, uint256 _amount)",
      "function withdraw(address assetId, address receiver, uint256 amount)"
    ],
    "0x6aaD18a3cafB04b9a70761943796eCC179A1D933": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x6ce8b799002BbECc7df94c18BF150B3b0E4A28F4": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x6cfbd2aA4691fc18B9C209bDd43DC3943C228FCf": [
      "event SetTrustedRemote(uint256 originChainId, address originForwarder)",
      "function BASE_GAS_LIMIT() returns (uint256)",
      "function CROSS_CHAIN_CONTROLLER() returns (address)",
      "function adapterName() view returns (string)",
      "function forwardMessage(address, uint256, uint256 destinationChainId, bytes message) returns (address, uint256)",
      "function getTrustedRemoteByChainId(uint256) pure returns (address)",
      "function infraToNativeChainId(uint256 infraChainId) view returns (uint256)",
      "function nativeToInfraChainId(uint256 nativeChainId) view returns (uint256)",
      "function setupPayments()"
    ],
    "0x6dDF2F3f93688dfc9d37DF7078982cE8E6494DB2": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x6e118Db5ab7018FcF195e1310074688B8A1912B3": [
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaLIFuel(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaLIFuel(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0x6EE3413750e0c231eCd33745dE3d1EA5a5DA5991": [
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)"
    ],
    "0x6eF81a18E1E432C289DC0d1a670B78E8bbF9AA35": [
      "constructor(address _owner, address _wrapper)",
      "error Invalid()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAValidSpender()",
      "error UnAuthorized()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiHopTransfer(bytes8 _transactionId)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function decode_startBridgeTokensViaHopL1ERC20Packed(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee))",
      "function decode_startBridgeTokensViaHopL1NativePacked(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee))",
      "function decode_startBridgeTokensViaHopL2ERC20Packed(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee))",
      "function decode_startBridgeTokensViaHopL2NativePacked(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee))",
      "function encode_startBridgeTokensViaHopL1ERC20Packed(bytes8 transactionId, address receiver, uint256 destinationChainId, address sendingAssetId, uint256 minAmount, uint256 destinationAmountOutMin, address relayer, uint256 relayerFee, address hopBridge) pure returns (bytes)",
      "function encode_startBridgeTokensViaHopL1NativePacked(bytes8 transactionId, address receiver, uint256 destinationChainId, uint256 destinationAmountOutMin, address relayer, uint256 relayerFee, address hopBridge) pure returns (bytes)",
      "function encode_startBridgeTokensViaHopL2ERC20Packed(bytes32 transactionId, address receiver, uint256 destinationChainId, address sendingAssetId, uint256 minAmount, uint256 bonderFee, uint256 amountOutMin, uint256 destinationAmountOutMin, uint256 destinationDeadline, address wrapper) pure returns (bytes)",
      "function encode_startBridgeTokensViaHopL2NativePacked(bytes8 transactionId, address receiver, uint256 destinationChainId, uint256 bonderFee, uint256 amountOutMin) pure returns (bytes)",
      "function nativeBridge() view returns (address)",
      "function nativeExchangeAddress() view returns (address)",
      "function nativeHToken() view returns (address)",
      "function nativeL2CanonicalToken() view returns (address)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function setApprovalForHopBridges(address[] bridges, address[] tokensToApprove)",
      "function startBridgeTokensViaHopL1ERC20Min(bytes8 transactionId, address receiver, uint256 destinationChainId, address sendingAssetId, uint256 minAmount, uint256 destinationAmountOutMin, address relayer, uint256 relayerFee, address hopBridge)",
      "function startBridgeTokensViaHopL1ERC20Packed() payable",
      "function startBridgeTokensViaHopL1NativeMin(bytes8 transactionId, address receiver, uint256 destinationChainId, uint256 destinationAmountOutMin, address relayer, uint256 relayerFee, address hopBridge) payable",
      "function startBridgeTokensViaHopL1NativePacked() payable",
      "function startBridgeTokensViaHopL2ERC20Min(bytes8 transactionId, address receiver, uint256 destinationChainId, address sendingAssetId, uint256 minAmount, uint256 bonderFee, uint256 amountOutMin, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge)",
      "function startBridgeTokensViaHopL2ERC20Packed()",
      "function startBridgeTokensViaHopL2NativeMin(bytes8 transactionId, address receiver, uint256 destinationChainId, uint256 bonderFee, uint256 amountOutMin, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge) payable",
      "function startBridgeTokensViaHopL2NativePacked() payable",
      "function transferOwnership(address _newOwner)"
    ],
    "0x6F2064837D82358AFF96E2dFe6AA8953123A0249": [
      "constructor(string _baseTokenURI, address __swapRouter, address __hype, address __twapUtils, address __lendingRewards, address __WETH)",
      "event Borrow(address indexed wallet, uint256 indexed tokenId, uint256 amountETH)",
      "event DeleteLoan(uint256 indexed tokenId)",
      "event Deposit(address indexed wallet, uint256 indexed tokenId, uint256 amountCollateral)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PayBackLoan(address indexed wallet, uint256 indexed tokenId, uint256 amountDesired, uint256 amountFees)",
      "event Withdraw(address indexed wallet, uint256 indexed tokenId, uint256 amountCollateral)",
      "function borrow(uint256 _tokenId, uint256 _amountETHBorrowing) returns (uint256 tokenId)",
      "function borrowAPRMax() view returns (uint32)",
      "function borrowAPRMin() view returns (uint32)",
      "function borrowInitFee() view returns (uint32)",
      "function calculateAPRFees(uint256 _amountETHBorrowed, uint256 _aprStart) view returns (uint256)",
      "function calculateBorrowAPR() view returns (uint256)",
      "function checkUpkeep(bytes) view returns (bool upkeepNeeded, bytes performData)",
      "function currentBorrowPerPool(address) view returns (uint256)",
      "function custodian() view returns (address)",
      "function deposit(uint256 _tokenId, address _pool, uint256 _amount)",
      "function depositAndBorrow(uint256 _tokenId, address _pool, uint256 _amountDepositing, uint256 _amountETHBorrowing) returns (uint256 tokenId)",
      "function enabled() view returns (bool)",
      "function getAllWhitelistedPools() view returns (address[])",
      "function getETHBalance(address _wallet) view returns (uint256)",
      "function getLTVX96(uint256 _tokenId) view returns (uint256 ltvX96, uint256 ltvWithFeesX96, uint256 amountETHDepositedX96, uint256 amountETHBorrowedX96)",
      "function liquidateDefaultCapital() view returns (bool)",
      "function liquidateSlippage() view returns (uint32)",
      "function liquidationLTV() view returns (uint32)",
      "function loanNFT() view returns (address)",
      "function loans(uint256) view returns (uint256 created, address createdBy, uint256 aprStart, address collateralPool, uint256 amountDeposited, uint256 amountETHBorrowed)",
      "function maxBorrowPerPool(address) view returns (uint256)",
      "function maxLTVOverall() view returns (uint32)",
      "function maxLTVOverride(address) view returns (uint32)",
      "function maxLiquidationsPerUpkeep() view returns (uint32)",
      "function owner() view returns (address)",
      "function payBackLoan(uint256 _tokenId) payable",
      "function payBackLoanAndClose(uint256 _tokenId) payable",
      "function performUpkeep(bytes performData)",
      "function renounceOwnership()",
      "function setBorrowAPRMax(uint32 _apr)",
      "function setBorrowAPRMin(uint32 _apr)",
      "function setBorrowInitFee(uint32 _fee)",
      "function setEnabled(bool _enabled)",
      "function setLiquidateDefaultCapital(bool _shouldLiq)",
      "function setLiquidateSlippage(uint32 _slippage)",
      "function setLiquidationLTV(uint32 _ltv)",
      "function setMaxBorrowPerPool(address _pool, uint256 _amountETH)",
      "function setMaxLTVOverall(uint32 _ltv)",
      "function setMaxLTVOverride(address _pool, uint32 _ltv)",
      "function setMaxLiquidationsPerUpkeep(uint32 _max)",
      "function shouldLiquidateLoan(uint256 _tokenId) view returns (bool)",
      "function toggleWhitelistCollateralPool(address _pool)",
      "function transferOwnership(address newOwner)",
      "function whitelistPools(address) view returns (bool)",
      "function withdraw(uint256 _tokenId, uint256 _amount)"
    ],
    "0x6faA6906b9e4A59020e673910105567e809789E0": [
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NotPendingOwner()",
      "error OnlyContractOwner()",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address owner_)",
      "function transferOwnership(address _newOwner)"
    ],
    "0x6Ff6BF3BF8af2e419DDC7BF038aFa5EB92b6cD7e": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x70378147cC3Fa41C4351140F2356d3db8c3da3F4": [
      "constructor(address _cozyPenguinNft)",
      "error InvalidAddress()",
      "error NotCozyPenguinNft(address nftAddress)",
      "error NotOwner(address caller, uint256 tokenId)",
      "error NotSortedTokenIds()",
      "event MigrationExecuted(address indexed migrateTo, uint256[] tokenIds)",
      "event OperatorAddressSet(address operatorAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function confirmedOperatorAddress() view returns (address)",
      "function cozyPenguin() view returns (address)",
      "function migrate(address _migrationAddress, uint256[] tokenIds)",
      "function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns (bytes4)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setOperatorAddress(address _newConfirmedOperatorAddress)",
      "function transferOwnership(address newOwner)"
    ],
    "0x70996FeE3bc1BA38e36Ea356aee5d855161e6e52": [
      "constructor(address governor, address guardian, address baseChainPortal, address ccipRouter, address linkToken, uint64 governorChainSelector, uint64 executionDelay, uint32 intervalGuardianGoneRogue, uint32 intervalCommunicationLost)",
      "error ChainPortal__ActionExecutionFailed()",
      "error ChainPortal__ActionNotExecutable()",
      "error ChainPortal__ActionNotPending(uint128 actionId)",
      "error ChainPortal__ArrayLengthMismatch()",
      "error ChainPortal__InvalidActionId(uint128 actionId)",
      "error ChainPortal__InvalidChain(uint64 chainSelector)",
      "error ChainPortal__InvalidPortal()",
      "error ChainPortal__LaneNotAvailable()",
      "error ChainPortal__NoActionQueued()",
      "error ChainPortal__ZeroAddressTarget()",
      "error ChainPortal__ZeroTargets()",
      "error CrossChainGovernable__CommunicationNotLost()",
      "error CrossChainGovernable__NotAuthorized()",
      "error CrossChainGovernable__TooEarly()",
      "error CrossChainGovernable__ZeroAddress()",
      "error CrossChainGovernable__ZeroChainId()",
      "error CrossChainPortal__GuardianGoneRogue()",
      "error CrossChainPortal__NotFromBaseChainGovernor()",
      "error CrossChainPortal__NotSelfCall()",
      "error Guardable__NotGuardian()",
      "error InvalidRouter(address router)",
      "error UnsupportedDestinationChain(uint64 destChainSelector)",
      "event ActionAborted(uint256 indexed actionId)",
      "event ChainPortalsChanged(uint64[] indexed chainSelectors, address[] indexed portals)",
      "event CommunicationLostIntervalChanged(uint32 indexed newInterval)",
      "event CrossChainGovernorChanged(address indexed newGovernor, uint64 indexed governorChainSelector)",
      "event ExecutionDelayChanged(uint64 indexed executionDelay)",
      "event GuardiansChanged(address[] indexed guardians, bool[] indexed enabled)",
      "event InboundActionExecuted(bytes32 indexed messageId)",
      "event InboundActionQueued(uint256 indexed actionId, bytes32 indexed messageId)",
      "event IntervalGuardianGoneRogueChanged(uint32 indexed newInterval)",
      "event LanesChanged(address[] indexed senders, address[] indexed targets, uint64[] indexed chainSelectors, bool[] isEnabled)",
      "event OutboundActionSent(bytes32 indexed messageId)",
      "event PendingGovernorChanged(address indexed pendingGovernor, uint64 indexed pendingGovernorChainSelector)",
      "event QueuedActionExecuted(uint256 indexed actionId)",
      "function TRANSFER_GOVERNANCE_DELAY() view returns (uint32)",
      "function abortAction(uint64 actionId)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function checkUpkeep(bytes) view returns (bool, bytes)",
      "function emergencyCommunicationLost(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function getActionById(uint64 actionId) view returns (address sender, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas)",
      "function getActionInfoById(uint64 actionId) view returns (uint64 timestampQueued, uint64 fromChainSelector, uint8 actionState)",
      "function getActionQueueState() view returns (uint64 nextActionId, uint64 lastActionId, uint64 executionDelay, uint64 lastTimePendingActionExecuted)",
      "function getGovTransferReqTimestamp() view returns (uint64)",
      "function getGovernor() view returns (address)",
      "function getGovernorChainSelector() view returns (uint64)",
      "function getIntervalCommunicationLost() view returns (uint32)",
      "function getIntervalGuardianGoneRogue() view returns (uint32)",
      "function getPendingGovernor() view returns (address)",
      "function getPendingGovernorChainSelector() view returns (uint64)",
      "function getPortal(uint64 chainSelector) view returns (address portal)",
      "function getRouter() view returns (address)",
      "function isAuthorizedLane(address sender, uint64 destChainSelector, address target) view returns (bool)",
      "function isGuardian(address guardian) view returns (bool)",
      "function performUpkeep(bytes)",
      "function setChainPortals(uint64[] chainSelectors, address[] portals)",
      "function setExecutionDelay(uint64 executionDelay)",
      "function setGuardians(address[] guardians, bool[] enableds)",
      "function setIntervalCommunicationLost(uint32 intervalCommunicationLost)",
      "function setIntervalGuardianGoneRogue(uint32 intervalGuardianGoneRogue)",
      "function setLanes(address[] senders, uint64[] destChainSelectors, address[] receivers, bool[] enableds)",
      "function setPendingGovernor(address pendingGovernor, uint64 pendingGovernorChainSelector)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function teleport(uint64 chainSelector, uint64 gasLimit, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, address[] tokens, uint256[] amounts)",
      "function transferGovernance()"
    ],
    "0x711e80A9c1eB906d9Ae9d37E5432E6E7aCeEdA0B": [
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error NativeAssetTransferFailed()",
      "error NoTransferToNullAddress()",
      "error NotAContract()",
      "error NullAddrIsNotAnERC20Token()",
      "error UnAuthorized()",
      "error WithdrawFailed()",
      "event LogWithdraw(address indexed _assetAddress, address _to, uint256 amount)",
      "function executeCallAndWithdraw(address _callTo, bytes _callData, address _assetAddress, address _to, uint256 _amount)",
      "function withdraw(address _assetAddress, address _to, uint256 _amount)"
    ],
    "0x73822D7814E10A2D0C964AE52e74f08390De957B": [
      "event Delegate(address pool, uint256 validator, uint256 amount)",
      "event ExecuteNewEra(uint256 indexed era, uint256 rate)",
      "event NewClaimedNonce(address pool, uint256 validator, uint256 nonce)",
      "event NewReward(address pool, uint256 amount)",
      "event SetUnbondingDuration(uint256 unbondingDuration)",
      "event Stake(address staker, address poolAddress, uint256 tokenAmount, uint256 rTokenAmount)",
      "event Undelegate(address pool, uint256 validator, uint256 amount)",
      "event Unstake(address staker, address poolAddress, uint256 tokenAmount, uint256 rTokenAmount, uint256 burnAmount, uint256 unstakeIndex)",
      "event Withdraw(address staker, address poolAddress, uint256 tokenAmount, int256[] unstakeIndexList)",
      "function MAX_ERA_SECONDS() view returns (uint256)",
      "function MAX_PROTOCOL_FEE_COMMISSION() view returns (uint256)",
      "function MAX_RATE_CHANGE_LIMIT() view returns (uint256)",
      "function MAX_UNBONDING_DURATION() view returns (uint256)",
      "function MAX_UNSTAKE_FEE_COMMISSION() view returns (uint256)",
      "function UNBOND_TIMES_LIMIT() view returns (uint256)",
      "function addStakePool(address _poolAddress)",
      "function admin() view returns (address)",
      "function approve(address _poolAddress, uint256 _amount)",
      "function currentEra() view returns (uint256)",
      "function delegationBalancer() view returns (address)",
      "function eraOffset() view returns (uint256)",
      "function eraRate(uint256) view returns (uint256)",
      "function eraSeconds() view returns (uint256)",
      "function erc20TokenAddress() view returns (address)",
      "function getBondedPools() view returns (address[] pools)",
      "function getRate() view returns (uint256)",
      "function getUnstakeIndexListOf(address _staker) view returns (uint256[] unstakeIndexList)",
      "function getValidatorIdsOf(address _poolAddress) view returns (uint256[] validatorIds)",
      "function init(address _rTokenAddress, address _erc20TokenAddress, uint256 _unbondingDuration)",
      "function latestEra() view returns (uint256)",
      "function maxClaimedNonceOf(address, uint256) view returns (uint256)",
      "function migrate(address _poolAddress, uint256 _validatorId, uint256 _govDelegated, uint256 _bond, uint256 _unbond, uint256 _rate, uint256 _totalRTokenSupply, uint256 _totalProtocolFee, uint256 _era)",
      "function minStakeAmount() view returns (uint256)",
      "function newEra()",
      "function nextUnstakeIndex() view returns (uint256)",
      "function poolInfoOf(address) view returns (uint256 bond, uint256 unbond, uint256 active)",
      "function protocolFeeCommission() view returns (uint256)",
      "function rTokenAddress() view returns (address)",
      "function rateChangeLimit() view returns (uint256)",
      "function redelegate(address _poolAddress, uint256 _srcValidatorId, uint256 _dstValidatorId, uint256 _amount)",
      "function redelegateRewardOfPool(address) view returns (uint256)",
      "function rmStakePool(address _poolAddress)",
      "function setClaimedNonce(address _pool, uint256 _valId, uint256 _nonce)",
      "function setParams(uint256 _unstakeFeeCommission, uint256 _protocolFeeCommission, uint256 _minStakeAmount, uint256 _unbondingDuration, uint256 _rateChangeLimit, uint256 _eraSeconds, uint256 _eraOffset)",
      "function stake(uint256 _stakeAmount)",
      "function stakeWithPool(address _poolAddress, uint256 _stakeAmount)",
      "function totalProtocolFee() view returns (uint256)",
      "function totalRTokenSupply() view returns (uint256)",
      "function transferAdmin(address _newAdmin)",
      "function transferDelegationBalancer(address _newDelegationBalancer)",
      "function unbondingDuration() view returns (uint256)",
      "function unstake(uint256 _rTokenAmount)",
      "function unstakeAtIndex(uint256) view returns (uint256 era, address pool, address receiver, uint256 amount)",
      "function unstakeFeeCommission() view returns (uint256)",
      "function unstakeWithPool(address _poolAddress, uint256 _rTokenAmount)",
      "function withdraw()",
      "function withdrawProtocolFee(address _to)",
      "function withdrawWithPool(address _poolAddress)"
    ],
    "0x73aEB5ECA03Ad587B8Fdcc2B61f9fb4D2e3D90c1": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x777034fEF3CCBed74536Ea1002faec9620deAe0A": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x777172D858dC1599914a1C4c6c9fC48c99a60990": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x77730ed992D286c53F3A0838232c3957dAeaaF73": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x77760C63940eC0454b977A31ED65D6440Ec5Fb92": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x77780aA5e04e0EB5004767352748399d9D6eAee0": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x777B1b4e79058778f8362A3dc53Ee90f35934E8E": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x777B2Cc540E5E6824a5ceafB04c5a383874a6Bf5": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x777c1b853799f9c02c7A6395bA2340dD15794b3A": [
      "constructor()",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function governanceIsKilled() view returns (bool)",
      "function implementationAddress() view returns (address _implementationAddress)",
      "function interfaceAddress() view returns (address _interfaceAddress)",
      "function killGovernance()",
      "function logicAddress() view returns (address _logicAddress)",
      "function updateGovernanceAddress(address _governanceAddress)",
      "function updateImplementationAddress(address _implementationAddress)",
      "function updateInterfaceAddress(address _interfaceAddress)",
      "function updateLogicAddress(address _logicAddress)"
    ],
    "0x77A13abB679A0DAFB4435D1Fa4cCC95D1ab51cfc": [
      "error CannotAuthoriseSelf()",
      "error OnlyContractOwner()",
      "event ExecutionAllowed(address indexed account, bytes4 indexed method)",
      "event ExecutionDenied(address indexed account, bytes4 indexed method)",
      "function addressCanExecuteMethod(bytes4 _selector, address _executor) view returns (bool)",
      "function setCanExecute(bytes4 _selector, address _executor, bool _canExecute)"
    ],
    "0x78196436aF11b948c7036424B1ceA711fAdAd288": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x789d7f3e2eaA6de41133A7fB11d7390603645F31": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x7986C9892389854cAAbAC785ff18123B0070a5Fd": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x798Ad75154A15464BBE8E6C1ff07f390b1012b2c": [
      "event ChainPaused(uint256 indexed chainId)",
      "event ChainUnpaused(uint256 indexed chainId)",
      "event Error(bytes32 indexed errorId, uint256 indexed chainId)",
      "event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason)",
      "event Paused()",
      "event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash)",
      "event SetOperator(address newOperator, bool status)",
      "event SolidBridgeAdded(uint256 indexed chainId, address solidBridge)",
      "event SolidBridgedIn(address indexed recipient, uint256 indexed chainId, uint256 amount)",
      "event SolidBridgedOut(address indexed sender, address indexed recipient, uint256 indexed chainId, uint256 amount, uint256 nonce)",
      "event SolidEmissionsBridgedOut(address indexed sender, address indexed recipient, uint256 indexed chainId, uint256 amount, uint256 nonce)",
      "event Unpaused()",
      "function addChainMap(uint256 _chainId, address _remoteSolidBridge, string _axelar, uint64 _ccip, uint16 _lz)",
      "function base() view returns (address)",
      "function bridgeSolidOut(address _recipient, uint256 _chainId, uint256 _amount, uint256[] _feeInEther) payable",
      "function bridgedBase() view returns (uint256)",
      "function chainMap(uint256) view returns (string axelar, uint64 ccip, uint16 lz)",
      "function chains(uint256) view returns (uint256)",
      "function crosschainDistributor() view returns (address)",
      "function errors(bytes32) view returns (bytes)",
      "function failedMessages(uint16, bytes, uint64) view returns (bytes32)",
      "function getTrustedRemoteAddress(uint16 _remoteChainId) view returns (bytes)",
      "function initialize(address _axelarGateway, address _axelarGasService, address _ccipRouter, address _lzEndpoint, address _crosschainDistributor, address _minter, address _base)",
      "function isOperator(address) view returns (bool)",
      "function isPaused(uint256) view returns (bool)",
      "function isTrustedRemote(uint16 _srcChainId, bytes _srcAddress) view returns (bool)",
      "function minter() view returns (address)",
      "function nonce() view returns (uint256)",
      "function pauseBridge()",
      "function pauseChain(uint256 _chainId)",
      "function paused() view returns (bool)",
      "function pausedChains() view returns (uint256)",
      "function rescueAssets(address _to, address _token, uint256 _amount)",
      "function retryError(bytes32 _errorId, uint256 _chainId)",
      "function setRemoteSolidBridge(uint256 _chainId, address _remoteSolidBridge)",
      "function setTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress)",
      "function solidBridgeMap(uint256) view returns (address)",
      "function supportedChains() view returns (uint256[] _chains)",
      "function unpauseBridge()",
      "function unpauseChain(uint256 _chainId)"
    ],
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D": [
      "constructor(address _factory, address _WETH)",
      "function WETH() view returns (address)",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function factory() view returns (address)",
      "function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountIn)",
      "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountOut)",
      "function getAmountsIn(uint256 amountOut, address[] path) view returns (uint256[] amounts)",
      "function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)",
      "function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)",
      "function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)",
      "function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountETH)",
      "function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountETH)",
      "function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountA, uint256 amountB)",
      "function swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable",
      "function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)"
    ],
    "0x7A5c119ec5dDbF9631cf40f6e5DB28f31d4332a0": [
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "function extractBridgeData(bytes data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function extractData(bytes data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] swapData)",
      "function extractGenericSwapParameters(bytes data) pure returns (address sendingAssetId, uint256 amount, address receiver, address receivingAssetId, uint256 receivingAmount)",
      "function extractMainParameters(bytes data) pure returns (string bridge, address sendingAssetId, address receiver, uint256 amount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall)",
      "function extractSwapData(bytes data) pure returns (tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] swapData)",
      "function validateCalldata(bytes data, string bridge, address sendingAssetId, address receiver, uint256 amount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) pure returns (bool isValid)",
      "function validateDestinationCalldata(bytes data, bytes callTo, bytes dstCalldata) pure returns (bool isValid)"
    ],
    "0x7ace867b3a503C6C76834ac223993FBD8963BED2": [
      "constructor(address _logic, address _admin, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function getAdmin() view returns (address)"
    ],
    "0x7Afe7088aff57173565F4b034167643AA8b9171c": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x7b2E3FC7510D1A51b3bef735F985446589219354": [
      "constructor(address _registry, address _variableBalanceRecords, uint256 _actionIdOffset, address _owner, address[] _managers, bool _addOwnerToManagers)",
      "error CallerGuardError(address caller)",
      "error GatewayNotSetError()",
      "error ListSizeLimitError()",
      "error MessageFeeError()",
      "error NativeTokenValueError()",
      "error NonContractAddressError(address account)",
      "error OnlyGatewayError()",
      "error OnlyManagerError()",
      "error OnlySelfError()",
      "error ReservedTokenError()",
      "error RouterNotSetError()",
      "error SafeApproveError()",
      "error SafeTransferError()",
      "error SafeTransferFromError()",
      "error SafeTransferNativeError()",
      "error SameChainIdError()",
      "error SameTokenError()",
      "error SwapAmountMaxError()",
      "error SwapAmountMinError()",
      "error SwapError()",
      "error TargetSwapInfoError()",
      "error TokenMintError()",
      "error VaultNotSetError()",
      "event ActionLocal(uint256 indexed actionId, address indexed sender, address recipient, address fromToken, address toToken, uint256 fromAmount, uint256 toAmount, uint256 toTokenFee, uint256 timestamp)",
      "event ActionSource(uint256 indexed actionId, uint256 indexed targetChainId, address indexed sourceSender, address targetRecipient, uint256 gatewayType, address sourceToken, address targetToken, uint256 amount, uint256 fee, uint256 timestamp)",
      "event ActionTarget(uint256 indexed actionId, uint256 indexed sourceChainId, bool indexed isSuccess, uint256 timestamp)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RenounceManagerRole(address indexed account)",
      "event SetCallerGuardMode(uint8 indexed callerGuardMode)",
      "event SetListedCallerGuardContract(address indexed contractAddress, bool indexed isListed)",
      "event SetManager(address indexed account, bool indexed value)",
      "event SetRegistry(address indexed registryAddress)",
      "event SetVariableBalanceRecords(address indexed recordsAddress)",
      "event SourceProcessed(uint256 indexed actionId, bool indexed isLocal, address indexed sender, uint256 routerType, address fromTokenAddress, address toTokenAddress, uint256 fromAmount, uint256 resultAmount)",
      "event TargetProcessed(uint256 indexed actionId, address indexed recipient, uint256 routerType, address fromTokenAddress, address toTokenAddress, uint256 fromAmount, uint256 resultAmount)",
      "event Unpaused(address account)",
      "event VariableBalanceAllocated(uint256 indexed actionId, address indexed recipient, uint256 vaultType, uint256 amount)",
      "function SYSTEM_VERSION_ID() view returns (uint256)",
      "function calculateLocalAmount(uint256 _fromAmount, bool _isForward) view returns (uint256 result)",
      "function calculateVaultAmount(uint256 _vaultType, uint256 _fromChainId, uint256 _toChainId, uint256 _fromAmount, bool _isForward) view returns (uint256 result)",
      "function callerGuardMode() view returns (uint8)",
      "function claimVariableToken(uint256 _vaultType)",
      "function cleanup(address _tokenAddress, uint256 _tokenAmount)",
      "function convertVariableBalanceToVaultAsset(uint256 _vaultType)",
      "function execute(tuple(uint256 gatewayType, uint256 vaultType, address sourceTokenAddress, tuple(uint256 fromAmount, uint256 routerType, bytes routerData) sourceSwapInfo, uint256 targetChainId, address targetTokenAddress, tuple(uint256 fromAmount, uint256 routerType, bytes routerData)[] targetSwapInfoOptions, address targetRecipient, bytes gatewaySettings) _action) payable returns (uint256 actionId)",
      "function executeLocal(tuple(address fromTokenAddress, address toTokenAddress, tuple(uint256 fromAmount, uint256 routerType, bytes routerData) swapInfo, address recipient) _localAction) payable returns (uint256 actionId)",
      "function fullListedCallerGuardContractList() view returns (address[])",
      "function fullManagerList() view returns (address[])",
      "function handleExecutionPayload(uint256 _messageSourceChainId, bytes _payloadData)",
      "function isListedCallerGuardContract(address _account) view returns (bool)",
      "function isManager(address _account) view returns (bool)",
      "function isReservedToken(address _tokenAddress) view returns (bool)",
      "function listedCallerGuardContractCount() view returns (uint256)",
      "function listedCallerGuardContractIndexMap(address) view returns (bool isSet, uint256 value)",
      "function listedCallerGuardContractList(uint256) view returns (address)",
      "function managerCount() view returns (uint256)",
      "function messageFeeEstimate(uint256 _gatewayType, uint256 _targetChainId, bytes[] _targetRouterDataOptions, bytes _gatewaySettings) view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function registry() view returns (address)",
      "function renounceManagerRole()",
      "function renounceOwnership()",
      "function selfCallTarget(tuple(address router, address routerTransfer, address vault, uint256 gasReserve) _settings, tuple(uint256 actionId, address sourceSender, uint256 vaultType, address targetTokenAddress, tuple(uint256 fromAmount, uint256 routerType, bytes routerData) targetSwapInfo, address targetRecipient) _targetMessage)",
      "function setCallerGuardMode(uint8 _callerGuardMode)",
      "function setListedCallerGuardContracts(tuple(address account, bool flag)[] _items)",
      "function setManager(address _account, bool _value)",
      "function setRegistry(address _registry)",
      "function tokenBalance(address _tokenAddress) view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function variableBalance(address _account, uint256 _vaultType) view returns (uint256)",
      "function variableBalanceRecords() view returns (address)"
    ],
    "0x7cFdffE0e298b3CAC2cFe1F31c9965d9A49C3184": [
      "constructor(address _router)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetNotSupported()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaGravity(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(string destinationAddress) _gravityData) payable",
      "function swapAndStartBridgeTokensViaGravity(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(string destinationAddress) _gravityData) payable"
    ],
    "0x7D507e6E89C52aE610b8D0151c8cb24c24e43bdb": [
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function setApprovalForBridges(address[] bridges, address[] tokensToApprove)",
      "function startBridgeTokensViaHopL1ERC20(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function startBridgeTokensViaHopL1Native(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function startBridgeTokensViaHopL2ERC20(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData)",
      "function startBridgeTokensViaHopL2Native(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function swapAndStartBridgeTokensViaHopL1ERC20(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function swapAndStartBridgeTokensViaHopL1Native(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function swapAndStartBridgeTokensViaHopL2ERC20(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function swapAndStartBridgeTokensViaHopL2Native(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address hopBridge, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable"
    ],
    "0x7EE66EA2cEB877BC06B86db09bb9a07e174de672": [
      "constructor(address _affinePass, address router)",
      "error BridgePaused()",
      "error DestinationChainNotWhitelisted(uint64 destinationChainSelector)",
      "error FeeUnpaid()",
      "error InvalidRouter(address router)",
      "error OnlyOwnerCanBridge()",
      "error SenderNotWhitelisted(address sender)",
      "error SourceChainNotWhitelisted(uint64 sourceChainSelector)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event BridgeReceipt(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address receiver, uint256 id)",
      "event BridgeRequest(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address sender, uint256 id)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function affinePass() view returns (address)",
      "function bridgePass(uint64 destinationChainSelector, address receiver, uint256 id) payable returns (bytes32 messageId)",
      "function ccipFee(uint64 destinationChainSelector) view returns (uint256)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function chainReceiver(uint64) view returns (address)",
      "function getRouter() view returns (address)",
      "function initialize()",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setPaused(bool _paused)",
      "function setchainReceiver(uint64 chainSelector, address reciever)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function whitelistDestinationChain(uint64 _destinationChainSelector, bool _whitelist)",
      "function whitelistSender(address _sender, bool _whitelist)",
      "function whitelistSourceChain(uint64 _sourceChainSelector, bool _whitelist)",
      "function whitelistedDestinationChains(uint64) view returns (bool)",
      "function whitelistedSenders(address) view returns (bool)",
      "function whitelistedSourceChains(uint64) view returns (bool)",
      "function withdraw(uint256 amount)"
    ],
    "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D": [
      "constructor(address wrappedNative, address armProxy)",
      "error BadARMSignal()",
      "error FailedToSendValue()",
      "error InsufficientFeeTokenAmount()",
      "error InvalidMsgValue()",
      "error InvalidRecipientAddress(address to)",
      "error OffRampMismatch(uint64 chainSelector, address offRamp)",
      "error OnlyOffRamp()",
      "error UnsupportedDestinationChain(uint64 destChainSelector)",
      "event MessageExecuted(bytes32 messageId, uint64 sourceChainSelector, address offRamp, bytes32 calldataHash)",
      "event OffRampAdded(uint64 indexed sourceChainSelector, address offRamp)",
      "event OffRampRemoved(uint64 indexed sourceChainSelector, address offRamp)",
      "event OnRampSet(uint64 indexed destChainSelector, address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function MAX_RET_BYTES() view returns (uint16)",
      "function acceptOwnership()",
      "function applyRampUpdates(tuple(uint64 destChainSelector, address onRamp)[] onRampUpdates, tuple(uint64 sourceChainSelector, address offRamp)[] offRampRemoves, tuple(uint64 sourceChainSelector, address offRamp)[] offRampAdds)",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32)",
      "function getArmProxy() view returns (address)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getOffRamps() view returns (tuple(uint64 sourceChainSelector, address offRamp)[])",
      "function getOnRamp(uint64 destChainSelector) view returns (address)",
      "function getSupportedTokens(uint64 chainSelector) view returns (address[])",
      "function getWrappedNative() view returns (address)",
      "function isChainSupported(uint64 chainSelector) view returns (bool)",
      "function isOffRamp(uint64 sourceChainSelector, address offRamp) view returns (bool)",
      "function owner() view returns (address)",
      "function recoverTokens(address tokenAddress, address to, uint256 amount)",
      "function routeMessage(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message, uint16 gasForCallExactCheck, uint256 gasLimit, address receiver) returns (bool success, bytes retData, uint256 gasUsed)",
      "function setWrappedNative(address wrappedNative)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x80EbA3855878739F4710233A8a19d89Bdd2ffB8E": [
      "constructor(address owner_)",
      "error AmountTooLow(address token)",
      "error Duplicate(address token)",
      "error WrongValue(uint256 value, uint256 amount)",
      "function enso() view returns (address)",
      "function routeMulti(tuple(address token, uint256 amount)[] tokensIn, bytes32[] commands, bytes[] state) payable returns (bytes[] returnData)",
      "function routeSingle(address tokenIn, uint256 amountIn, bytes32[] commands, bytes[] state) payable returns (bytes[] returnData)",
      "function safeRouteMulti(tuple(address token, uint256 amount)[] tokensIn, tuple(address token, uint256 amount)[] tokensOut, address receiver, bytes32[] commands, bytes[] state) payable returns (bytes[] returnData)",
      "function safeRouteSingle(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, address receiver, bytes32[] commands, bytes[] state) payable returns (bytes[] returnData)"
    ],
    "0x8272dbBA30f14900b22b4bfC8DB4E88B02bA413a": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0x8291a8E8dCF429e2FA7d032bF3E583ee959F3B06": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x8300e89e82A840176eb250EcDA0A7dBDb4a6B12D": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x831097033C88c82a7F1897b168Aa88cC44540C8f": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x85225Ed797fd4128Ac45A992C46eA4681a7A15dA": [
      "constructor(address _twapUtils, address _manager, address _swapRouter, address _factory, address _WETH9)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Burn(address wallet, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function WETH9() view returns (address)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function amms(address) view returns (bool)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 _amount)",
      "function calculateTaxFromAmount(uint256 _amount) view returns (uint256)",
      "function collectLiquidityPositionFees(address _pool)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function depositLiquidityPosition(uint256 _tokenId)",
      "function factory() view returns (address)",
      "function forgiveBot(address _bot)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function isBot(address) view returns (bool)",
      "function launch()",
      "function launchTime() view returns (uint256)",
      "function lendingPool() view returns (address)",
      "function lendingRewards() view returns (address)",
      "function liquidityPositions(address) view returns (uint256)",
      "function lpCreatePool(uint24 _fee, uint256 _initialPriceX96, uint16 _initPriceObservations)",
      "function lpCreatePosition(uint24 _fee, uint256 _tokensNoDecimals) payable",
      "function lpPosManager() view returns (address)",
      "function lpTax() view returns (uint32)",
      "function manualSwap()",
      "function maxTax() view returns (uint32)",
      "function minTax() view returns (uint32)",
      "function name() view returns (string)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function owner() view returns (address)",
      "function poolBalToMarketCapRatio() view returns (uint256 lendPoolETHBal, uint256 marketCapETH)",
      "function poolToMarketCapTarget() view returns (uint32)",
      "function renounceOwnership()",
      "function rewardsExcluded(address) view returns (bool)",
      "function rewardsLocker() view returns (address)",
      "function setIsRewardsExcluded(address _wallet, bool _isExcluded)",
      "function setLendingPool(address _pool)",
      "function setLpTax(uint32 _tax)",
      "function setMaxTax(uint32 _tax)",
      "function setMinTax(uint32 _tax)",
      "function setPoolToMarketCapTarget(uint32 _target)",
      "function setSwapAtAmount(uint256 _amount)",
      "function setSwapEnabled(bool _isEnabled)",
      "function setTaxOnAction(bool _onBuy, bool _onSell, bool _onTransfer)",
      "function setTaxesEnabled(bool _enabled)",
      "function swapAtAmount() view returns (uint256)",
      "function swapEnabled() view returns (bool)",
      "function swapRouter() view returns (address)",
      "function symbol() view returns (string)",
      "function taxesEnabled() view returns (bool)",
      "function taxesOnBuys() view returns (bool)",
      "function taxesOnSells() view returns (bool)",
      "function taxesOnTransfers() view returns (bool)",
      "function toggleAmm(address _amm)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function twapUtils() view returns (address)",
      "function withdrawLiquidityPosition(address _pool)"
    ],
    "0x85db5038d66e7fB5AB656215D21fE64D5EEe1Ed6": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x87C10910DA7258E55dA2C5d43739fB68B12E6a4b": [
      "error AlreadyInitialized()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidConfig()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NotInitialized()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OptimismBridgeRegistered(address indexed assetId, address bridge)",
      "event OptimismInitialized(tuple(address assetId, address bridge)[] configs)",
      "function initOptimism(tuple(address assetId, address bridge)[] configs, address standardBridge)",
      "function registerOptimismBridge(address assetId, address bridge)",
      "function startBridgeTokensViaOptimismBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address assetIdOnL2, uint32 l2Gas, bool isSynthetix) _optimismData) payable",
      "function swapAndStartBridgeTokensViaOptimismBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address assetIdOnL2, uint32 l2Gas, bool isSynthetix) _optimismData) payable"
    ],
    "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x888888435FDe8e7d4c54cAb67f206e4199454c60": [
      "constructor(address owner)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address account, uint256 amount)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0x894b3e1e30Be0727eb138d2cceb0A99d2Fc4C55D": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesWithdrawn(address indexed token, address indexed to, uint256 amount)",
      "event GasFeesCollected(address indexed token, address indexed receiver, uint256 feeAmount)",
      "event InsuranceFeesCollected(address indexed token, address indexed receiver, uint256 feeAmount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeGasFees(uint256 feeAmount, address receiver) payable",
      "function collectNativeInsuranceFees(uint256 feeAmount, address receiver) payable",
      "function collectTokenGasFees(address tokenAddress, uint256 feeAmount, address receiver)",
      "function collectTokenInsuranceFees(address tokenAddress, uint256 feeAmount, address receiver)",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawFees(address tokenAddress)"
    ],
    "0x8B63b3DE93431C0f756A493644d128134291fA1b": [
      "constructor(tuple(tuple(address blessVoteAddr, address curseVoteAddr, address curseUnvoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "error AlreadyVotedToCurse(address voter, bytes32 curseId)",
      "error InvalidConfig()",
      "error InvalidCurseState()",
      "error InvalidCursesHash(bytes32 expectedCursesHash, bytes32 actualCursesHash)",
      "error InvalidVoter(address voter)",
      "error MustRecoverFromCurse()",
      "event AlreadyBlessed(uint32 indexed configVersion, address indexed voter, tuple(address commitStore, bytes32 root) taggedRoot)",
      "event AlreadyVotedToBless(uint32 indexed configVersion, address indexed voter, tuple(address commitStore, bytes32 root) taggedRoot)",
      "event ConfigSet(uint32 indexed configVersion, tuple(tuple(address blessVoteAddr, address curseVoteAddr, address curseUnvoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "event Cursed(uint32 indexed configVersion, uint256 timestamp)",
      "event OwnerCursed(uint256 timestamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event RecoveredFromCurse()",
      "event ReusedVotesToCurse(uint32 indexed configVersion, address indexed voter, uint8 weight, uint32 voteCount, bytes32 cursesHash, uint16 accumulatedWeight)",
      "event SkippedUnvoteToCurse(address indexed voter, bytes32 expectedCursesHash, bytes32 actualCursesHash)",
      "event TaggedRootBlessVotesReset(uint32 indexed configVersion, tuple(address commitStore, bytes32 root) taggedRoot, bool wasBlessed)",
      "event TaggedRootBlessed(uint32 indexed configVersion, tuple(address commitStore, bytes32 root) taggedRoot, uint16 accumulatedWeight)",
      "event UnvotedToCurse(uint32 indexed configVersion, address indexed voter, uint8 weight, uint32 voteCount, bytes32 cursesHash)",
      "event VotedToBless(uint32 indexed configVersion, address indexed voter, tuple(address commitStore, bytes32 root) taggedRoot, uint8 weight)",
      "event VotedToCurse(uint32 indexed configVersion, address indexed voter, uint8 weight, uint32 voteCount, bytes32 curseId, bytes32 cursesHash, uint16 accumulatedWeight)",
      "function acceptOwnership()",
      "function getBlessProgress(tuple(address commitStore, bytes32 root) taggedRoot) view returns (address[] blessVoteAddrs, uint16 accumulatedWeight, bool blessed)",
      "function getConfigDetails() view returns (uint32 version, uint32 blockNumber, tuple(tuple(address blessVoteAddr, address curseVoteAddr, address curseUnvoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "function getCurseProgress() view returns (address[] curseVoteAddrs, uint32[] voteCounts, bytes32[] cursesHashes, uint16 accumulatedWeight, bool cursed)",
      "function isBlessed(tuple(address commitStore, bytes32 root) taggedRoot) view returns (bool)",
      "function isCursed() view returns (bool)",
      "function owner() view returns (address)",
      "function ownerCurse()",
      "function ownerResetBlessVotes(tuple(address commitStore, bytes32 root)[] taggedRoots)",
      "function ownerUnvoteToCurse(tuple(address curseVoteAddr, bytes32 cursesHash, bool forceUnvote)[] unvoteRecords)",
      "function setConfig(tuple(tuple(address blessVoteAddr, address curseVoteAddr, address curseUnvoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function unvoteToCurse(address curseVoteAddr, bytes32 cursesHash)",
      "function voteToBless(tuple(address commitStore, bytes32 root)[] taggedRoots)",
      "function voteToCurse(bytes32 curseId)"
    ],
    "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x8bEFCa744c6f2b567b1863dcF055C593afdC11A0": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint192 usdPerToken)[] tokenPriceUpdates, uint64 destChainSelector, uint192 usdPerUnitGas) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8": [
      "constructor(address logic, address admin_, bytes data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad": [
      "constructor(address[] priceUpdaters, address[] feeTokens, uint32 stalenessThreshold)",
      "error ChainNotSupported(uint64 chain)",
      "error InvalidStalenessThreshold()",
      "error OnlyCallableByUpdaterOrOwner()",
      "error StaleGasPrice(uint64 destChainSelector, uint256 threshold, uint256 timePassed)",
      "error StaleTokenPrice(address token, uint256 threshold, uint256 timePassed)",
      "error TokenNotSupported(address token)",
      "event FeeTokenAdded(address indexed feeToken)",
      "event FeeTokenRemoved(address indexed feeToken)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PriceUpdaterRemoved(address indexed priceUpdater)",
      "event PriceUpdaterSet(address indexed priceUpdater)",
      "event UsdPerTokenUpdated(address indexed token, uint256 value, uint256 timestamp)",
      "event UsdPerUnitGasUpdated(uint64 indexed destChain, uint256 value, uint256 timestamp)",
      "function acceptOwnership()",
      "function applyFeeTokensUpdates(address[] feeTokensToAdd, address[] feeTokensToRemove)",
      "function applyPriceUpdatersUpdates(address[] priceUpdatersToAdd, address[] priceUpdatersToRemove)",
      "function convertTokenAmount(address fromToken, uint256 fromTokenAmount, address toToken) view returns (uint256)",
      "function getDestinationChainGasPrice(uint64 destChainSelector) view returns (tuple(uint224 value, uint32 timestamp))",
      "function getFeeTokens() view returns (address[])",
      "function getPriceUpdaters() view returns (address[])",
      "function getStalenessThreshold() view returns (uint128)",
      "function getTokenAndGasPrices(address token, uint64 destChainSelector) view returns (uint224 tokenPrice, uint224 gasPriceValue)",
      "function getTokenPrice(address token) view returns (tuple(uint224 value, uint32 timestamp))",
      "function getTokenPrices(address[] tokens) view returns (tuple(uint224 value, uint32 timestamp)[])",
      "function getValidatedTokenPrice(address token) view returns (uint224)",
      "function owner() view returns (address)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function updatePrices(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates)"
    ],
    "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x90C30227f04A4d7Ff86Eab8CA56eC25DD5fa15D2": [
      "constructor(address _xerc20, address _erc20, bool _isNative)",
      "error IXERC20Lockbox_Native()",
      "error IXERC20Lockbox_NotNative()",
      "error IXERC20Lockbox_WithdrawFailed()",
      "event Deposit(address _sender, uint256 _amount)",
      "event Withdraw(address _sender, uint256 _amount)",
      "function ERC20() view returns (address)",
      "function IS_NATIVE() view returns (bool)",
      "function XERC20() view returns (address)",
      "function deposit(uint256 _amount)",
      "function deposit() payable",
      "function withdraw(uint256 _amount)"
    ],
    "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x9244d2cf73861Ee7aA79Ffe90fe4eDF925482795": [
      "constructor(bytes32 _merkleRoot)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "event WhitelistMerkleRootUpdated(bytes32 indexed merkleRoot)",
      "function MAX_MINTABLE_SUPPLY() view returns (uint256)",
      "function MAX_PUBLIC_MINT() view returns (uint256)",
      "function MAX_RESERVE_TOKENS() view returns (uint256)",
      "function MAX_SUPPLY() view returns (uint256)",
      "function MAX_WHITELIST_MINT() view returns (uint256)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function baseURI() view returns (string)",
      "function bridgeBurn(uint256 tokenId)",
      "function bridgeMint(address to, uint256 tokenId)",
      "function burn(uint256 tokenId)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function hasMinted(address _address) view returns (bool)",
      "function hasMintedWhitelist(address _address) view returns (bool)",
      "function hasRemainingSupply() view returns (bool)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function isWhitelisted(address user, bytes32[] proof) view returns (bool)",
      "function merkleRoot() view returns (bytes32)",
      "function mint() payable",
      "function mintDrop(address[] recipients, uint256[] quantities)",
      "function mintReserve(uint256 amount)",
      "function mintWhitelist(bytes32[] proof) payable",
      "function mintedReserveTokens() view returns (uint256)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function renounceOwnership()",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
      "function saleIsActive() view returns (bool)",
      "function setApprovalForAll(address operator, bool approved)",
      "function setBaseURI(string URI)",
      "function setIsWhitelistedBridge(address _bridge, bool _isWhitelisted)",
      "function setMerkleRoot(bytes32 _merkleRoot)",
      "function stopMint()",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function togglePublicSale()",
      "function toggleWhitelistSale()",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function transferOwnership(address newOwner)",
      "function whitelistSaleIsActive() view returns (bool)",
      "function whitelistedBridge(address) view returns (bool)",
      "function withdraw()"
    ],
    "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x933A3AfE2087FB8F5c9EE9A033477C42CC14c18E": [
      "constructor(address _squidRouter)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error InvalidRouteType()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaSquid(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint8 routeType, string destinationChain, string bridgedTokenSymbol, tuple(uint8 callType, address target, uint256 value, bytes callData, bytes payload)[] sourceCalls, tuple(uint8 callType, address target, uint256 value, bytes callData, bytes payload)[] destinationCalls, uint256 fee, bool forecallEnabled) _squidData) payable",
      "function swapAndStartBridgeTokensViaSquid(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint8 routeType, string destinationChain, string bridgedTokenSymbol, tuple(uint8 callType, address target, uint256 value, bytes callData, bytes payload)[] sourceCalls, tuple(uint8 callType, address target, uint256 value, bytes callData, bytes payload)[] destinationCalls, uint256 fee, bool forecallEnabled) _squidData) payable"
    ],
    "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5": [
      "constructor(address deployer)",
      "error InvalidShortString()",
      "error StringTooLong(string str)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EIP712DomainChanged()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function MAX_SUPPLY() view returns (uint256)",
      "function MINTER_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 amount)",
      "function burnFrom(address account, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address to, uint256 amount)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
    ],
    "0x9501165EF2962e5C0612D6C5A4b39d606b27E22f": [
      "constructor(address _factory, address _WETH)",
      "function WETH() view returns (address)",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function factory() view returns (address)",
      "function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut, address pair) view returns (uint256 amountIn)",
      "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut, address pair) view returns (uint256 amountOut)",
      "function getAmountsIn(uint256 amountOut, address[] path) view returns (uint256[] amounts)",
      "function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)",
      "function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)",
      "function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)",
      "function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountETH)",
      "function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountETH)",
      "function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountA, uint256 amountB)",
      "function swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable",
      "function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)"
    ],
    "0x9559Aaa82d9649C7A7b220E7c461d2E74c9a3593": [
      "constructor(address _stafiStorageAddress)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EtherDeposited(address indexed from, uint256 amount, uint256 time)",
      "event Paused(address account)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TokensBurned(address indexed from, uint256 amount, uint256 ethAmount, uint256 time)",
      "event TokensMinted(address indexed to, uint256 amount, uint256 ethAmount, uint256 time)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Unpaused(address account)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MINTER_ROLE() view returns (bytes32)",
      "function PAUSER_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 amount)",
      "function burnFrom(address account, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function depositExcess() payable",
      "function depositRewards() payable",
      "function getBurnEnabled() view returns (bool)",
      "function getCollateralRate() view returns (uint256)",
      "function getEthValue(uint256 _rethAmount) view returns (uint256)",
      "function getExchangeRate() view returns (uint256)",
      "function getRethValue(uint256 _ethAmount) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getTotalCollateral() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address to, uint256 amount)",
      "function name() view returns (string)",
      "function pause()",
      "function paused() view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setBurnEnabled(bool _value)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function unpause()",
      "function userBurn(uint256 _rethAmount)",
      "function userMint(uint256 _ethAmount, address _to)",
      "function version() view returns (uint8)"
    ],
    "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x987f67811Ef841da0466746E10B4139Daff95053": [
      "constructor(address _gatewayRouter, address _inbox)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaArbitrumBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 maxSubmissionCost, uint256 maxGas, uint256 maxGasPrice) _arbitrumData) payable",
      "function swapAndStartBridgeTokensViaArbitrumBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 maxSubmissionCost, uint256 maxGas, uint256 maxGasPrice) _arbitrumData) payable"
    ],
    "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x9BE903AB2ad61dfC71f7E2171A3dBf0884a4cdBF": [
      "constructor(address _routerClient)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "error UnknownCCIPChainSelector()",
      "event CCIPChainSelectorUpdated(uint256 indexed chainId, uint64 selector)",
      "event CCIPInitialized(tuple(uint256 chainId, uint64 selector)[] chainSelectors)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function encodeDestinationArgs(uint256 gasLimit, bool strictSequencing) pure returns (bytes)",
      "function initCCIP(tuple(uint256 chainId, uint64 selector)[] chainSelectors)",
      "function quoteCCIPFee(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(bytes callData, bytes extraArgs, address receiver) _ccipData) view returns (uint256)",
      "function routerClient() view returns (address)",
      "function setCCIPChainSelector(uint256 _chainId, uint64 _selector)",
      "function startBridgeTokensViaCCIP(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(bytes callData, bytes extraArgs, address receiver) _ccipData) payable",
      "function swapAndStartBridgeTokensViaCCIP(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(bytes callData, bytes extraArgs, address receiver) _ccipData) payable"
    ],
    "0x9ca271A532392230EAe919Fb5460aEa9D9718424": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesCollected(address indexed _token, address indexed _integrator, uint256 _integratorFee, uint256 _lifiFee)",
      "event FeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event LiFiFeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawIntegratorFees(address[] tokenAddresses)",
      "function batchWithdrawLifiFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeFees(uint256 integratorFee, uint256 lifiFee, address integratorAddress) payable",
      "function collectTokenFees(address tokenAddress, uint256 integratorFee, uint256 lifiFee, address integratorAddress)",
      "function confirmOwnershipTransfer()",
      "function getLifiTokenBalance(address tokenAddress) view returns (uint256)",
      "function getTokenBalance(address integratorAddress, address tokenAddress) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawIntegratorFees(address tokenAddress)",
      "function withdrawLifiFees(address tokenAddress)"
    ],
    "0x9d6A86FaCdCF24859a38e6b9A2Ef87610a4fC157": [
      "constructor(address _masterCopy)"
    ],
    "0x9dC5653ed59D0B927bF59b5A08FDFC4Ddd75AC3E": [
      "constructor(address _deBridgeGate)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaDeBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 nativeFee, bool useAssetFee, uint32 referralCode, tuple(uint256 executionFee, uint256 flags, bytes fallbackAddress, bytes data) autoParams) _deBridgeData) payable",
      "function swapAndStartBridgeTokensViaDeBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 nativeFee, bool useAssetFee, uint32 referralCode, tuple(uint256 executionFee, uint256 flags, bytes fallbackAddress, bytes data) autoParams) _deBridgeData) payable"
    ],
    "0xa008534BF96b61d9D33aD64aAD463bc6D300cd91": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xa17698199466E71bAFC31F226db341B7840701E7": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xa2398842F37465f89540430bDC00219fA9E4D28a": [
      "constructor(address weth, address dodoApproveProxy)",
      "event OrderHistory(address fromToken, address toToken, address sender, uint256 fromAmount, uint256 returnAmount)",
      "function _DODO_APPROVE_PROXY_() view returns (address)",
      "function _WETH_() view returns (address)",
      "function dodoMutliSwap(uint256 fromTokenAmount, uint256 minReturnAmount, uint256[] totalWeight, uint256[] splitNumber, address[] midToken, address[] assetFrom, bytes[] sequence, uint256 deadLine) payable returns (uint256 returnAmount)",
      "function mixSwap(address fromToken, address toToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] mixAdapters, address[] mixPairs, address[] assetTo, uint256 directions, bytes[] moreInfos, uint256 deadLine) payable returns (uint256 returnAmount)"
    ],
    "0xa356867fDCEa8e71AEaF87805808803806231FdC": [
      "constructor(address dvmFactory, address dppFactory, address cpFactory, address weth, address dodoApproveProxy, address dodoSellHelper, address chiToken, address dodoIncentive)",
      "event OrderHistory(address fromToken, address toToken, address sender, uint256 fromAmount, uint256 returnAmount)",
      "event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function _CHI_TOKEN_() view returns (address)",
      "function _CP_FACTORY_() view returns (address)",
      "function _DODO_APPROVE_PROXY_() view returns (address)",
      "function _DODO_INCENTIVE_() view returns (address)",
      "function _DODO_SELL_HELPER_() view returns (address)",
      "function _DPP_FACTORY_() view returns (address)",
      "function _DVM_FACTORY_() view returns (address)",
      "function _GAS_DODO_MAX_RETURN_() view returns (uint256)",
      "function _GAS_EXTERNAL_RETURN_() view returns (uint256)",
      "function _NEW_OWNER_() view returns (address)",
      "function _OWNER_() view returns (address)",
      "function _WETH_() view returns (address)",
      "function addDVMLiquidity(address dvmAddress, uint256 baseInAmount, uint256 quoteInAmount, uint256 baseMinAmount, uint256 quoteMinAmount, uint8 flag, uint256 deadLine) payable returns (uint256 shares, uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount)",
      "function addLiquidityToV1(address pair, uint256 baseAmount, uint256 quoteAmount, uint256 baseMinShares, uint256 quoteMinShares, uint8 flag, uint256 deadLine) payable returns (uint256 baseShares, uint256 quoteShares)",
      "function addWhiteList(address contractAddr)",
      "function bid(address cpAddress, uint256 quoteAmount, uint8 flag, uint256 deadLine) payable",
      "function claimOwnership()",
      "function createCrowdPooling(address baseToken, address quoteToken, uint256 baseInAmount, uint256[] timeLine, uint256[] valueList, bool isOpenTWAP, uint256 deadLine) payable returns (address newCrowdPooling)",
      "function createDODOPrivatePool(address baseToken, address quoteToken, uint256 baseInAmount, uint256 quoteInAmount, uint256 lpFeeRate, uint256 i, uint256 k, bool isOpenTwap, uint256 deadLine) payable returns (address newPrivatePool)",
      "function createDODOVendingMachine(address baseToken, address quoteToken, uint256 baseInAmount, uint256 quoteInAmount, uint256 lpFeeRate, uint256 i, uint256 k, bool isOpenTWAP, uint256 deadLine) payable returns (address newVendingMachine, uint256 shares)",
      "function dodoSwapV1(address fromToken, address toToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] dodoPairs, uint256 directions, bool isIncentive, uint256 deadLine) payable returns (uint256 returnAmount)",
      "function dodoSwapV2ETHToToken(address toToken, uint256 minReturnAmount, address[] dodoPairs, uint256 directions, bool isIncentive, uint256 deadLine) payable returns (uint256 returnAmount)",
      "function dodoSwapV2TokenToETH(address fromToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] dodoPairs, uint256 directions, bool isIncentive, uint256 deadLine) returns (uint256 returnAmount)",
      "function dodoSwapV2TokenToToken(address fromToken, address toToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] dodoPairs, uint256 directions, bool isIncentive, uint256 deadLine) returns (uint256 returnAmount)",
      "function externalSwap(address fromToken, address toToken, address approveTarget, address swapTarget, uint256 fromTokenAmount, uint256 minReturnAmount, bytes callDataConcat, bool isIncentive, uint256 deadLine) payable returns (uint256 returnAmount)",
      "function initOwner(address newOwner)",
      "function isWhiteListed(address) view returns (bool)",
      "function mixSwap(address fromToken, address toToken, uint256 fromTokenAmount, uint256 minReturnAmount, address[] mixAdapters, address[] mixPairs, address[] assetTo, uint256 directions, bool isIncentive, uint256 deadLine) payable returns (uint256 returnAmount)",
      "function removeWhiteList(address contractAddr)",
      "function resetDODOPrivatePool(address dppAddress, uint256[] paramList, uint256[] amountList, uint8 flag, uint256 minBaseReserve, uint256 minQuoteReserve, uint256 deadLine) payable",
      "function transferOwnership(address newOwner)",
      "function updateGasReturn(uint256 newDodoGasReturn, uint256 newExternalGasReturn)"
    ],
    "0xa370CEcd451ecf15c2A01ec47762E967dF7574DA": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0xA473fDfdBBaf3a31f14F5b69f0Dfc31cc5a14e83": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xa696287F37d21D566B9A80AC29b2640FF910C176": [
      "constructor(address _thorchainRouter)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidExpiration()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaThorSwap(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address vault, string memo, uint256 expiration) _thorSwapData) payable",
      "function swapAndStartBridgeTokensViaThorSwap(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address vault, string memo, uint256 expiration) _thorSwapData) payable"
    ],
    "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda": [
      "constructor(address tokenMessenger, address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InvalidConfig()",
      "error InvalidDestinationDomain(uint32 expected, uint32 got)",
      "error InvalidDomain(tuple(bytes32 allowedCaller, uint32 domainIdentifier, uint64 destChainSelector, bool enabled) domain)",
      "error InvalidMessageVersion(uint32 version)",
      "error InvalidNonce(uint64 expected, uint64 got)",
      "error InvalidSourceDomain(uint32 expected, uint32 got)",
      "error InvalidTokenMessengerVersion(uint32 version)",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnknownDomain(uint64 domain)",
      "error UnlockingUSDCFailed()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ConfigSet(address tokenMessenger)",
      "event DomainsSet(tuple(bytes32 allowedCaller, uint32 domainIdentifier, uint64 destChainSelector, bool enabled)[])",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function SUPPORTED_USDC_VERSION() view returns (uint32)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getDomain(uint64 chainSelector) view returns (tuple(bytes32 allowedCaller, uint32 domainIdentifier, bool enabled))",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function getUSDCInterfaceId() pure returns (bytes4)",
      "function i_localDomainIdentifier() view returns (uint32)",
      "function i_messageTransmitter() view returns (address)",
      "function i_tokenMessenger() view returns (address)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes destinationReceiver, uint256 amount, uint64 destChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes extraData)",
      "function setDomains(tuple(bytes32 allowedCaller, uint32 domainIdentifier, uint64 destChainSelector, bool enabled)[] domains)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xA82A87a9b6550e89dd8a7C8a1E3e421974eaf858": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0xab0E64fc4486d2A2e3F5Bdd232Ebd19E8cDebaD0": [
      "constructor(address _thorchainRouter)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaThorSwap(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address vault, string memo, uint256 expiration) _thorSwapData) payable",
      "function swapAndStartBridgeTokensViaThorSwap(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address vault, string memo, uint256 expiration) _thorSwapData) payable"
    ],
    "0xac400063D3B5E2fda887a7a1dFdAaAC4B5bAD6BD": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xB109aE8CD22eeE9D8119058Ca3C9F452df6367f3": [
      "constructor(address initialOwner, address router, address link, uint256 _unitPrice, address m1zAddress)",
      "error FailedToWithdrawEth(address owner, address target, uint256 value)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event MessageSent(bytes32 messageId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function allowedDestinations(uint64) view returns (bool)",
      "function canMintCrossChain() view returns (bool)",
      "function crossChainGasLimit() view returns (uint256)",
      "function getMintFee(uint256 amount, uint64 destinationChainSelector, address receiver, uint8 payFeesIn) view returns (uint256)",
      "function getPrice(uint256 amount) view returns (uint256 price)",
      "function getTransferFee(uint256[] tokenIds, uint256[] ids, uint64 destinationChainSelector, address receiver, uint8 payFeesIn) view returns (uint256)",
      "function i_router() view returns (address)",
      "function m1z() view returns (address)",
      "function maxBatch() view returns (uint256)",
      "function mint(uint256 amount, uint64 destinationChainSelector, address receiver, uint8 payFeesIn) payable",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function sendToOtherChain(uint256[] tokenIds, uint256[] ids, uint64 destinationChainSelector, address receiver, uint8 payFeesIn) payable",
      "function setAllowedDestinations(uint64[] _allowedDestinations, bool isAllowed)",
      "function setCanMintCrossChain(bool _canMintCrossChain)",
      "function setCrossChainGasLimit(uint256 _crossChainGasLimit)",
      "function setM1Z(address m1zAddress)",
      "function setMaxBatch(uint256 _maxBatch)",
      "function setRouter(address router)",
      "function setUnitPrice(uint256 _unitPrice)",
      "function transferOwnership(address newOwner)",
      "function unitPrice() view returns (uint256)",
      "function withdraw(address beneficiary)",
      "function withdrawERC721(address erc721)",
      "function withdrawToken(address beneficiary, address token)"
    ],
    "0xb1feA302f3B2E93FA04E46dCCE35F2Fc522d7bB9": [
      "constructor(string _name, string _symbol, address _factory)",
      "error IXERC20_NotFactory()",
      "error IXERC20_NotHighEnoughLimits()",
      "error InvalidShortString()",
      "error StringTooLong(string str)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event BridgeLimitsSet(uint256 _mintingLimit, uint256 _burningLimit, address indexed _bridge)",
      "event EIP712DomainChanged()",
      "event LockboxSet(address _lockbox)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function FACTORY() view returns (address)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function bridges(address) view returns (tuple(uint256 timestamp, uint256 ratePerSecond, uint256 maxLimit, uint256 currentLimit) minterParams, tuple(uint256 timestamp, uint256 ratePerSecond, uint256 maxLimit, uint256 currentLimit) burnerParams)",
      "function burn(address _user, uint256 _amount)",
      "function burningCurrentLimitOf(address _bridge) view returns (uint256 _limit)",
      "function burningMaxLimitOf(address _bridge) view returns (uint256 _limit)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function lockbox() view returns (address)",
      "function mint(address _user, uint256 _amount)",
      "function mintingCurrentLimitOf(address _bridge) view returns (uint256 _limit)",
      "function mintingMaxLimitOf(address _bridge) view returns (uint256 _limit)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function renounceOwnership()",
      "function setLimits(address _bridge, uint256 _mintingLimit, uint256 _burningLimit)",
      "function setLockbox(address _lockbox)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0xB49EaD76FE09967D7CA0dbCeF3C3A06eb3Aa0cB4": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesCollected(address indexed _token, address indexed _integrator, uint256 _integratorFee, uint256 _lifiFee)",
      "event FeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event LiFiFeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawIntegratorFees(address[] tokenAddresses)",
      "function batchWithdrawLifiFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeFees(uint256 integratorFee, uint256 lifiFee, address integratorAddress) payable",
      "function collectTokenFees(address tokenAddress, uint256 integratorFee, uint256 lifiFee, address integratorAddress)",
      "function confirmOwnershipTransfer()",
      "function getLifiTokenBalance(address tokenAddress) view returns (uint256)",
      "function getTokenBalance(address integratorAddress, address tokenAddress) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawIntegratorFees(address tokenAddress)",
      "function withdrawLifiFees(address tokenAddress)"
    ],
    "0xB4B0ea46Fe0E9e8EAB4aFb765b527739F2718671": [
      "constructor(address _factory, address _WETH)",
      "function FACTORY() view returns (address)",
      "function PAIR() view returns (address)",
      "function WETH() view returns (address)",
      "function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address _token, uint256 _amountTokenDesired, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function getAmountIn(uint256 _amountOut, uint256 _reserveIn, uint256 _reserveOut) pure returns (uint256 amountIn)",
      "function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) pure returns (uint256 amountOut)",
      "function getAmountsIn(uint256 _amountOut, address[] _path) view returns (uint256[] amounts)",
      "function getAmountsOut(uint256 _amountIn, address[] _path) view returns (uint256[] amounts)",
      "function pairFor(address _factory, address _tokenA, address _tokenB) view returns (address predicted)",
      "function quote(uint256 _amountA, uint256 _reserveA, uint256 _reserveB) pure returns (uint256 amountB)",
      "function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) returns (uint256 amountA, uint256 amountB)",
      "function removeLiquidityETH(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHSupportingFeeOnTransferTokens(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline) returns (uint256 amountETH)",
      "function removeLiquidityETHWithPermit(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline, bool _approveMax, uint8 _v, bytes32 _r, bytes32 _s) returns (uint256, uint256)",
      "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline, bool _approveMax, uint8 _v, bytes32 _r, bytes32 _s) returns (uint256 amountETH)",
      "function removeLiquidityWithPermit(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline, bool _approveMax, uint8 _v, bytes32 _r, bytes32 _s) returns (uint256, uint256)",
      "function swapETHForExactTokens(uint256 _amountOut, address[] _path, address _to, uint256 _deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 _amountOutMin, address[] _path, address _to, uint256 _deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 _amountOutMin, address[] _path, address _to, uint256 _deadline) payable",
      "function swapExactTokensForETH(uint256 _amountIn, uint256 _amountOutMin, address[] _path, address _to, uint256 _deadline) returns (uint256[] amounts)",
      "function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMin, address[] _path, address _to, uint256 _deadline)",
      "function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] _path, address _to, uint256 _deadline) returns (uint256[] amounts)",
      "function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMin, address[] _path, address _to, uint256 _deadline)",
      "function swapTokensForExactETH(uint256 _amountOut, uint256 _amountInMax, address[] _path, address _to, uint256 _deadline) returns (uint256[] amounts)",
      "function swapTokensForExactTokens(uint256 _amountOut, uint256 _amountInMax, address[] _path, address _to, uint256 _deadline) returns (uint256[] amounts)"
    ],
    "0xB600C9be12C2487140d603C63506a462a6feaC17": [
      "event Mint(address indexed sender, uint256 weekly, uint256 circulating_supply, uint256 circulating_emission)",
      "function _token() view returns (address)",
      "function _ve() view returns (address)",
      "function _ve_dist() view returns (address)",
      "function _voter() view returns (address)",
      "function a() view returns (uint256)",
      "function active_period() view returns (uint256)",
      "function b() view returns (uint256)",
      "function bDecayRate() view returns (uint256)",
      "function calculate_emission() view returns (uint256)",
      "function calculate_growth(uint256 _minted) view returns (uint256)",
      "function circulating_emission() view returns (uint256)",
      "function circulating_supply() view returns (uint256)",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function humpFactor(uint256) view returns (uint256)",
      "function initialMint(address[] claimants, uint256[] amounts, uint256 max)",
      "function initialize(address __voter, address __ve, address __ve_dist)",
      "function setEmissionsCurve(uint256 _a, uint256 _b, uint256 _bDecayRate)",
      "function setHumpFactors(uint256[] _periods, uint256[] _humpFactors)",
      "function targetSupply() view returns (uint256)",
      "function update_period() returns (uint256)",
      "function week() view returns (uint256)",
      "function weekly() view returns (uint256)",
      "function weekly_emission() view returns (uint256)"
    ],
    "0xb72F019a1B2AC43eA377d8a154e0b575439F9155": [
      "constructor(address _DFX)",
      "error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees)",
      "event Initialized(uint8 version)",
      "event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address receiver, address token, uint256 tokenAmount, address feeToken, uint256 fees)",
      "function DFX() view returns (address)",
      "function admin() view returns (address)",
      "function chainFees(uint64) view returns (address feeToken, uint256 gasLimitFee)",
      "function destinations(address) view returns (address receiver, uint64 chainSelector)",
      "function emergencyWithdraw(address _beneficiary, address _token, uint256 _amount)",
      "function emergencyWithdrawNative(address _beneficiary, uint256 _amount)",
      "function initialize(address _router, address _admin)",
      "function relayReward(uint256 amount) returns (bytes32)",
      "function router() view returns (address)",
      "function setL2Destination(address rootGauge, address receiver, uint64 chainSelector)",
      "function setL2Gas(uint64 _chainSelector, address _feeToken, uint256 _newGasLimit)",
      "function updateAdmin(address _newAdmin)",
      "function updateRouter(address _newRouter)"
    ],
    "0xb812d0944f8F581DfAA3a93Dda0d22EcEf51A9CF": [
      "constructor(address _singleton)"
    ],
    "0xb854536206EB6C1013b1642b576196E5EF19D7BA": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0xB9281d9d494EE5b8b06f5ECb43bE37684804b818": [
      "constructor(address _endpointAddress, tuple(uint256 standardId, uint64 ccipId)[] _chainIdPairs, uint256 _minTargetGasDefault, tuple(uint256 key, uint256 value)[] _minTargetGasCustomData, uint256 _targetGasReserve, address _processingFeeCollector, address _owner, address[] _managers, bool _addOwnerToManagers)",
      "error CcipChainIdNotSetError()",
      "error ListSizeLimitError()",
      "error MinTargetGasError()",
      "error NonContractAddressError(address account)",
      "error OnlyClientError()",
      "error OnlyEndpointError()",
      "error OnlyEstimatorError()",
      "error OnlyManagerError()",
      "error PeerAddressMismatchError()",
      "error PeerNotSetError()",
      "error ProcessingFeeError()",
      "error ReservedTokenError()",
      "error ResultInfo(bool isSuccess, uint256 gasUsed)",
      "error SafeTransferError()",
      "error SafeTransferNativeError()",
      "error ZeroAddressError()",
      "error ZeroChainIdError()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RemoveChainIdPair(uint256 indexed standardId, uint64 indexed ccipId)",
      "event RemoveMinTargetGasCustom(uint256 standardChainId)",
      "event RemovePeer(uint256 indexed chainId)",
      "event RenounceManagerRole(address indexed account)",
      "event SetChainIdPair(uint256 indexed standardId, uint64 indexed ccipId)",
      "event SetClient(address indexed clientAddress)",
      "event SetEndpoint(address indexed endpointAddress)",
      "event SetManager(address indexed account, bool indexed value)",
      "event SetMinTargetGasCustom(uint256 standardChainId, uint256 minTargetGas)",
      "event SetMinTargetGasDefault(uint256 minTargetGas)",
      "event SetPeer(uint256 indexed chainId, address indexed peerAddress)",
      "event SetProcessingFeeCollector(address indexed processingFeeCollector)",
      "event SetTargetGasReserve(uint256 gasReserve)",
      "event TargetClientNotSetFailure()",
      "event TargetExecutionFailure()",
      "event TargetFromAddressFailure(uint256 indexed sourceChainId, address indexed fromAddress)",
      "event TargetGasReserveFailure(uint256 indexed sourceChainId)",
      "event TargetPausedFailure()",
      "event Unpaused(address account)",
      "function SYSTEM_VERSION_ID() view returns (uint256)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) _message)",
      "function ccipToStandardChainId(uint64) view returns (uint256)",
      "function cleanup(address _tokenAddress, uint256 _tokenAmount)",
      "function client() view returns (address)",
      "function endpoint() view returns (address)",
      "function estimateTarget(tuple(uint256 actionId, address sourceSender, uint256 vaultType, address targetTokenAddress, tuple(uint256 fromAmount, uint256 routerType, bytes routerData) targetSwapInfo, address targetRecipient) _targetMessage)",
      "function fullManagerList() view returns (address[])",
      "function fullPeerChainIdList() view returns (uint256[])",
      "function isManager(address _account) view returns (bool)",
      "function isReservedToken(address _tokenAddress) view returns (bool)",
      "function managerCount() view returns (uint256)",
      "function messageFee(uint256 _targetChainId, bytes _message, bytes _settings) view returns (uint256)",
      "function minTargetGas(uint256 _standardChainId) view returns (uint256)",
      "function minTargetGasCustom(uint256) view returns (bool isSet, uint256 value)",
      "function minTargetGasDefault() view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function peerChainIdIndexMap(uint256) view returns (bool isSet, uint256 value)",
      "function peerChainIdList(uint256) view returns (uint256)",
      "function peerCount() view returns (uint256)",
      "function peerMap(uint256) view returns (address)",
      "function processingFeeCollector() view returns (address)",
      "function removeChainIdPairs(uint256[] _standardChainIds)",
      "function removeMinTargetGasCustom(uint256 _standardChainId)",
      "function removePeers(uint256[] _chainIds)",
      "function renounceManagerRole()",
      "function renounceOwnership()",
      "function self() view returns (address)",
      "function sendMessage(uint256 _targetChainId, bytes _message, bytes _settings) payable",
      "function setChainIdPairs(tuple(uint256 standardId, uint64 ccipId)[] _chainIdPairs)",
      "function setClient(address _clientAddress)",
      "function setEndpoint(address _endpointAddress)",
      "function setManager(address _account, bool _value)",
      "function setMinTargetGasCustom(uint256 _standardChainId, uint256 _minTargetGas)",
      "function setMinTargetGasDefault(uint256 _minTargetGas)",
      "function setPeers(tuple(uint256 key, address value)[] _peers)",
      "function setProcessingFeeCollector(address _processingFeeCollector)",
      "function setTargetGasReserve(uint256 _gasReserve)",
      "function standardToCcipChainId(uint256) view returns (uint64)",
      "function supportsInterface(bytes4 _interfaceId) pure returns (bool)",
      "function targetGasReserve() view returns (uint256)",
      "function tokenBalance(address _tokenAddress) view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function variableBalanceRecords() view returns (address)"
    ],
    "0xba30Add178fb849aad4715354Bc66506aA327E36": [
      "constructor(address initialOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0xBd3fa81B58Ba92a82136038B25aDec7066af3155": [
      "constructor(address _messageTransmitter, uint32 _messageBodyVersion)",
      "event DepositForBurn(uint64 indexed nonce, address indexed burnToken, uint256 amount, address indexed depositor, bytes32 mintRecipient, uint32 destinationDomain, bytes32 destinationTokenMessenger, bytes32 destinationCaller)",
      "event LocalMinterAdded(address localMinter)",
      "event LocalMinterRemoved(address localMinter)",
      "event MintAndWithdraw(address indexed mintRecipient, uint256 amount, address indexed mintToken)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RemoteTokenMessengerAdded(uint32 domain, bytes32 tokenMessenger)",
      "event RemoteTokenMessengerRemoved(uint32 domain, bytes32 tokenMessenger)",
      "event RescuerChanged(address indexed newRescuer)",
      "function acceptOwnership()",
      "function addLocalMinter(address newLocalMinter)",
      "function addRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger)",
      "function depositForBurn(uint256 amount, uint32 destinationDomain, bytes32 mintRecipient, address burnToken) returns (uint64 _nonce)",
      "function depositForBurnWithCaller(uint256 amount, uint32 destinationDomain, bytes32 mintRecipient, address burnToken, bytes32 destinationCaller) returns (uint64 nonce)",
      "function handleReceiveMessage(uint32 remoteDomain, bytes32 sender, bytes messageBody) returns (bool)",
      "function localMessageTransmitter() view returns (address)",
      "function localMinter() view returns (address)",
      "function messageBodyVersion() view returns (uint32)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function remoteTokenMessengers(uint32) view returns (bytes32)",
      "function removeLocalMinter()",
      "function removeRemoteTokenMessenger(uint32 domain)",
      "function replaceDepositForBurn(bytes originalMessage, bytes originalAttestation, bytes32 newDestinationCaller, bytes32 newMintRecipient)",
      "function rescueERC20(address tokenContract, address to, uint256 amount)",
      "function rescuer() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function updateRescuer(address newRescuer)"
    ],
    "0xbD6C7B0d2f68c2b7805d88388319cfB6EcB50eA9": [
      "constructor(address _owner)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NativeValueWithERC()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error Unauthorized(address)",
      "event FeesCollected(address indexed _token, address indexed _integrator, uint256 _integratorFee, uint256 _lifiFee)",
      "event FeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event LiFiFeesWithdrawn(address indexed _token, address indexed _to, uint256 _amount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawIntegratorFees(address[] tokenAddresses)",
      "function batchWithdrawLifiFees(address[] tokenAddresses)",
      "function cancelOnwershipTransfer()",
      "function collectNativeFees(uint256 integratorFee, uint256 lifiFee, address integratorAddress) payable",
      "function collectTokenFees(address tokenAddress, uint256 integratorFee, uint256 lifiFee, address integratorAddress)",
      "function confirmOwnershipTransfer()",
      "function getLifiTokenBalance(address tokenAddress) view returns (uint256)",
      "function getTokenBalance(address integratorAddress, address tokenAddress) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawIntegratorFees(address tokenAddress)",
      "function withdrawLifiFees(address tokenAddress)"
    ],
    "0xbda1d6131Cccc28A3e925E4C3BbA5C5A2D7a1f28": [
      "event ChainPaused(uint256 indexed chainId)",
      "event ChainUnpaused(uint256 indexed chainId)",
      "event ChildChainVeAdded(uint256 indexed chainId, address ve)",
      "event Error(bytes32 indexed errorId)",
      "event NftBridged(address indexed user, uint256 indexed tokenId, uint256 indexed chainId, uint256 amount)",
      "event NftBurned(address indexed user, uint256 indexed tokenId, uint256 indexed chainId, uint256 amount)",
      "event NftClaimed(address indexed user, uint256 indexed oldTokenId, uint256 indexed newTokenId, uint256 amount)",
      "event Paused()",
      "event SetOperator(address newOperator, bool status)",
      "event Unpaused()",
      "event VoteDelaySet(uint256 delay)",
      "function addChainMap(uint256 chainId, address _ve, string axelar, uint64 ccip, uint16 lz)",
      "function bridgeOutNft(address _to, uint256[] _chainIds, uint256 _tokenId, uint256[] _amounts, uint256[][] _feeInEther) payable",
      "function chainBalances(uint256) view returns (uint256)",
      "function chainMap(uint256) view returns (string axelar, uint64 ccip, uint16 lz)",
      "function chains(uint256) view returns (uint256)",
      "function childChainVe(uint256) view returns (address)",
      "function claimNft(uint256 _tokenId)",
      "function claimVeRebase()",
      "function configureChildChainWeights(address _to, uint256[] _chainIds, uint256 _tokenId, uint256[] _amounts, uint256[][] _feeInEther) payable",
      "function crosschainDistributor(uint256) view returns (address)",
      "function errors(bytes32) view returns (bytes)",
      "function increaseUnlockTime()",
      "function initialize(address _axelarGateway, address _axelarGasService, address _ccipRouter, address _lzEndpoint, address _voter, address _ve, address _ve_dist, address _crosschainDistributor, uint256 _tokenId)",
      "function isBridged(address _owner, uint256 _tokenId) view returns (bool)",
      "function isOperator(address) view returns (bool)",
      "function isPaused(uint256) view returns (bool)",
      "function lockInfo() view returns (uint256 endTime, uint256 secondsRemaining, bool shouldIncreaseLock)",
      "function masterTokenId() view returns (uint256)",
      "function ownedNfts(address _owner) view returns (uint256[] _nftIds)",
      "function ownerOf(uint256) view returns (address)",
      "function pauseChain(uint256 _chainId)",
      "function paused() view returns (bool)",
      "function rescueNft(uint256 _tokenId, bool _status)",
      "function retryError(uint256 _timestamp)",
      "function setChildChainVe(uint256 _chainId, address _ve, bool _init)",
      "function setOperator(address _operator, bool _status)",
      "function setPaused(bool _status)",
      "function setTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress)",
      "function setVoteDelay(uint256 _delay)",
      "function supportedChains() view returns (uint256[] _chains)",
      "function totalBridgedBase() view returns (uint256)",
      "function totalLocked() view returns (uint256)",
      "function totalShares() view returns (uint256)",
      "function unpauseChain(uint256 _chainId)",
      "function userData(address, uint256) view returns (uint256 bridgedTotal, uint256 shares, uint256 bridgedOutPeriod)",
      "function ve() view returns (address)",
      "function ve_dist() view returns (address)",
      "function vote()",
      "function voteDelay() view returns (uint256)",
      "function voteWeights(uint256) view returns (int256)",
      "function voter() view returns (address)"
    ],
    "0xBDd822f3bC2EAB6818CfA3053107831D4E93fE72": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitError(bytes error)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xbDfA4BdD705e02A2Da357ddd2e543ec654529940": [
      "event BridgeAdapterUpdated(uint256 indexed destinationChainId, address indexed bridgeAdapter, address destinationBridgeAdapter, bool indexed allowed)",
      "event ConfirmationsUpdated(uint8 newConfirmations, uint256 indexed chainId)",
      "event ERC20Rescued(address indexed caller, address indexed token, address indexed to, uint256 amount)",
      "event EnvelopeDeliveryAttempted(bytes32 envelopeId, tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope, bool isDelivered)",
      "event EnvelopeRegistered(bytes32 indexed envelopeId, tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope)",
      "event GuardianUpdated(address oldGuardian, address newGuardian)",
      "event Initialized(uint8 version)",
      "event NativeTokensRescued(address indexed caller, address indexed to, uint256 amount)",
      "event NewInvalidation(uint256 invalidTimestamp, uint256 indexed chainId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ReceiverBridgeAdaptersUpdated(address indexed bridgeAdapter, bool indexed allowed, uint256 indexed chainId)",
      "event SenderUpdated(address indexed sender, bool indexed isApproved)",
      "event TransactionForwardingAttempted(bytes32 transactionId, bytes32 indexed envelopeId, bytes encodedTransaction, uint256 destinationChainId, address indexed bridgeAdapter, address destinationBridgeAdapter, bool indexed adapterSuccessful, bytes returnData)",
      "event TransactionReceived(bytes32 transactionId, bytes32 indexed envelopeId, uint256 indexed originChainId, tuple(uint256 nonce, bytes encodedEnvelope) transaction, address indexed bridgeAdapter, uint8 confirmations)",
      "function allowReceiverBridgeAdapters(tuple(address bridgeAdapter, uint256[] chainIds)[] bridgeAdaptersInput)",
      "function approveSenders(address[] senders)",
      "function deliverEnvelope(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope)",
      "function disableBridgeAdapters(tuple(address bridgeAdapter, uint256[] chainIds)[] bridgeAdapters)",
      "function disallowReceiverBridgeAdapters(tuple(address bridgeAdapter, uint256[] chainIds)[] bridgeAdapters)",
      "function emergencyEtherTransfer(address to, uint256 amount)",
      "function emergencyTokenTransfer(address erc20Token, address to, uint256 amount)",
      "function enableBridgeAdapters(tuple(address currentChainBridgeAdapter, address destinationBridgeAdapter, uint256 destinationChainId)[] bridgeAdapters)",
      "function forwardMessage(uint256 destinationChainId, address destination, uint256 gasLimit, bytes message) returns (bytes32, bytes32)",
      "function getAllowedBridgeAdaptersByChain(uint256 chainId) view returns (address[])",
      "function getBridgeAdaptersByChain(uint256 chainId) view returns (tuple(address destinationBridgeAdapter, address currentChainBridgeAdapter)[])",
      "function getConfigurationByChain(uint256 chainId) view returns (tuple(uint8 requiredConfirmation, uint120 validityTimestamp))",
      "function getCurrentEnvelopeNonce() view returns (uint256)",
      "function getCurrentTransactionNonce() view returns (uint256)",
      "function getEnvelopeState(bytes32 envelopeId) view returns (uint8)",
      "function getEnvelopeState(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope) view returns (uint8)",
      "function getSupportedChains() view returns (uint256[])",
      "function getTransactionState(tuple(uint256 nonce, bytes encodedEnvelope) transaction) view returns (tuple(uint8 confirmations, uint120 firstBridgedAt))",
      "function getTransactionState(bytes32 transactionId) view returns (tuple(uint8 confirmations, uint120 firstBridgedAt))",
      "function guardian() view returns (address)",
      "function initialize(address owner, address guardian, tuple(uint256 chainId, uint8 requiredConfirmations)[] initialRequiredConfirmations, tuple(address bridgeAdapter, uint256[] chainIds)[] receiverBridgeAdaptersToAllow, tuple(address currentChainBridgeAdapter, address destinationBridgeAdapter, uint256 destinationChainId)[] forwarderBridgeAdaptersToEnable, address[] sendersToApprove)",
      "function isEnvelopeRegistered(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope) view returns (bool)",
      "function isEnvelopeRegistered(bytes32 envelopeId) view returns (bool)",
      "function isReceiverBridgeAdapterAllowed(address bridgeAdapter, uint256 chainId) view returns (bool)",
      "function isSenderApproved(address sender) view returns (bool)",
      "function isTransactionForwarded(bytes32 transactionId) view returns (bool)",
      "function isTransactionForwarded(tuple(uint256 nonce, bytes encodedEnvelope) transaction) view returns (bool)",
      "function isTransactionReceivedByAdapter(bytes32 transactionId, address bridgeAdapter) view returns (bool)",
      "function owner() view returns (address)",
      "function receiveCrossChainMessage(bytes encodedTransaction, uint256 originChainId)",
      "function removeSenders(address[] senders)",
      "function renounceOwnership()",
      "function retryEnvelope(tuple(uint256 nonce, address origin, address destination, uint256 originChainId, uint256 destinationChainId, bytes message) envelope, uint256 gasLimit) returns (bytes32)",
      "function retryTransaction(bytes encodedTransaction, uint256 gasLimit, address[] bridgeAdaptersToRetry)",
      "function transferOwnership(address newOwner)",
      "function updateConfirmations(tuple(uint256 chainId, uint8 requiredConfirmations)[] newConfirmations)",
      "function updateGuardian(address newGuardian)",
      "function updateMessagesValidityTimestamp(tuple(uint256 chainId, uint120 validityTimestamp)[] newValidityTimestamp)",
      "function whoCanRescue() view returns (address)"
    ],
    "0xbEB120827CE309C306BAec7a4C4d0eeC9fc37F0a": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EIP712DomainChanged()",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Unpaused(address account)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MINTER_ROLE() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 amount)",
      "function burnFrom(address account, uint256 amount)",
      "function cap() view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getBlackList(address account) view returns (bool)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function implementation() view returns (address)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(string name, string symbol, uint256 initialSupply, address admin)",
      "function mint(address to, uint256 amount)",
      "function name() view returns (string)",
      "function nonces(address) view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, bytes signature)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setBlackList(address account)",
      "function setCap(uint256 cap_)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function unpause()"
    ],
    "0xbEbCDb5093B47Cd7add8211E4c77B6826aF7bc5F": [
      "constructor(address _contractOwner, address _diamondCutFacet) payable",
      "error CalldataEmptyButInitNotZero()",
      "error FacetAddressIsNotZero()",
      "error FacetAddressIsZero()",
      "error FacetContainsNoCode()",
      "error FunctionAlreadyExists()",
      "error FunctionDoesNotExist()",
      "error FunctionIsImmutable()",
      "error IncorrectFacetCutAction()",
      "error InitReverted()",
      "error InitZeroButCalldataNotEmpty()",
      "error NoSelectorsInFace()"
    ],
    "0xBeE13d99dD633fEAa2a0935f00CbC859F8305FA7": [
      "constructor(address _spokePool, address _wrappedNative)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaAcross(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) _acrossData) payable",
      "function swapAndStartBridgeTokensViaAcross(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) _acrossData) payable"
    ],
    "0xBEEF8e0982874e0292E6C5751C5A4092b3e1BEEF": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Initialized(uint8 version)",
      "event NewStratCandidate(address implementation)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event UpgradeStrat(address implementation)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approvalDelay() view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function available() view returns (uint256)",
      "function balance() view returns (uint256)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function deposit(uint256 _amount)",
      "function depositAll()",
      "function earn()",
      "function getPricePerFullShare() view returns (uint256)",
      "function inCaseTokensGetStuck(address _token)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(address _strategy, string _name, string _symbol, uint256 _approvalDelay)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function proposeStrat(address _implementation)",
      "function renounceOwnership()",
      "function stratCandidate() view returns (address implementation, uint256 proposedTime)",
      "function strategy() view returns (address)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function upgradeStrat()",
      "function want() view returns (address)",
      "function withdraw(uint256 _shares)",
      "function withdrawAll()"
    ],
    "0xBf1858b24243Ecbcf7d940f458e36CB7401c2366": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getPoolPriceUSDX96(address _priceToken, address _pricePool, address _nativeStablePool, address _WETH9, bool _isPoolPairedWETH9) view returns (uint256)",
      "function getPriceX96FromSqrtPriceX96(uint160 sqrtPriceX96) pure returns (uint256 priceX96)",
      "function getSqrtPriceX96FromPoolAndInterval(address _poolAddress) view returns (uint160 sqrtPriceX96)",
      "function getSqrtPriceX96FromPriceX96(uint256 priceX96) pure returns (uint160 sqrtPriceX96)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setTwapInterval(uint32 _seconds)",
      "function transferOwnership(address newOwner)",
      "function twapInterval() view returns (uint32)"
    ],
    "0xBF7cb652A2d5ed3BFc3832Ef8Af33Ffb0cDc0982": [
      "constructor(address token, address[] allowlist, address armProxy, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xbFc3b856b9BCC792875E79Fc8FFcc09028AAD406": [
      "constructor(address _owner, address[] _managers, bool _addOwnerToManagers)",
      "error ListSizeLimitError()",
      "error NonContractAddressError(address account)",
      "error OnlyActionExecutorError()",
      "error OnlyManagerError()",
      "error ReservedTokenError()",
      "error SafeTransferError()",
      "error SafeTransferNativeError()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RenounceManagerRole(address indexed account)",
      "event SetActionExecutor(address indexed actionExecutor)",
      "event SetManager(address indexed account, bool indexed value)",
      "function SYSTEM_VERSION_ID() view returns (uint256)",
      "function actionExecutor() view returns (address)",
      "function cleanup(address _tokenAddress, uint256 _tokenAmount)",
      "function clearBalance(address _account, uint256 _vaultType)",
      "function fullManagerList() view returns (address[])",
      "function getAccountBalance(address _account, uint256 _vaultType) view returns (uint256)",
      "function increaseBalance(address _account, uint256 _vaultType, uint256 _amount)",
      "function isManager(address _account) view returns (bool)",
      "function isReservedToken(address _tokenAddress) view returns (bool)",
      "function managerCount() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceManagerRole()",
      "function renounceOwnership()",
      "function setActionExecutor(address _actionExecutor)",
      "function setManager(address _account, bool _value)",
      "function tokenBalance(address _tokenAddress) view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function variableBalanceTable(address, uint256) view returns (uint256)"
    ],
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": [
      "function name() view returns (string)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function withdraw(uint256 wad)",
      "function decimals() view returns (uint8)",
      "function balanceOf(address) view returns (uint256)",
      "function symbol() view returns (string)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function deposit() payable",
      "function allowance(address, address) view returns (uint256)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)"
    ],
    "0xc02FFcdD914DbA646704439c6090BAbaD521d04C": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesWithdrawn(address indexed token, address indexed to, uint256 amount)",
      "event GasFeesCollected(address indexed token, uint256 indexed chainId, address indexed receiver, uint256 feeAmount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeGasFees(uint256 feeAmount, uint256 chainId, address receiver) payable",
      "function collectTokenGasFees(address tokenAddress, uint256 feeAmount, uint256 chainId, address receiver)",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawFees(address tokenAddress)"
    ],
    "0xc07556a0Bd177F8de4D077f449C2653A072F3798": [
      "constructor(address _singleton)"
    ],
    "0xC0c42d148241c5b5BB38e974d40Fc9087f7F9ecD": [
      "constructor(address _allBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaAllBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 fees, bytes32 recipient, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger, bool payFeeWithSendingAsset) _allBridgeData) payable",
      "function swapAndStartBridgeTokensViaAllBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 fees, bytes32 recipient, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger, bool payFeeWithSendingAsset) _allBridgeData) payable"
    ],
    "0xC1E20466AD79BAe875568eb08ABaaEA1F0E25b7E": [
      "constructor(address _foreignOmniBridge, address _wethOmniBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaOmniBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaOmniBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0xC36442b4a4522E871399CD717aBDD847Ab11FE88": [
      "constructor(address _factory, address _WETH9, address _tokenDescriptor_)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1)",
      "event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
      "event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function WETH9() view returns (address)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function baseURI() pure returns (string)",
      "function burn(uint256 tokenId) payable",
      "function collect(tuple(uint256 tokenId, address recipient, uint128 amount0Max, uint128 amount1Max) params) payable returns (uint256 amount0, uint256 amount1)",
      "function createAndInitializePoolIfNecessary(address token0, address token1, uint24 fee, uint160 sqrtPriceX96) payable returns (address pool)",
      "function decreaseLiquidity(tuple(uint256 tokenId, uint128 liquidity, uint256 amount0Min, uint256 amount1Min, uint256 deadline) params) payable returns (uint256 amount0, uint256 amount1)",
      "function factory() view returns (address)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function increaseLiquidity(tuple(uint256 tokenId, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min, uint256 deadline) params) payable returns (uint128 liquidity, uint256 amount0, uint256 amount1)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function mint(tuple(address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min, address recipient, uint256 deadline) params) payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function name() view returns (string)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function positions(uint256 tokenId) view returns (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)",
      "function refundETH() payable",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
      "function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable",
      "function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable",
      "function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function setApprovalForAll(address operator, bool approved)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function sweepToken(address token, uint256 amountMinimum, address recipient) payable",
      "function symbol() view returns (string)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes data)",
      "function unwrapWETH9(uint256 amountMinimum, address recipient) payable"
    ],
    "0xc43c01026128Aa758A65D12dB6a72CE4DD778dF2": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xc4922d64a24675E16e1586e3e3Aa56C06fABe907": [
      "constructor(address _tokenController)",
      "event LocalTokenMessengerAdded(address localTokenMessenger)",
      "event LocalTokenMessengerRemoved(address localTokenMessenger)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Pause()",
      "event PauserChanged(address indexed newAddress)",
      "event RescuerChanged(address indexed newRescuer)",
      "event SetBurnLimitPerMessage(address indexed token, uint256 burnLimitPerMessage)",
      "event SetTokenController(address tokenController)",
      "event TokenPairLinked(address localToken, uint32 remoteDomain, bytes32 remoteToken)",
      "event TokenPairUnlinked(address localToken, uint32 remoteDomain, bytes32 remoteToken)",
      "event Unpause()",
      "function acceptOwnership()",
      "function addLocalTokenMessenger(address newLocalTokenMessenger)",
      "function burn(address burnToken, uint256 burnAmount)",
      "function burnLimitsPerMessage(address) view returns (uint256)",
      "function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) view returns (address)",
      "function linkTokenPair(address localToken, uint32 remoteDomain, bytes32 remoteToken)",
      "function localTokenMessenger() view returns (address)",
      "function mint(uint32 sourceDomain, bytes32 burnToken, address to, uint256 amount) returns (address mintToken)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pauser() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function remoteTokensToLocalTokens(bytes32) view returns (address)",
      "function removeLocalTokenMessenger()",
      "function rescueERC20(address tokenContract, address to, uint256 amount)",
      "function rescuer() view returns (address)",
      "function setMaxBurnAmountPerMessage(address localToken, uint256 burnLimitPerMessage)",
      "function setTokenController(address newTokenController)",
      "function tokenController() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unlinkTokenPair(address localToken, uint32 remoteDomain, bytes32 remoteToken)",
      "function unpause()",
      "function updatePauser(address _newPauser)",
      "function updateRescuer(address newRescuer)"
    ],
    "0xc4f7A34b8d283f66925eF0f5CCdFC2AF3030DeaE": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesWithdrawn(address indexed token, address indexed to, uint256 amount)",
      "event GasFeesCollected(address indexed token, uint256 indexed chainId, address indexed receiver, uint256 feeAmount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeGasFees(uint256 chainId, address receiver) payable",
      "function collectTokenGasFees(address tokenAddress, uint256 feeAmount, uint256 chainId, address receiver)",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawFees(address tokenAddress)"
    ],
    "0xc62c311FE64abf19CF33195e15c188Ca6d1AaD3e": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xc6e3d0CAF52E057Fb8950ae9d07aE67602919AcD": [
      "constructor(address _xerc20, address _erc20, bool _isNative)",
      "error IXERC20Lockbox_Native()",
      "error IXERC20Lockbox_NotNative()",
      "error IXERC20Lockbox_WithdrawFailed()",
      "event Deposit(address _sender, uint256 _amount)",
      "event Withdraw(address _sender, uint256 _amount)",
      "function ERC20() view returns (address)",
      "function IS_NATIVE() view returns (bool)",
      "function XERC20() view returns (address)",
      "function deposit(uint256 _amount)",
      "function depositNative() payable",
      "function depositNativeTo(address _to) payable",
      "function depositTo(address _to, uint256 _amount)",
      "function withdraw(uint256 _amount)",
      "function withdrawTo(address _to, uint256 _amount)"
    ],
    "0xC85c2B19958D116d79C654ecE73b359c08802A76": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesWithdrawn(address indexed token, address indexed to, uint256 amount)",
      "event GasFeesCollected(address indexed token, uint256 indexed chainId, address indexed receiver, uint256 feeAmount)",
      "event InsuranceFeesCollected(address indexed token, address indexed receiver, uint256 feeAmount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeGasFees(uint256 chainId, address receiver) payable",
      "function collectNativeInsuranceFees(address receiver) payable",
      "function collectTokenGasFees(address tokenAddress, uint256 feeAmount, uint256 chainId, address receiver)",
      "function collectTokenInsuranceFees(address tokenAddress, uint256 feeAmount, address receiver)",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawFees(address tokenAddress)"
    ],
    "0xc8BA6Be4A8F60889E6D1bdbb9A17d433a62dF3d3": [
      "constructor(address _router)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TokensTransferred(bytes32 indexed messageId, uint64 indexed destChainSelector, address receiver, address token, uint256 tokenAmount, address feeToken, uint256 fees)",
      "function bridgeTokens(uint64 _destChainSelector, address _receiver, address _token, uint256 _amount) payable returns (bytes32 _messageId)",
      "function chains(uint64) view returns (bool)",
      "function getMessageFee(uint64 _destChainSelector, address _receiver, address _token, uint256 _amount) view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function router() view returns (address)",
      "function setChain(uint64 _chainSelector, bool _isWhitelisted)",
      "function setRouter(address _router)",
      "function transferOwnership(address newOwner)"
    ],
    "0xc9e03910DDDF689D3e309b42dbf4c581ED1e795D": [
      "constructor(address _router, address _link, address _ccipRegister, address _rethSource, address _rmaticSource)",
      "error InitCompleted()",
      "error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees)",
      "error SelectorExist()",
      "error SelectorNotExist()",
      "error TransferNotAllow()",
      "event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address indexed sender, address receiver, bytes data, address feeToken, uint256 fees)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function acceptOwnership()",
      "function addRETHRateInfo(address _receiver, address _rateProvider, uint64 _selector)",
      "function addRMATICRateInfo(address _receiver, address _rateProvider, uint64 _selector)",
      "function ccipRegister() view returns (address)",
      "function checkUpkeep(bytes) view returns (bool upkeepNeeded, bytes performData)",
      "function linkToken() view returns (address)",
      "function owner() view returns (address)",
      "function performUpkeep(bytes performData)",
      "function removeRETHRateInfo(uint64 _selector)",
      "function removeRMATICRateInfo(uint64 _selector)",
      "function reth() view returns (address)",
      "function rethLatestRate() view returns (uint256)",
      "function rethRateInfoOf(uint256) view returns (address receiver, address destination)",
      "function rmatic() view returns (address)",
      "function rmaticLatestRate() view returns (uint256)",
      "function rmaticRateInfoOf(uint256) view returns (address receiver, address destination)",
      "function router() view returns (address)",
      "function transferOwnership(address to)",
      "function updateRETHRateInfo(address _receiver, address _rateProvider, uint64 _selector)",
      "function updateRMATICRateInfo(address _receiver, address _rateProvider, uint64 _selector)",
      "function withdrawLink(address _to)"
    ],
    "0xCA160D11087E03fd398d40f561cd4768825f4958": [
      "constructor()",
      "error NotAuthorized()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 amount)",
      "function burn(address from, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function isAllowedToMint(address minter) view returns (bool)",
      "function mint(address to, uint256 amount)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setIsAllowedToMint(address minter, bool allowed)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0xCB859eA579b28e02B87A1FDE08d087ab9dbE5149": [
      "event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event SetDODOProxy(address indexed oldProxy, address indexed newProxy)",
      "function _DODO_PROXY_() view returns (address)",
      "function _NEW_OWNER_() view returns (address)",
      "function _OWNER_() view returns (address)",
      "function _PENDING_DODO_PROXY_() view returns (address)",
      "function _TIMELOCK_() view returns (uint256)",
      "function claimOwnership()",
      "function claimTokens(address token, address who, address dest, uint256 amount)",
      "function getDODOProxy() view returns (address)",
      "function init(address owner, address initProxyAddress)",
      "function initOwner(address newOwner)",
      "function lockSetProxy()",
      "function setDODOProxy()",
      "function transferOwnership(address newOwner)",
      "function unlockSetProxy(address newDodoProxy)"
    ],
    "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xCC19bC4D43d17eB6859F0d22BA300967C97780b0": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, address[] allowlist, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event AllowListAdd(address sender)",
      "event AllowListEnabledSet(bool enabled)",
      "event AllowListRemove(address sender)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint96 networkFeeAmountUSD, uint64 gasMultiplier, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFee, uint32 maxFee, uint16 ratio) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setAllowListEnabled(bool enabled)",
      "function setDynamicConfig(tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xCcC8170eB01434Ca514a6f7a5d9ACEB5Ba84DcCc": [
      "constructor(uint64 _currentSelector, uint64 _targetSelector, address router, address link)",
      "error InvalidRouter(address router)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function getFee(address userAddr, address contAddr, uint256 tokenId, bool payInLink) view returns (uint256 fee)",
      "function getRouter() view returns (address)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function requestTransferCrossChain(address contAddr, address to, uint256 tokenId, address dappAddr) payable",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)"
    ],
    "0xccccB27BB46ffE01479248EDDFb75E300DE06879": [
      "error InvalidChain()",
      "error WrongSender()",
      "error WrongSourceAddress()",
      "event BridgedIn(uint256 indexed srcChainId, address indexed tokenReceiver, uint256 amount)",
      "event BridgedOut(uint256 indexed dstChainId, address indexed bridgeUser, address indexed tokenReceiver, uint256 amount)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BIFI() view returns (address)",
      "function bridge(uint256 _dstChainId, uint256 _amount, address _to) payable",
      "function bridge(address _user, uint256 _dstChainId, uint256 _amount, address _to, uint256 _deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function bridgeCost(uint256 _dstChainId, uint256 _amount, address _to) view returns (uint256 gasCost)",
      "function ccipIdToChainId(uint64) view returns (uint256)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function chainIdToCcipId(uint256) view returns (uint64)",
      "function extraArgs() view returns (bytes)",
      "function initialize(address _bifi, address _xbifi, address _lockbox, address _router)",
      "function lockbox() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function router() view returns (address)",
      "function setChainIds(uint256[] _chainIds, uint64[] _ccipChainIds)",
      "function setGasLimit(bytes _extraArgs)",
      "function transferOwnership(address newOwner)",
      "function whitelistedChains(uint64) view returns (bool)",
      "function xBIFI() view returns (address)"
    ],
    "0xcccd6EC6F4705292f07eE4a9a8F1F120963358c5": [
      "error InvalidChain()",
      "error WrongSender()",
      "error WrongSourceAddress()",
      "event BridgedIn(uint256 indexed srcChainId, address indexed tokenReceiver, uint256 amount)",
      "event BridgedOut(uint256 indexed dstChainId, address indexed bridgeUser, address indexed tokenReceiver, uint256 amount)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BIFI() view returns (address)",
      "function bridge(uint256 _dstChainId, uint256 _amount, address _to) payable",
      "function bridge(address _user, uint256 _dstChainId, uint256 _amount, address _to, uint256 _deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function bridgeCost(uint256 _dstChainId, uint256 _amount, address _to) view returns (uint256 gasCost)",
      "function ccipIdToChainId(uint64) view returns (uint256)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function chainIdToCcipId(uint256) view returns (uint64)",
      "function extraArgs() view returns (bytes)",
      "function initialize(address _bifi, address _xbifi, address _lockbox, address[] _contracts)",
      "function lockbox() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function router() view returns (address)",
      "function setChainIds(uint256[] _chainIds, uint64[] _ccipChainIds)",
      "function setGasLimit(bytes _extraArgs)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address newOwner)",
      "function whitelistedChains(uint64) view returns (bool)",
      "function xBIFI() view returns (address)"
    ],
    "0xcccEa7Fe84272995664369334351Fe344E2732aE": [
      "error InvalidChain()",
      "error NoErrorFound()",
      "error WrongSender()",
      "error WrongSourceAddress()",
      "event BridgeError(uint256 indexed errorId, address indexed user, uint256 amount, uint256 timestamp)",
      "event BridgedIn(uint256 indexed srcChainId, address indexed tokenReceiver, uint256 amount)",
      "event BridgedOut(uint256 indexed dstChainId, address indexed bridgeUser, address indexed tokenReceiver, uint256 amount)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BIFI() view returns (address)",
      "function bridge(uint256 _dstChainId, uint256 _amount, address _to) payable",
      "function bridgeCost(uint256 _dstChainId, uint256 _amount, address _to) view returns (uint256 gasCost)",
      "function ccipIdToChainId(uint64) view returns (uint256)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function chainIdToCcipId(uint256) view returns (uint64)",
      "function errors(uint256) view returns (uint256 chainId, address user, uint256 amount)",
      "function extraArgs() view returns (bytes)",
      "function initialize(address _bifi, address _xbifi, address _lockbox, address[] _contracts)",
      "function lockbox() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function retry(uint256 _errorId)",
      "function router() view returns (address)",
      "function setChainIds(uint256[] _chainIds, uint64[] _ccipChainIds)",
      "function setGasLimit(bytes _extraArgs)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address newOwner)",
      "function whitelistedChains(uint64) view returns (bool)",
      "function xBIFI() view returns (address)"
    ],
    "0xcd196D3905AfA0eCB4e0e62C2D7d6c52f9C73526": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)"
    ],
    "0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Swap(address sender, uint256 inputAmount, address inputToken, uint256 amountOut, address outputToken, int256 slippage, uint32 referralCode)",
      "event SwapMulti(address sender, uint256[] amountsIn, address[] tokensIn, uint256[] amountsOut, address[] tokensOut, uint32 referralCode)",
      "function FEE_DENOM() view returns (uint256)",
      "function REFERRAL_WITH_FEE_THRESHOLD() view returns (uint256)",
      "function addressList(uint256) view returns (address)",
      "function owner() view returns (address)",
      "function referralLookup(uint32) view returns (uint64 referralFee, address beneficiary, bool registered)",
      "function registerReferralCode(uint32 _referralCode, uint64 _referralFee, address _beneficiary)",
      "function renounceOwnership()",
      "function setSwapMultiFee(uint256 _swapMultiFee)",
      "function swap(tuple(address inputToken, uint256 inputAmount, address inputReceiver, address outputToken, uint256 outputQuote, uint256 outputMin, address outputReceiver) tokenInfo, bytes pathDefinition, address executor, uint32 referralCode) payable returns (uint256 amountOut)",
      "function swapCompact() payable returns (uint256)",
      "function swapMulti(tuple(address tokenAddress, uint256 amountIn, address receiver)[] inputs, tuple(address tokenAddress, uint256 relativeValue, address receiver)[] outputs, uint256 valueOutMin, bytes pathDefinition, address executor, uint32 referralCode) payable returns (uint256[] amountsOut)",
      "function swapMultiCompact() payable returns (uint256[] amountsOut)",
      "function swapMultiFee() view returns (uint256)",
      "function swapMultiPermit2(tuple(address contractAddress, uint256 nonce, uint256 deadline, bytes signature) permit2, tuple(address tokenAddress, uint256 amountIn, address receiver)[] inputs, tuple(address tokenAddress, uint256 relativeValue, address receiver)[] outputs, uint256 valueOutMin, bytes pathDefinition, address executor, uint32 referralCode) payable returns (uint256[] amountsOut)",
      "function swapPermit2(tuple(address contractAddress, uint256 nonce, uint256 deadline, bytes signature) permit2, tuple(address inputToken, uint256 inputAmount, address inputReceiver, address outputToken, uint256 outputQuote, uint256 outputMin, address outputReceiver) tokenInfo, bytes pathDefinition, address executor, uint32 referralCode) returns (uint256 amountOut)",
      "function swapRouterFunds(tuple(address tokenAddress, uint256 amountIn, address receiver)[] inputs, tuple(address tokenAddress, uint256 relativeValue, address receiver)[] outputs, uint256 valueOutMin, bytes pathDefinition, address executor) returns (uint256[] amountsOut)",
      "function transferOwnership(address newOwner)",
      "function transferRouterFunds(address[] tokens, uint256[] amounts, address dest)",
      "function writeAddressList(address[] addresses)"
    ],
    "0xd0B5Fc9790a6085b048b8Aa1ED26ca2b3b282CF2": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, address[] allowlist, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event AllowListAdd(address sender)",
      "event AllowListEnabledSet(bool enabled)",
      "event AllowListRemove(address sender)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint96 networkFeeAmountUSD, uint64 gasMultiplier, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFee, uint32 maxFee, uint16 ratio) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setAllowListEnabled(bool enabled)",
      "function setDynamicConfig(tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xd18C6a3488d424920dD9f6A4187645794df96383": [
      "constructor(address _oftWrapper)",
      "error AlreadyInitialized()",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetNotSupported()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NotInitialized()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "error UnknownLayerZeroChain()",
      "event BridgeToNonEVMChain(bytes32 indexed transactionId, uint16 indexed layerZeroChainId, bytes32 receiver)",
      "event LayerZeroChainIdSet(uint256 indexed chainId, uint16 layerZeroChainId)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OFTWrapperInitialized(tuple(uint256 chainId, uint16 layerZeroChainId)[] chainIdConfigs)",
      "function estimateSendFee(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint8 tokenType, bytes32 receiver, uint256 minAmount, uint256 lzFee, bytes adapterParams) _oftWrapperData) view returns (uint256 nativeFee, uint256 zroFee)",
      "function initOFTWrapper(tuple(uint256 chainId, uint16 layerZeroChainId)[] chainIdConfigs)",
      "function setOFTLayerZeroChainId(uint256 _chainId, uint16 _layerZeroChainId)",
      "function startBridgeTokensViaOFTWrapper(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint8 tokenType, bytes32 receiver, uint256 minAmount, uint256 lzFee, bytes adapterParams) _oftWrapperData) payable",
      "function swapAndStartBridgeTokensViaOFTWrapper(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint8 tokenType, bytes32 receiver, uint256 minAmount, uint256 lzFee, bytes adapterParams) _oftWrapperData) payable"
    ],
    "0xd1b3015ceFCAC84dB3EFCBB18FBdd50BA5aF49DE": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xD3cF979e676265e4f6379749DECe4708B9A22476": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xd84d9A8Bf830496C4DEc917bC27D22E09E01cB8A": [
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidConfig()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event HopBridgeRegistered(address indexed assetId, address bridge)",
      "event HopInitialized(tuple(address assetId, address bridge)[] configs)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function initHop(tuple(address assetId, address bridge)[] configs)",
      "function registerBridge(address assetId, address bridge)",
      "function startBridgeTokensViaHop(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable",
      "function swapAndStartBridgeTokensViaHop(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 bonderFee, uint256 amountOutMin, uint256 deadline, uint256 destinationAmountOutMin, uint256 destinationDeadline, address relayer, uint256 relayerFee, uint256 nativeFee) _hopData) payable"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F": [
      "constructor(address _factory, address _WETH)",
      "function WETH() view returns (address)",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function factory() view returns (address)",
      "function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountIn)",
      "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountOut)",
      "function getAmountsIn(uint256 amountOut, address[] path) view returns (uint256[] amounts)",
      "function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)",
      "function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)",
      "function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)",
      "function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountETH)",
      "function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountETH)",
      "function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountA, uint256 amountB)",
      "function swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable",
      "function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)"
    ],
    "0xda3111E42Ba048a9Be555f0C08d363F26B2A375a": [
      "constructor(address _singleton)"
    ],
    "0xdCa0A2341ed5438E06B9982243808A76B9ADD6d0": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientLiquidity()",
      "error LiquidityNotAccepted()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error WithdrawalTooHigh()",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function addLiquidity(uint256 amount)",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function canAcceptLiquidity() view returns (bool)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getProvidedLiquidity(address provider) view returns (uint256)",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function removeLiquidity(uint256 amount)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57": [
      "constructor(address _feeWallet)",
      "event AdapterInitialized(address indexed adapter)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RouterInitialized(address indexed router)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function ROUTER_ROLE() view returns (bytes32)",
      "function WHITELISTED_ROLE() view returns (bytes32)",
      "function getAdapterData(bytes32 key) view returns (bytes)",
      "function getFeeWallet() view returns (address)",
      "function getImplementation(bytes4 selector) view returns (address)",
      "function getPartnerFeeStructure(address partner) view returns (tuple(uint256 partnerShare, bool noPositiveSlippage, bool positiveSlippageToUser, uint16 feePercent, string partnerId, bytes data))",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getRouterData(bytes32 key) view returns (bytes)",
      "function getTokenTransferProxy() view returns (address)",
      "function getVersion() pure returns (string)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initializeAdapter(address adapter, bytes data)",
      "function initializeRouter(address router, bytes data)",
      "function isAdapterInitialized(bytes32 key) view returns (bool)",
      "function isRouterInitialized(bytes32 key) view returns (bool)",
      "function registerPartner(address partner, uint256 _partnerShare, bool _noPositiveSlippage, bool _positiveSlippageToUser, uint16 _feePercent, string partnerId, bytes _data)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setFeeWallet(address _feeWallet)",
      "function setImplementation(bytes4 selector, address implementation)",
      "function transferTokens(address token, address destination, uint256 amount)"
    ],
    "0xDef1C0ded9bec7F1a1670819833240f027b25EfF": [
      "constructor()",
      "function getFunctionImplementation(bytes4 selector) view returns (address impl)"
    ],
    "0xdF715B5815A735DCfF31166d642A367f5405e6Ef": [
      "constructor(address _router, address _link, string uri)",
      "error ApprovalCallerNotOwnerNorApproved()",
      "error ApprovalQueryForNonexistentToken()",
      "error BalanceQueryForZeroAddress()",
      "error BridgeToUnknownCollection()",
      "error InvalidRouter(address router)",
      "error MintERC2309QuantityExceedsLimit()",
      "error MintToZeroAddress()",
      "error MintZeroQuantity()",
      "error MissingRole(address user, uint256 role)",
      "error NotEnoughLink()",
      "error NotOwner()",
      "error OwnerQueryForNonexistentToken()",
      "error OwnershipNotInitializedForExtraData()",
      "error TokenIsNotLocked()",
      "error TransferCallerNotOwnerNorApproved()",
      "error TransferFromIncorrectOwner()",
      "error TransferToNonERC721ReceiverImplementer()",
      "error TransferToZeroAddress()",
      "error URIQueryForNonexistentToken()",
      "error UnauthorizedMint()",
      "error WithdrawFailed()",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
      "event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)",
      "event MessageSent(bytes32 messageId)",
      "event MetadataUpdate(uint256 _tokenId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RoleUpdated(address indexed user, uint256 indexed role, bool indexed status)",
      "event RoyaltiesUpdated(uint64 indexed feeBps, address indexed recipient)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function approve(address to, uint256 tokenId) payable",
      "function balanceOf(address tokenOwner) view returns (uint256)",
      "function bridge(uint256 tokenId, address toAddress, uint64 toChain, address toSister)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function getRoles(address user) view returns (bytes32)",
      "function getRouter() view returns (address)",
      "function isApprovedForAll(address tokenOwner, address operator) view returns (bool)",
      "function mint(address to, uint256 tokenId, bytes signature) payable",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function royaltyInfo(uint256, uint256 salePrice) view returns (address, uint256)",
      "function safeTransferFrom(address from, address to, uint256 tokenId) payable",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) payable",
      "function setApprovalForAll(address operator, bool approved)",
      "function setBaseURI(string uri)",
      "function setCCIPRouter(address newRouter)",
      "function setRole(address user, uint8 role, bool status)",
      "function setRoyaltiesConfig(uint64 feeBps, address recipient)",
      "function setSister(uint64 chainSelector, address collection, bool status)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function symbol() view returns (string)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function transferFrom(address from, address to, uint256 tokenId) payable",
      "function transferOwnership(address newOwner)",
      "function unlockToken(uint256 tokenId, address to)",
      "function withdraw()",
      "function withdrawToken(address token, address to)"
    ],
    "0xdf85c8381954694E74abD07488f452b4c2Cddfb3": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xe12b2488c71432F9a116E9ac244D3Ef4c2386d3a": [
      "constructor(address _symbiosisMetaRouter, address _symbiosisGateway)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaSymbiosis(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(bytes firstSwapCalldata, bytes secondSwapCalldata, address intermediateToken, address firstDexRouter, address secondDexRouter, address[] approvedTokens, address callTo, bytes callData) _symbiosisData) payable",
      "function swapAndStartBridgeTokensViaSymbiosis(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(bytes firstSwapCalldata, bytes secondSwapCalldata, address intermediateToken, address firstDexRouter, address secondDexRouter, address[] approvedTokens, address callTo, bytes callData) _symbiosisData) payable"
    ],
    "0xe1FaF1759cAB242c5A790Da72c8f0cC7F5e09f59": [
      "constructor(address _tokenMessenger, address _usdc)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error InvalidSendingToken()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaCircleBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint32 dstDomain) _circleBridgeData)",
      "function swapAndStartBridgeTokensViaCircleBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint32 dstDomain) _circleBridgeData) payable"
    ],
    "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xe2Eb229e88F56691e96bb98256707Bc62160FE73": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, address[] allowlist, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event AllowListAdd(address sender)",
      "event AllowListEnabledSet(bool enabled)",
      "event AllowListRemove(address sender)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint96 networkFeeAmountUSD, uint64 gasMultiplier, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFee, uint32 maxFee, uint16 ratio) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setAllowListEnabled(bool enabled)",
      "function setDynamicConfig(tuple(address router, uint16 maxTokensLength, address priceRegistry, uint32 maxDataSize, uint64 maxGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint64 gasMultiplier, uint96 networkFeeAmountUSD, uint32 destGasOverhead, uint16 destGasPerPayloadByte, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFee, uint32 maxFee, uint16 ratio)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xE2F0dad85D504aa046b9F704a426fD6C5493e366": [
      "constructor(address token, address[] allowlist, address armProxy, bool acceptLiquidity, address router)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CallerIsNotARampOnRouter(address caller)",
      "error ChainAlreadyExists(uint64 chainSelector)",
      "error ChainNotAllowed(uint64 remoteChainSelector)",
      "error DisabledNonZeroRateLimit(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "error InsufficientLiquidity()",
      "error InvalidRatelimitRate(tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error LiquidityNotAccepted()",
      "error NonExistentChain(uint64 remoteChainSelector)",
      "error RateLimitMustBeDisabled()",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error Unauthorized(address caller)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event ChainAdded(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainConfigured(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)",
      "event ChainRemoved(uint64 remoteChainSelector)",
      "event LiquidityAdded(address indexed provider, uint256 indexed amount)",
      "event LiquidityRemoved(address indexed provider, uint256 indexed amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "event RouterUpdated(address oldRouter, address newRouter)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyChainUpdates(tuple(uint64 remoteChainSelector, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundRateLimiterConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundRateLimiterConfig)[] chains)",
      "function canAcceptLiquidity() view returns (bool)",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getCurrentInboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getCurrentOutboundRateLimiterState(uint64 remoteChainSelector) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getLockReleaseInterfaceId() pure returns (bytes4)",
      "function getRateLimitAdmin() view returns (address)",
      "function getRebalancer() view returns (address)",
      "function getRouter() view returns (address router)",
      "function getSupportedChains() view returns (uint64[])",
      "function getToken() view returns (address token)",
      "function isSupportedChain(uint64 remoteChainSelector) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64 remoteChainSelector, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function provideLiquidity(uint256 amount)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64 remoteChainSelector, bytes)",
      "function setChainRateLimiterConfig(uint64 remoteChainSelector, tuple(bool isEnabled, uint128 capacity, uint128 rate) outboundConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) inboundConfig)",
      "function setRateLimitAdmin(address rateLimitAdmin)",
      "function setRebalancer(address rebalancer)",
      "function setRouter(address newRouter)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawLiquidity(uint256 amount)"
    ],
    "0xE397c4883ec89ed4Fc9D258F00C689708b2799c9": [
      "constructor(address _spokePool, address _wrappedNative, address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error UnAuthorized()",
      "error WithdrawFailed()",
      "event CallExecutedAndFundsWithdrawn()",
      "event LiFiAcrossTransfer(bytes8 _transactionId)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function ACROSS_REFERRER_DELIMITER() view returns (bytes)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function decode_startBridgeTokensViaAcrossERC20Packed(bytes data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData, tuple(int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) acrossData)",
      "function decode_startBridgeTokensViaAcrossNativePacked(bytes data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData, tuple(int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) acrossData)",
      "function encode_startBridgeTokensViaAcrossERC20Packed(bytes32 transactionId, address receiver, address sendingAssetId, uint256 minAmount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) pure returns (bytes)",
      "function encode_startBridgeTokensViaAcrossNativePacked(bytes32 transactionId, address receiver, uint64 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, uint256 maxCount, bytes message) pure returns (bytes)",
      "function executeCallAndWithdraw(address _callTo, bytes _callData, address _assetAddress, address _to, uint256 _amount)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function setApprovalForBridge(address[] tokensToApprove)",
      "function startBridgeTokensViaAcrossERC20Min(bytes32 transactionId, address sendingAssetId, uint256 minAmount, address receiver, uint64 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) payable",
      "function startBridgeTokensViaAcrossERC20Packed() payable",
      "function startBridgeTokensViaAcrossNativeMin(bytes32 transactionId, address receiver, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256 maxCount) payable",
      "function startBridgeTokensViaAcrossNativePacked() payable",
      "function transferOwnership(address _newOwner)"
    ],
    "0xE3dd9Ff9af27e69d1C4CeCcecf9D2B2896048a7e": [
      "event CheckpointToken(uint256 time, uint256 tokens)",
      "event Claimed(uint256 tokenId, uint256 amount, uint256 claim_epoch, uint256 max_epoch)",
      "function checkpoint_token()",
      "function checkpoint_total_supply()",
      "function claim(uint256 _tokenId) returns (uint256)",
      "function claim_many(uint256[] _tokenIds) returns (bool)",
      "function claimable(uint256 _tokenId) view returns (uint256)",
      "function depositor() view returns (address)",
      "function governanceAddress() view returns (address _governanceAddress)",
      "function initialize(address _voting_escrow)",
      "function last_token_time() view returns (uint256)",
      "function setDepositor(address _depositor)",
      "function start_time() view returns (uint256)",
      "function time_cursor() view returns (uint256)",
      "function time_cursor_of(uint256) view returns (uint256)",
      "function timestamp() view returns (uint256)",
      "function token() view returns (address)",
      "function token_last_balance() view returns (uint256)",
      "function tokens_per_week(uint256) view returns (uint256)",
      "function user_epoch_of(uint256) view returns (uint256)",
      "function ve_for_at(uint256 _tokenId, uint256 _timestamp) view returns (uint256)",
      "function ve_supply(uint256) view returns (uint256)",
      "function voting_escrow() view returns (address)"
    ],
    "0xe43ca1Dee3F0fc1e2df73A0745674545F11A59F5": [
      "constructor(address _bentoBox, address[] priviledgedUserList)",
      "error MinimalOutputBalanceViolation(uint256 amountOut)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Route(address indexed from, address to, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOutMin, uint256 amountOut)",
      "function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)",
      "function bentoBox() view returns (address)",
      "function owner() view returns (address)",
      "function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)",
      "function pause()",
      "function priviledgedUsers(address) view returns (bool)",
      "function processRoute(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOutMin, address to, bytes route) payable returns (uint256 amountOut)",
      "function renounceOwnership()",
      "function resume()",
      "function setPriviledge(address user, bool priviledge)",
      "function transferOwnership(address newOwner)",
      "function transferValueAndprocessRoute(address transferValueTo, uint256 amountValueTransfer, address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOutMin, address to, bytes route) payable returns (uint256 amountOut)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)"
    ],
    "0xE561d5E02207fb5eB32cca20a699E0d8919a1476": [
      "constructor(address wrappedNative, address armProxy)",
      "error BadARMSignal()",
      "error FailedToSendValue()",
      "error InsufficientFeeTokenAmount()",
      "error InvalidMsgValue()",
      "error InvalidRecipientAddress(address to)",
      "error OffRampMismatch()",
      "error OnlyOffRamp()",
      "error UnsupportedDestinationChain(uint64 destChainSelector)",
      "event MessageExecuted(bytes32 messageId, uint64 sourceChainSelector, address offRamp, bytes32 calldataHash)",
      "event OffRampAdded(uint64 indexed sourceChainSelector, address offRamp)",
      "event OffRampRemoved(uint64 indexed sourceChainSelector, address offRamp)",
      "event OnRampSet(uint64 indexed destChainSelector, address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function MAX_RET_BYTES() view returns (uint16)",
      "function acceptOwnership()",
      "function applyRampUpdates(tuple(uint64 destChainSelector, address onRamp)[] onRampUpdates, tuple(uint64 sourceChainSelector, address offRamp)[] offRampRemoves, tuple(uint64 sourceChainSelector, address offRamp)[] offRampAdds)",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32)",
      "function getArmProxy() view returns (address)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getOffRamps() view returns (tuple(uint64 sourceChainSelector, address offRamp)[])",
      "function getOnRamp(uint64 destChainSelector) view returns (address)",
      "function getSupportedTokens(uint64 chainSelector) view returns (address[])",
      "function getWrappedNative() view returns (address)",
      "function isChainSupported(uint64 chainSelector) view returns (bool)",
      "function isOffRamp(address offRamp) view returns (bool, uint64)",
      "function owner() view returns (address)",
      "function recoverTokens(address tokenAddress, address to, uint256 amount)",
      "function routeMessage(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message, uint16 gasForCallExactCheck, uint256 gasLimit, address receiver) returns (bool success, bytes retData)",
      "function setWrappedNative(address wrappedNative)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xE592427A0AEce92De3Edee1F18E0157C05861564": [
      "constructor(address _factory, address _WETH9)",
      "function WETH9() view returns (address)",
      "function exactInput(tuple(bytes path, address recipient, uint256 deadline, uint256 amountIn, uint256 amountOutMinimum) params) payable returns (uint256 amountOut)",
      "function exactInputSingle(tuple(address tokenIn, address tokenOut, uint24 fee, address recipient, uint256 deadline, uint256 amountIn, uint256 amountOutMinimum, uint160 sqrtPriceLimitX96) params) payable returns (uint256 amountOut)",
      "function exactOutput(tuple(bytes path, address recipient, uint256 deadline, uint256 amountOut, uint256 amountInMaximum) params) payable returns (uint256 amountIn)",
      "function exactOutputSingle(tuple(address tokenIn, address tokenOut, uint24 fee, address recipient, uint256 deadline, uint256 amountOut, uint256 amountInMaximum, uint160 sqrtPriceLimitX96) params) payable returns (uint256 amountIn)",
      "function factory() view returns (address)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function refundETH() payable",
      "function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable",
      "function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) payable",
      "function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function sweepToken(address token, uint256 amountMinimum, address recipient) payable",
      "function sweepTokenWithFee(address token, uint256 amountMinimum, address recipient, uint256 feeBips, address feeRecipient) payable",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes _data)",
      "function unwrapWETH9(uint256 amountMinimum, address recipient) payable",
      "function unwrapWETH9WithFee(uint256 amountMinimum, address recipient, uint256 feeBips, address feeRecipient) payable"
    ],
    "0xe7072402217EfF9b73cf457731cEE2A3824360dc": [
      "constructor(address _allBridge)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaAllBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint256 fees, bytes32 recipient, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger, bool payFeeWithSendingAsset) _allBridgeData) payable",
      "function swapAndStartBridgeTokensViaAllBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint256 fees, bytes32 recipient, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger, bool payFeeWithSendingAsset) _allBridgeData) payable"
    ],
    "0xE7Bf43C55551B1036e796E7Fd3b125d1F9903e2E": [
      "constructor(address _cBridge, address _owner)",
      "error ContractCallNotAllowed()",
      "error ExternalCallFailed()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error UnAuthorized()",
      "event CBridgeRefund(address indexed _assetAddress, address indexed _to, uint256 amount)",
      "event LiFiCBridgeTransfer(bytes8 _transactionId)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function decode_startBridgeTokensViaCBridgeERC20Packed(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(uint32 maxSlippage, uint64 nonce))",
      "function decode_startBridgeTokensViaCBridgeNativePacked(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(uint32 maxSlippage, uint64 nonce))",
      "function encode_startBridgeTokensViaCBridgeERC20Packed(bytes32 transactionId, address receiver, uint64 destinationChainId, address sendingAssetId, uint256 minAmount, uint64 nonce, uint32 maxSlippage) pure returns (bytes)",
      "function encode_startBridgeTokensViaCBridgeNativePacked(bytes32 transactionId, address receiver, uint64 destinationChainId, uint64 nonce, uint32 maxSlippage) pure returns (bytes)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function setApprovalForBridge(address[] tokensToApprove)",
      "function startBridgeTokensViaCBridgeERC20Min(bytes32 transactionId, address receiver, uint64 destinationChainId, address sendingAssetId, uint256 amount, uint64 nonce, uint32 maxSlippage)",
      "function startBridgeTokensViaCBridgeERC20Packed()",
      "function startBridgeTokensViaCBridgeNativeMin(bytes32 transactionId, address receiver, uint64 destinationChainId, uint64 nonce, uint32 maxSlippage) payable",
      "function startBridgeTokensViaCBridgeNativePacked() payable",
      "function transferOwnership(address _newOwner)",
      "function triggerRefund(address _callTo, bytes _callData, address _assetAddress, address _to, uint256 _amount)"
    ],
    "0xe7c2A8ABceD933E58C1425C160023948C43eB99F": [
      "error InvalidRouter(address router)",
      "error NotTheJunkyard(uint64 selector, address sender)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) any2EvmMessage)"
    ],
    "0xe80E2a7ea862AF5580fBa9B7092a397e3D73cb7f": [
      "constructor(address _circleBridgeProxy, address _usdc)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error InvalidSendingToken()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaCelerCircleBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData)",
      "function swapAndStartBridgeTokensViaCelerCircleBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711": [
      "constructor(address logic, address admin_, bytes data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xE8af3b68eDfFf65Ce48648009982380701f09B92": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xE8Ff7BFEF5DacB57E87bC2d0B6CCFefBE5f546BC": [
      "error AlreadyInitialized()",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidConfig()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NotInitialized()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OptimismBridgeRegistered(address indexed assetId, address bridge)",
      "event OptimismInitialized(tuple(address assetId, address bridge)[] configs)",
      "function initOptimism(tuple(address assetId, address bridge)[] configs, address standardBridge)",
      "function registerOptimismBridge(address assetId, address bridge)",
      "function startBridgeTokensViaOptimismBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address assetIdOnL2, uint32 l2Gas, bool isSynthetix) _optimismData) payable",
      "function swapAndStartBridgeTokensViaOptimismBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address assetIdOnL2, uint32 l2Gas, bool isSynthetix) _optimismData) payable"
    ],
    "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xe9a9B6CE6ae2141Ed7393a61E6CaaDC481780f77": [
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Swapped(address indexed sender, address indexed srcToken, address indexed dstToken, address dstReceiver, uint256 amount, uint256 spentAmount, uint256 returnAmount, uint256 minReturnAmount, uint256 guaranteedAmount, address referrer)",
      "event Unpaused(address account)",
      "function callUniswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools) payable returns (uint256 returnAmount)",
      "function callUniswapTo(address srcToken, uint256 amount, uint256 minReturn, bytes32[], address recipient) payable returns (uint256 returnAmount)",
      "function callUniswapToWithPermit(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools, bytes permit, address recipient) returns (uint256 returnAmount)",
      "function callUniswapWithPermit(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools, bytes permit) returns (uint256 returnAmount)",
      "function initialize()",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function renounceOwnership()",
      "function rescueFunds(address token, uint256 amount)",
      "function swap(address caller, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 guaranteedAmount, uint256 flags, address referrer, bytes permit) desc, tuple(uint256 target, uint256 gasLimit, uint256 value, bytes data)[] calls) payable returns (uint256 returnAmount)",
      "function transferOwnership(address newOwner)",
      "function uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes)",
      "function uniswapV3SwapTo(address recipient, uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit) returns (uint256 returnAmount)"
    ],
    "0xeaE89E53B8317CaB04165F5323285252D5669B73": [
      "constructor(address token, address[] allowlist, address armProxy)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AllowListNotEnabled()",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error NonExistentRamp(address ramp)",
      "error PermissionsError()",
      "error RampAlreadyExists(address ramp)",
      "error SenderNotAllowed(address sender)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error ZeroAddressNotAllowed()",
      "event AllowListAdd(address sender)",
      "event AllowListRemove(address sender)",
      "event Burned(address indexed sender, uint256 amount)",
      "event Locked(address indexed sender, uint256 amount)",
      "event Minted(address indexed sender, address indexed recipient, uint256 amount)",
      "event OffRampAdded(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampConfigured(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OffRampRemoved(address offRamp)",
      "event OnRampAdded(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampConfigured(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "event OnRampRemoved(address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Released(address indexed sender, address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function applyAllowListUpdates(address[] removes, address[] adds)",
      "function applyRampUpdates(tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] onRamps, tuple(address ramp, bool allowed, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)[] offRamps)",
      "function currentOffRampRateLimiterState(address offRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function currentOnRampRateLimiterState(address onRamp) view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function getAllowList() view returns (address[])",
      "function getAllowListEnabled() view returns (bool)",
      "function getArmProxy() view returns (address armProxy)",
      "function getOffRamps() view returns (address[])",
      "function getOnRamps() view returns (address[])",
      "function getToken() view returns (address token)",
      "function isOffRamp(address offRamp) view returns (bool)",
      "function isOnRamp(address onRamp) view returns (bool)",
      "function lockOrBurn(address originalSender, bytes, uint256 amount, uint64, bytes) returns (bytes)",
      "function owner() view returns (address)",
      "function releaseOrMint(bytes, address receiver, uint256 amount, uint64, bytes)",
      "function setOffRampRateLimiterConfig(address offRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setOnRampRateLimiterConfig(address onRamp, tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xeEFD0D67E4eF9330870961C38a3e25ECE369B141": [
      "constructor(address headerStorage, uint64 adapterChain, address ccipRouter, uint64 ccipAdapterChain)",
      "event HeaderReported(address indexed emitter, uint256 indexed blockNumber, bytes32 indexed blockHeader)",
      "function ADAPTER_CHAIN() view returns (uint256)",
      "function CCIP_ADAPTER_CHAIN() view returns (uint64)",
      "function CCIP_ROUTER() view returns (address)",
      "function HEADER_STORAGE() view returns (address)",
      "function PROVIDER() view returns (string)",
      "function reportHeaders(uint256[] blockNumbers, address adapter) payable"
    ],
    "0xef3c8e083De1AE85afecdAf5D6AbC15427f5AbcB": [
      "constructor(address _sourceRouter, uint64 _thisChainSelector, uint64 _relayerChainSelector, address _roleManager, address _ccipManager, address _harvestManager, address _feeManager, uint256 _feePercentage)",
      "error InvalidRouter(address router)",
      "event Execute(address indexed caller, address indexed gatewayWallet, address indexed destination, bool status, address contractDeployed, bytes32 extraData)",
      "event ReceiveRTC(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address caller, address targetContract, bytes32 extraData)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SendRTC(bytes32 indexed messageId, address indexed caller, uint64 destinationChainSelector, uint64 execChainSelector, address targetContract, bytes32 extraData, address feeToken, uint256 ccipfees, uint256 totalFees)",
      "event WalletDeploy(address indexed owner, address gatewayWallet)",
      "function CCIP_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FEE_MANAGER_ROLE() view returns (bytes32)",
      "function HARVEST_MANAGER_ROLE() view returns (bytes32)",
      "function batchExecute(uint64[][] execChainSelectors, string[] salt, address[] destination, uint256[] value, bytes[] data, uint256[] gasLimit, bytes32[] extraData) payable returns (bool[] success, address[] contractDeployed, bytes32[] messageId)",
      "function calculateAddress(address owner, string salt) view returns (address)",
      "function calculateBatchExecuteFee(address caller, uint64[][] execChainSelectors, string[] salt, address[] destination, uint256[] value, bytes[] data, uint256[] gasLimit, bytes32[] extraData) view returns (uint256 totalFee)",
      "function calculateCreate2Address(address owner, string salt, bytes byteCode, bytes32 create2Salt) view returns (address)",
      "function calculateExecuteFee(address caller, uint64[] execChainSelectors, string salt, address destination, uint256 value, bytes data, uint256 gasLimit, bytes32 extraData) view returns (uint256 totalFee)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function controllingChains(address) view returns (uint64)",
      "function deploy(string salt) returns (address)",
      "function deployed(address) view returns (bool)",
      "function execute(uint64[] execChainSelectors, string salt, address destination, uint256 value, bytes data, uint256 gasLimit, bytes32 extraData) payable returns (bool success, address contractDeployed, bytes32 messageId)",
      "function feePercentage() view returns (uint256)",
      "function getDeployedWallets(address owner) view returns (address[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRouter() view returns (address)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function instances(address, uint256) view returns (address)",
      "function relayerChainSelector() view returns (uint64)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function salts(address) view returns (string)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function thisChainSelector() view returns (uint64)",
      "function updateFee(uint256 _feePercentage)",
      "function updateRouter(address _newRouterAddress)",
      "function withdraw(uint256 amount)"
    ],
    "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xf068cc770f32042Ff4a8fD196045641234dFaa47": [
      "constructor(address _owner)",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error NativeAssetTransferFailed()",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NoTransferToNullAddress()",
      "error NotEnoughNativeForFees()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAnERC20Token()",
      "error TransferFailure()",
      "error UnAuthorized()",
      "event FeesWithdrawn(address indexed token, address indexed to, uint256 amount)",
      "event GasFeesCollected(address indexed token, uint256 indexed chainId, address indexed receiver, uint256 feeAmount)",
      "event InsuranceFeesCollected(address indexed token, address indexed receiver, uint256 feeAmount)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function batchWithdrawFees(address[] tokenAddresses)",
      "function cancelOwnershipTransfer()",
      "function collectNativeGasFees(uint256 chainId, address receiver) payable",
      "function collectNativeInsuranceFees(address receiver) payable",
      "function collectTokenGasFees(address tokenAddress, uint256 feeAmount, uint256 chainId, address receiver)",
      "function collectTokenInsuranceFees(address tokenAddress, uint256 feeAmount, address receiver)",
      "function confirmOwnershipTransfer()",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "function withdrawFees(address tokenAddress)"
    ],
    "0xF18A285f4e6f720Eb9b4e05df71f88b9552E6ADB": [
      "constructor(address _connextHandler, address _owner)",
      "error NewOwnerMustNotBeSelf()",
      "error NoNullOwner()",
      "error NoPendingOwnershipTransfer()",
      "error NotPendingOwner()",
      "error NullAddrIsNotAValidSpender()",
      "error UnAuthorized()",
      "event LiFiAmarokTransfer(bytes8 _transactionId)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OwnershipTransferRequested(address indexed _from, address indexed _to)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function cancelOwnershipTransfer()",
      "function confirmOwnershipTransfer()",
      "function decode_startBridgeTokensViaAmarokERC20PackedPayFeeWithAsset(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(bytes callData, address callTo, uint256 relayerFee, uint256 slippageTol, address delegate, uint32 destChainDomainId, bool payFeeWithSendingAsset))",
      "function decode_startBridgeTokensViaAmarokERC20PackedPayFeeWithNative(bytes _data) pure returns (tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall), tuple(bytes callData, address callTo, uint256 relayerFee, uint256 slippageTol, address delegate, uint32 destChainDomainId, bool payFeeWithSendingAsset))",
      "function encode_startBridgeTokensViaAmarokERC20PackedPayFeeWithAsset(bytes32 transactionId, address receiver, address sendingAssetId, uint256 minAmount, uint32 destChainDomainId, uint256 slippageTol, uint256 relayerFee) pure returns (bytes)",
      "function encode_startBridgeTokensViaAmarokERC20PackedPayFeeWithNative(bytes32 transactionId, address receiver, address sendingAssetId, uint256 minAmount, uint32 destChainDomainId, uint256 slippageTol) pure returns (bytes)",
      "function getChainIdForDomain(uint32 domainId) pure returns (uint32 chainId)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function setApprovalForBridge(address[] tokensToApprove)",
      "function startBridgeTokensViaAmarokERC20MinPayFeeWithAsset(bytes32 transactionId, address receiver, address sendingAssetId, uint256 minAmount, uint32 destChainDomainId, uint256 slippageTol, uint256 relayerFee)",
      "function startBridgeTokensViaAmarokERC20MinPayFeeWithNative(bytes32 transactionId, address receiver, address sendingAssetId, uint256 minAmount, uint32 destChainDomainId, uint256 slippageTol) payable",
      "function startBridgeTokensViaAmarokERC20PackedPayFeeWithAsset()",
      "function startBridgeTokensViaAmarokERC20PackedPayFeeWithNative() payable",
      "function transferOwnership(address _newOwner)"
    ],
    "0xF1d67E1dddc87E2858C87EBd5b19f99a4E297541": [
      "error CalldataEmptyButInitNotZero()",
      "error FacetAddressIsNotZero()",
      "error FacetAddressIsZero()",
      "error FacetContainsNoCode()",
      "error FunctionAlreadyExists()",
      "error FunctionDoesNotExist()",
      "error FunctionIsImmutable()",
      "error IncorrectFacetCutAction()",
      "error InitReverted()",
      "error InitZeroButCalldataNotEmpty()",
      "error NoSelectorsInFace()",
      "error OnlyContractOwner()",
      "event DiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function diamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)"
    ],
    "0xF2c63815eBD0c4E048eF216C77E2c80aa4ecD59c": [
      "constructor(address _router)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaHyphen(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaHyphen(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0xF3f04555f8FdA510bfC77820FD6eB8446f59E72d": [
      "constructor(address _tokenBridge, address _weth)",
      "event Redeemed(uint16 indexed emitterChainId, bytes32 indexed emitterAddress, uint64 indexed sequence)",
      "function changeGuardian(address newGuardian)",
      "function claimGuardian()",
      "function encodeSwap(tuple(uint8 payloadId, bytes32 tokenAddr, uint16 tokenChainId, bytes32 destAddr, uint16 destChainId, bytes32 sourceAddr, uint16 sourceChainId, uint64 sequence, uint64 amountOutMin, uint64 deadline, uint64 swapFee, uint64 redeemFee, uint64 refundFee, bytes32 auctionAddr, bool unwrapRedeem, bool unwrapRefund) s) pure returns (bytes encoded)",
      "function getWeth() view returns (address)",
      "function isPaused() view returns (bool)",
      "function parseRedeemPayload(bytes encoded) pure returns (tuple(uint8 payloadId, bytes32 recipient, uint64 relayerFee, bool unwrap, uint64 gasDrop, bytes customPayload) r)",
      "function redeem(bytes encodedVm) payable",
      "function redeemAndUnwrap(bytes encodedVm)",
      "function setPause(bool _pause)",
      "function swap(tuple(uint64 swapFee, uint64 redeemFee, uint64 refundFee) relayerFees, tuple(bytes32 mayanAddr, uint16 mayanChainId, bytes32 auctionAddr, bytes32 destAddr, uint16 destChainId, bytes32 referrer, bytes32 refundAddr) recipient, bytes32 tokenOutAddr, uint16 tokenOutChainId, tuple(uint256 transferDeadline, uint64 swapDeadline, uint64 amountOutMin, bool unwrap, uint64 gasDrop, bytes customPayload) criteria, address tokenIn, uint256 amountIn) payable returns (uint64 sequence)",
      "function sweepEth(uint256 amount, address to)",
      "function sweepToken(address token, uint256 amount, address to)",
      "function wrapAndSwapETH(tuple(uint64 swapFee, uint64 redeemFee, uint64 refundFee) relayerFees, tuple(bytes32 mayanAddr, uint16 mayanChainId, bytes32 auctionAddr, bytes32 destAddr, uint16 destChainId, bytes32 referrer, bytes32 refundAddr) recipient, bytes32 tokenOutAddr, uint16 tokenOutChainId, tuple(uint256 transferDeadline, uint64 swapDeadline, uint64 amountOutMin, bool unwrap, uint64 gasDrop, bytes customPayload) criteria) payable returns (uint64 sequence)"
    ],
    "0xf3Fe1b57AC4109c2141410a16C196778E3cA8359": [
      "function getGeneralConfig() view returns (address botAddr, address managerAddr, address storageAddr)",
      "function getLinkTokenAddress() view returns (address)",
      "function getPrice() view returns (uint256 price)",
      "function setCCIPRouter(address _newAddress)",
      "function setLinkTokenAddress(address _newAddress)",
      "function setManagerAddress(address _newAddress)",
      "function setPrice(uint256 newPrice)",
      "function setStorage(address newAddr)"
    ],
    "0xF538dA6c673A30338269655f4e019B71ba58CFd4": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xF5ba8Db6fEA7aF820De35C8D0c294e17DBC1b9D2": [
      "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
      "function facetAddresses() view returns (address[] facetAddresses_)",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
      "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)"
    ],
    "0xF609fdBA8f7A020975a7c82C82f6A1f526F9A8fC": [
      "constructor(address _rootChainManager, address _erc20Predicate)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaPolygonBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaPolygonBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0xF70A1Ed85EcC454a562A4B69ee40CBc6a4eB0b64": [
      "constructor(address _messageBus, address _relayerOwner, address _diamondAddress, address _cfUSDC)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function relayer() view returns (address)",
      "function startBridgeTokensViaCelerIM(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(uint32 maxSlippage, uint64 nonce, bytes callTo, bytes callData, uint256 messageBusFee, uint8 bridgeType) _celerIMData) payable",
      "function swapAndStartBridgeTokensViaCelerIM(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(uint32 maxSlippage, uint64 nonce, bytes callTo, bytes callData, uint256 messageBusFee, uint8 bridgeType) _celerIMData) payable"
    ],
    "0xf70B2473e7808eDAeA4A5Cea95996A9B1843D96C": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0xf7993A8df974AD022647E63402d6315137c58ABf": [
      "error CalldataEmptyButInitNotZero()",
      "error FacetAddressIsNotZero()",
      "error FacetAddressIsZero()",
      "error FacetContainsNoCode()",
      "error FunctionAlreadyExists()",
      "error FunctionDoesNotExist()",
      "error FunctionIsImmutable()",
      "error IncorrectFacetCutAction()",
      "error InitReverted()",
      "error InitZeroButCalldataNotEmpty()",
      "error NoSelectorsInFace()",
      "error OnlyContractOwner()",
      "event DiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function diamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)"
    ],
    "0xF965f52046D7095d5080bD31459601F4Eb24f72D": [
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error ContractWithNonStandardFeeEstimateFunction(string originalError)",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error ExternalCallFailed()",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidCallData()",
      "error InvalidContract()",
      "error InvalidProxyOFTAddress()",
      "error InvalidReceiver()",
      "error NativeAssetNotSupported()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error OnlyContractOwner()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "error UnAuthorized()",
      "error UnknownLayerZeroChain()",
      "event BridgeToNonEVMChain(bytes32 indexed transactionId, uint16 indexed layerZeroChainId, bytes32 receiver)",
      "event LayerZeroChainIdSet(uint256 indexed chainId, uint16 layerZeroChainId)",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "event OFTWrapperInitialized(tuple(uint256 chainId, uint16 layerZeroChainId)[] chainIdConfigs)",
      "event WhitelistUpdated(tuple(address contractAddress, bool whitelisted)[] whitelistConfigs)",
      "function INTERFACE_ID_IOFTCore() view returns (bytes4)",
      "function INTERFACE_ID_IOFTV2() view returns (bytes4)",
      "function INTERFACE_ID_IOFTWithFee() view returns (bytes4)",
      "function batchWhitelist(tuple(address contractAddress, bool whitelisted)[] configs)",
      "function determineOFTBridgeSendFunction(address _sendingAssetId, bool _withSrcSwap) view returns (bytes4 bridgeFunctionSelector)",
      "function estimateOFTFees(address _sendingAssetId, uint256 _destinationChainId, uint256 _amount, bytes32 _receiver, bool _useZro, bytes _adapterParams, bytes _customCodeCallData) view returns (tuple(uint256 nativeFee, uint256 zroFee) feeEstimate)",
      "function getOFTLayerZeroChainId(uint256 _chainId) view returns (uint16 layerZeroChainId)",
      "function initOFTWrapper(tuple(uint256 chainId, uint16 layerZeroChainId)[] chainIdConfigs, tuple(address contractAddress, bool whitelisted)[] whitelistConfigs)",
      "function isOftV1(address _sendingAssetId) view returns (bool)",
      "function isOftV2(address _sendingAssetId) view returns (bool)",
      "function isOftV2WithFee(address _sendingAssetId) view returns (bool)",
      "function setOFTLayerZeroChainId(uint256 _chainId, uint16 _layerZeroChainId)",
      "function startBridgeTokensViaCustomCodeOFT(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function startBridgeTokensViaOFTWrapperV1(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function startBridgeTokensViaOFTWrapperV2(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function startBridgeTokensViaOFTWrapperV2WithFee(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function swapAndStartBridgeTokensViaCustomCodeOFT(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function swapAndStartBridgeTokensViaOFTWrapperV1(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function swapAndStartBridgeTokensViaOFTWrapperV2(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable",
      "function swapAndStartBridgeTokensViaOFTWrapperV2WithFee(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData, tuple(address proxyOftAddress, bytes32 receiver, uint256 minAmount, uint256 lzFee, address zroPaymentAddress, bytes adapterParams, tuple(uint256 callerBps, address caller, bytes2 partnerId) feeObj, bytes customCode_sendTokensCallData, address customCode_approveTo) _oftWrapperData) payable"
    ],
    "0xF9F5bcd3a50653387ee0b9d60C1905854093e8Fb": [
      "constructor(address router, address token)",
      "error GasShouldBeZero()",
      "error InvalidToken()",
      "error NoDataAllowed()",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32 messageId)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getRouter() view returns (address)",
      "function getToken() view returns (address)"
    ],
    "0xfA3430d84324ABC9ac8AAf30B2D26260F5172ad0": [
      "constructor(address _singleton)"
    ],
    "0xfaA5f885a54D22C8571806fC001E53F0191f5Aff": [
      "error CannotAuthoriseSelf()",
      "error OnlyContractOwner()",
      "event ExecutionAllowed(address indexed account, bytes4 indexed method)",
      "event ExecutionDenied(address indexed account, bytes4 indexed method)",
      "function addressCanExecuteMethod(bytes4 _selector, address _executor) view returns (bool)",
      "function setCanExecute(bytes4 _selector, address _executor, bool _canExecute)"
    ],
    "0xFB4C992Cc7cfA7Eb3e44b928C6f756C07a3feb04": [
      "constructor(address _gateway)",
      "error CannotBridgeToSameNetwork()",
      "error ContractCallNotAllowed()",
      "error CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount)",
      "error InformationMismatch()",
      "error InsufficientBalance(uint256 required, uint256 balance)",
      "error InvalidAmount()",
      "error InvalidContract()",
      "error InvalidReceiver()",
      "error NativeAssetTransferFailed()",
      "error NoSwapDataProvided()",
      "error NoSwapFromZeroBalance()",
      "error NoTransferToNullAddress()",
      "error NullAddrIsNotAValidSpender()",
      "error NullAddrIsNotAnERC20Token()",
      "error ReentrancyError()",
      "error SliceOutOfBounds()",
      "error SliceOverflow()",
      "event LiFiGenericSwapCompleted(bytes32 indexed transactionId, string integrator, string referrer, address receiver, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiSwappedGeneric(bytes32 indexed transactionId, string integrator, string referrer, address fromAssetId, address toAssetId, uint256 fromAmount, uint256 toAmount)",
      "event LiFiTransferCompleted(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferRecovered(bytes32 indexed transactionId, address receivingAssetId, address receiver, uint256 amount, uint256 timestamp)",
      "event LiFiTransferStarted(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) bridgeData)",
      "function startBridgeTokensViaRoninBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData) payable",
      "function swapAndStartBridgeTokensViaRoninBridge(tuple(bytes32 transactionId, string bridge, string integrator, address referrer, address sendingAssetId, address receiver, uint256 minAmount, uint256 destinationChainId, bool hasSourceSwaps, bool hasDestinationCall) _bridgeData, tuple(address callTo, address approveTo, address sendingAssetId, address receivingAssetId, uint256 fromAmount, bytes callData, bool requiresDeposit)[] _swapData) payable"
    ],
    "0xfC39fdcB21Cb78b7D476207670584313EA0dfe2c": [
      "event KickedEmissions(uint256 indexed chainId, uint256 indexed activePeriod, uint256 amount)",
      "function accruedEmissions(uint256) view returns (uint256)",
      "function base() view returns (address)",
      "function initialize(address _base, address _voter, address _solidBridge, address _nftBridge, address _minter)",
      "function kick(uint256 _chainId, uint256[] _feeInEther) payable",
      "function kickMultiple(uint256[] _chainIds, uint256[][] _feeInEther) payable",
      "function minter() view returns (address)",
      "function nftBridge() view returns (address)",
      "function notifyRewardAmount(address _token, uint256 _amount)",
      "function periodEmissions(uint256) view returns (uint256)",
      "function setNftBridge(address _nftBridge)",
      "function setSolidBridge(address _solidBridge)",
      "function solidBridge() view returns (address)",
      "function voter() view returns (address)"
    ],
    "0xfF51C00546AA3d9051a4B96Ae81346E14709CD24": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitError(bytes error)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxTokensLength, uint32 maxDataSize))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, uint64 sequenceNumber, uint256 feeTokenAmount, address sender, uint64 nonce, uint256 gasLimit, bool strict, address receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847": [
      "constructor(address firstImplementation, address initialOwner)",
      "error NotAContract(address contr)",
      "error ZeroAddress()"
    ]
  }
}
